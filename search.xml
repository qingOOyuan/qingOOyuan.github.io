<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内核kobject分析</title>
      <link href="/2024/05/20/%E5%86%85%E6%A0%B8kobject%E5%88%86%E6%9E%90/"/>
      <url>/2024/05/20/%E5%86%85%E6%A0%B8kobject%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一、设备驱动模型基本元素"><a href="#一、设备驱动模型基本元素" class="headerlink" title="一、设备驱动模型基本元素"></a>一、设备驱动模型基本元素</h1><h2 id="1-1-kobject结构体"><a href="#1-1-kobject结构体" class="headerlink" title="1.1 kobject结构体"></a>1.1 kobject结构体</h2><p>sysfs的一个目录，常用来表示基本驱动对象，不允许发送消息到用户空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> &#123;</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>              *name;        <span class="comment">//kobject的名称，同时也是sysfs下的目录名字</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">entry</span>;</span>        <span class="comment">//链表节点，用于将kobject加入到kset的list_head</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span>          *<span class="title">parent</span>;</span>      <span class="comment">//该kobject的上层节点，构建kobject间的层次关系（在sysfs体现为目录结构）</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kset</span>             *<span class="title">kset</span>;</span>        <span class="comment">//该kobject所属的kset对象（可以为NULL），用于批量管理kobject对象</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kobj_type</span>        *<span class="title">ktype</span>;</span>       <span class="comment">//该kobject的sysfs文件系统相关的操作和属性</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kernfs_node</span>      *<span class="title">sd</span>;</span>          <span class="comment">//该kobject在sysfs文件系统中对应目录项</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kref</span>             <span class="title">kref</span>;</span>         <span class="comment">//该kobject的引用次数</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_DEBUG_KOBJECT_RELEASE</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span>     <span class="title">release</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> state_initialized:<span class="number">1</span>;            <span class="comment">//记录内核对象的初始化状态</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> state_in_sysfs:<span class="number">1</span>;               <span class="comment">//表示该kobject所代表的内核对象是否在sysfs建立目录</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> state_add_uevent_sent:<span class="number">1</span>;        <span class="comment">//记录是否已经向用户空间发送ADD uevent事件</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> state_remove_uevent_sent:<span class="number">1</span>;     <span class="comment">//记录是否已经向用户空间发送REMOVE uevent事件</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> uevent_suppress:<span class="number">1</span>;              <span class="comment">//如果为1，则忽略所有上报的uevent事件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于kobject添加到内核时，需要根据名字注册到sysfs虚拟文件系统中，之后就不能再直接修改该名字。如果想改，需要调用kobject_rename接口，该接口会主动处理sysfs的相关事宜。kset如果没有指定的parent，则会把kset作为parent（kset是一个特殊的kobject）。uevent提供了“用空空间通知”的功能实现，当内核中有kobject的增删改等操作时，会通知用户空间。</p><h2 id="1-2-kset结构体"><a href="#1-2-kset结构体" class="headerlink" title="1.2 kset结构体"></a>1.2 kset结构体</h2><p>sysfs的一个目录，常用来管理kobject，允许发送消息到用户空间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kset</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span>                        <span class="comment">//指向该kset下所有的kobject组成的链表</span></span><br><span class="line">        <span class="type">spinlock_t</span> list_lock;                         <span class="comment">//避免操作链表时产生竞态的自旋锁</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span>                          <span class="comment">//该kset自己的kobject（kset是一个特殊的kobject，也会在sysfs中以目录的形式体现）</span></span><br><span class="line">        <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kset_uevent_ops</span> *<span class="title">uevent_ops</span>;</span>    </span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>uevent_ops为该kset的uevent操作函数集（函数指针）。当kset的某些kobject对象发生状态变化需要通知用户空间时，调用其中对应的函数来完成。当任一kobject需要上报uevent时，都要调用它所属的kset的uevent_ops，添加环境变量，或者过滤uevent（kset可以决定哪些uevent可以上报）。因此一个kobject不属于任一kset时，是不允许发生uevent的。</p><h2 id="1-3-kobj-type结构体"><a href="#1-3-kobj-type结构体" class="headerlink" title="1.3 kobj_type结构体"></a>1.3 kobj_type结构体</h2><p>目录下属性文件的操作接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobj_type</span> &#123;</span></span><br><span class="line">        <span class="comment">/* 销毁kobject对象时调用 */</span></span><br><span class="line">        <span class="type">void</span> (*release)(<span class="keyword">struct</span> kobject *kobj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 该类型的kobject的sysfs虚拟文件系统操作接口（读属性接口show和写属性接口store） */</span></span><br><span class="line">        <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sysfs_ops</span> *<span class="title">sysfs_ops</span>;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 该类型的kobject的attribute表（sysfs的一个文件）。将会在kobject添加到内核时，一并注册到sysfs中 */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">attribute</span> **<span class="title">default_attrs</span>;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">kobj_ns_type_operations</span> *(*<span class="title">child_ns_type</span>)(<span class="keyword">struct</span> <span class="title">kobject</span> *<span class="title">kobj</span>);</span></span><br><span class="line">        <span class="type">const</span> <span class="type">void</span> *(*namespace)(<span class="keyword">struct</span> kobject *kobj);</span><br><span class="line">        <span class="type">void</span> (*get_ownership)(<span class="keyword">struct</span> kobject *kobj, <span class="type">kuid_t</span> *uid, <span class="type">kgid_t</span> *gid);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-4-kobject机制的理解"><a href="#1-4-kobject机制的理解" class="headerlink" title="1.4 kobject机制的理解"></a>1.4 kobject机制的理解</h2><p>kobject的核心功能是：保持一个引用计数，当该引用计数减为0时，自动释放kobject所占的内存空间（这决定了kobject必须是动态分配）。kobject的常见使用场景：内嵌在大型的数据结构中（如kset、device_driver等），因此这些大型的数据结构也必须是动态分配、动态释放。ktype的release回调函数负责释放kobject的内存空间。</p><ol><li>通过parent指针，可以将所有kobject以层次结构的形式组合起来。</li><li>使用一个引用计数，来记录kobject被引用的次数，并在引用计数为0时释放kobject对象（这是kobject诞生时的唯一功能）。</li><li>和sysfs虚拟文件系统配合，将每一个kobject及其特性以文件形式显示到用户空间。</li><li>在Linux中，kobject几乎不会单独存在。它的主要功能就是内嵌在一个大型的数据结构中，为这个数据结构提供一些底层的功能实现。</li><li>Linux驱动开发者很少会直接使用kobject以及它提供的接口，而是使用构建在kobject之上的设备模型接口。</li></ol><h1 id="二、kobject流程分析"><a href="#二、kobject流程分析" class="headerlink" title="二、kobject流程分析"></a>二、kobject流程分析</h1><h2 id="2-1-kobject使用流程"><a href="#2-1-kobject使用流程" class="headerlink" title="2.1 kobject使用流程"></a>2.1 kobject使用流程</h2><p>kobject大多数情况下（有一例外）会嵌在其它数据结构中使用，使用流程如下：</p><ol><li>定义一个struct kset类型的指针，并在初始化时为它分配空间，添加到内核中。</li><li>根据实际情况，定义内嵌有kobject的自己所需的数据结构原型。</li><li>定义一个适合自己的ktype，并实现其中回调函数release。</li><li>在需要使用到包含kobject的数据结构时，动态分配该数据结构，并分配kobject空间，添加到内核中。</li><li>每一次引用数据结构时，调用kobject_get接口增加引用计数；引用结束时，调用kobject_put接口，减少引用次数。</li><li>当引用计数为0时，kobject模块会自动调用ktype所提供的release接口，释放上层数据结构以及kobject的内存空间。</li></ol><p>　　<strong>例外：</strong>开发者只需在sysfs中创建一个目录，而不需要其它的kset、ktype的操作。这是可以直接调用kobject_create_and_add接口，分配一个kobject结构并把它添加到内核中。（以他为例分析）</p><h2 id="2-2-kobject-create-and-add"><a href="#2-2-kobject-create-and-add" class="headerlink" title="2.2 kobject_create_and_add"></a>2.2 kobject_create_and_add</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kobject_create_and_add - 动态创建一个struct kobject并将其注册到sysfs</span></span><br><span class="line"><span class="comment"> * @name: 对象的名称</span></span><br><span class="line"><span class="comment"> * @parent: 这个kobject的父kobject(如果有的话)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> kobject *<span class="title function_">kobject_create_and_add</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> kobject *parent)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> *<span class="title">kobj</span>;</span></span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line">        <span class="comment">//创建并初始化一个kobject对象  </span></span><br><span class="line">        kobj = kobject_create();          </span><br><span class="line">        <span class="keyword">if</span> (!kobj)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//sysfs创建一个目录项并与kobject对象关联</span></span><br><span class="line">        retval = kobject_add(kobj, parent, <span class="string">&quot;%s&quot;</span>, name);    </span><br><span class="line">        <span class="keyword">if</span> (retval) &#123;</span><br><span class="line">                pr_warn(<span class="string">&quot;%s: kobject_add error: %d\n&quot;</span>, __func__, retval);</span><br><span class="line">                kobject_put(kobj);</span><br><span class="line">                kobj = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> kobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kobject_create_and_add()函数是kobject_create函数和kobject_add函数的组合。整体功能是创建一个名字为“name”的kobject对象，并将其添加到指定的父kobject对象下。其流程如下：</p><p><img src="kobject_create_add_add1.png" alt="kobject_create_add_add1"></p><p><img src="kobject_create_add_add2.png" alt="kobject_create_add_add2"></p><p><img src="kobject_create_add_add3.png" alt="kobject_create_add_add3"></p><p><img src="kobject_create_add_add4.png" alt="kobject_create_add_add4"></p><p><img src="kobject_create_add_add5.png" alt="kobject_create_add_add5"></p><h2 id="2-3-sysfs-create-group"><a href="#2-3-sysfs-create-group" class="headerlink" title="2.3 sysfs_create_group"></a>2.3 sysfs_create_group</h2><p>上一节分析到：</p><p>kobject_create() → kobject_init(kobj, &amp;dymic_kobj_ktype) → dymic_kobj_ktype.sysfs_ops &#x3D; &amp;kobj_sysfs_ops。</p><p>kobj_sysfs_ops中存放着统一的操作接口show和store。调用统一的操作接口时，会在内部进一步调用具体的操作接口。</p><p>sysfs_create_group会在&#x2F;sys下创建相关的attribute文件，并让其与具体的操作接口关联起来。</p><p><img src="sysfs_create_group1.png" alt="sysfs_create_group1"></p><p><img src="sysfs_create_group2.png" alt="sysfs_create_group2"></p><p><img src="sysfs_create_group3.png" alt="sysfs_create_group3"></p><h1 id="三、kobject点灯测试"><a href="#三、kobject点灯测试" class="headerlink" title="三、kobject点灯测试"></a>三、kobject点灯测试</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sysfs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* GPIO虚拟地址映射 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __iomem *IMX6U_CCM_CCGR1;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __iomem *SW_MUX_GPIO1_IO04;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __iomem *SW_PAD_GPIO1_IO04;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __iomem *GPIO1_GDIR;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __iomem *GPIO1_DR;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">int</span> foo;</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">foo_show</span><span class="params">(<span class="keyword">struct</span> kobject *kobj, <span class="keyword">struct</span> kobj_attribute *attr, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* buf 将会被自动拷贝到用户空间 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d\n&quot;</span>, foo);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">foo_store</span><span class="params">(<span class="keyword">struct</span> kobject *kobj, <span class="keyword">struct</span> kobj_attribute *attr, <span class="type">const</span> <span class="type">char</span> *buf, <span class="type">size_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">/* buf内容来自用户空间，由内核自动完成了。kstrtoint 是将子串buf以十进制的格式输出到foo */</span></span><br><span class="line">        <span class="type">int</span> ret = kstrtoint(buf, <span class="number">10</span>, &amp;foo);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)     <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">led_show</span><span class="params">(<span class="keyword">struct</span> kobject *kobj, <span class="keyword">struct</span> kobj_attribute *attr, <span class="type">char</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> var;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(attr-&gt;attr.name, <span class="string">&quot;led&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">                var = <span class="number">123</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">led_store</span><span class="params">(<span class="keyword">struct</span> kobject *kobj, <span class="keyword">struct</span> kobj_attribute *attr, <span class="type">const</span> <span class="type">char</span> *buf, <span class="type">size_t</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(attr-&gt;attr.name, <span class="string">&quot;led&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(buf, <span class="string">&quot;on&quot;</span>, <span class="number">2</span>))&#123;</span><br><span class="line">                        iowrite32(<span class="number">0</span>&lt;&lt;<span class="number">4</span>, GPIO1_DR);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">memcmp</span>(buf, <span class="string">&quot;off&quot;</span>, <span class="number">3</span>))&#123;</span><br><span class="line">                        iowrite32(<span class="number">1</span>&lt;&lt;<span class="number">4</span>, GPIO1_DR);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* __ATTR 定义在 include/linux/sysfs.h。foo 对应属性文件名。</span></span><br><span class="line"><span class="comment"> * show成员 和 store成员 最终分别会被 kobject-&gt;ktype 下的 kobj_sys_ops 下的 kobj_attr_show 和 kobj_attr_store 调用。</span></span><br><span class="line"><span class="comment"> #define __ATTR(_name, _mode, _show, _store) &#123;                          \</span></span><br><span class="line"><span class="comment">        .attr = &#123;.name = __stringify(_name),                            \</span></span><br><span class="line"><span class="comment">                 .mode = VERIFY_OCTAL_PERMISSIONS(_mode) &#125;,             \</span></span><br><span class="line"><span class="comment">        .show   = _show,                                                \</span></span><br><span class="line"><span class="comment">        .store  = _store,                                               \</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kobj_attribute</span> <span class="title">foo_attribute</span> =</span> __ATTR(foo, <span class="number">0664</span>, foo_show, foo_store);</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kobj_attribute</span> <span class="title">led_attribute</span> =</span> __ATTR(led, <span class="number">0664</span>, led_show, led_store);</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">attribute</span> *<span class="title">attrs</span>[] =</span> &#123;</span><br><span class="line">        &amp;foo_attribute.attr,</span><br><span class="line">        &amp;led_attribute.attr,</span><br><span class="line">        <span class="literal">NULL</span>, <span class="comment">/* need to NULL terminate the list of attributes */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">attribute_group</span> <span class="title">attr_group</span> =</span> &#123;</span><br><span class="line">        .attrs = attrs,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> *<span class="title">led_kobj</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">led_init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* GPIO相关寄存器操作 */</span></span><br><span class="line">        IMX6U_CCM_CCGR1 = ioremap(<span class="number">0x20c406c</span>, <span class="number">4</span>);</span><br><span class="line">        SW_MUX_GPIO1_IO04 = ioremap(<span class="number">0x20e006c</span>, <span class="number">4</span>);</span><br><span class="line">        SW_PAD_GPIO1_IO04 = ioremap(<span class="number">0x20e02f8</span>, <span class="number">4</span>);</span><br><span class="line">        GPIO1_GDIR = ioremap(<span class="number">0x0209c004</span>, <span class="number">4</span>);</span><br><span class="line">        GPIO1_DR = ioremap(<span class="number">0x0209c000</span>, <span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 使能GPIO1时钟 */</span></span><br><span class="line">        iowrite32(<span class="number">0xffffffff</span>, IMX6U_CCM_CCGR1);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 设置GPIO1_IO04复用为普通GPIO */</span></span><br><span class="line">        iowrite32(<span class="number">5</span>, SW_MUX_GPIO1_IO04);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 设置GPIO属性 */</span></span><br><span class="line">        iowrite32(<span class="number">0x10b0</span>, SW_PAD_GPIO1_IO04);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 设置GPIO1_IO04为输出功能 */</span></span><br><span class="line">        iowrite32(<span class="number">1</span>&lt;&lt;<span class="number">4</span>, GPIO1_GDIR);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* LED输出高电平 */</span></span><br><span class="line">        iowrite32(<span class="number">1</span>&lt;&lt;<span class="number">4</span>, GPIO1_DR);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 创建一个kobject对象，上一层节点设置为 NULL，此kobject对象在 sysfs 下的根目录。</span></span><br><span class="line"><span class="comment">         * 此函数执行完会在 /sys 目录下生成一个名为&quot;led_kobject&quot;的目录。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        led_kobj = kobject_create_and_add(<span class="string">&quot;led_kobject&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(!led_kobj)   <span class="keyword">return</span> -ENOMEM;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 为kobject设置属性文件，并且将属性文件和操作接口绑定起来 */</span></span><br><span class="line">        retval = sysfs_create_group(led_kobj, &amp;attr_group);</span><br><span class="line">        <span class="keyword">if</span>(retval)</span><br><span class="line">                kobject_put(led_kobj);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">led_exit</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">        <span class="comment">/* 取消映射 */</span></span><br><span class="line">        iounmap(IMX6U_CCM_CCGR1);</span><br><span class="line">        iounmap(SW_MUX_GPIO1_IO04);</span><br><span class="line">        iounmap(SW_PAD_GPIO1_IO04);</span><br><span class="line">        iounmap(GPIO1_GDIR);</span><br><span class="line">        iounmap(GPIO1_DR);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 注销字符设备驱动 */</span></span><br><span class="line">        kobject_put(led_kobj);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module_init(led_init);</span><br><span class="line">module_exit(led_exit);</span><br><span class="line"> </span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;couvrir&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;led module&quot;</span>);</span><br><span class="line">MODULE_ALIAS(<span class="string">&quot;led module&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>测试流程：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insmod kobject_led.ko</span><br><span class="line"></span><br><span class="line">查看/sys/文件夹，存在led_kobject的目录项。 </span><br><span class="line"></span><br><span class="line">查看/sys/led_kobject的属性文件。</span><br><span class="line"></span><br><span class="line">然后就是echo和cat命令的使用。</span><br><span class="line"></span><br><span class="line">rmmod kobject_led</span><br></pre></td></tr></table></figure><p><img src="test.png" alt="test"></p>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i2c驱动分析</title>
      <link href="/2024/04/28/i2c%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/"/>
      <url>/2024/04/28/i2c%E9%A9%B1%E5%8A%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-早期版本框架"><a href="#一、-早期版本框架" class="headerlink" title="一、 早期版本框架"></a>一、 早期版本框架</h1><h2 id="1-attach-adapter方法"><a href="#1-attach-adapter方法" class="headerlink" title="1. attach_adapter方法"></a>1. attach_adapter方法</h2><p><code>attach_adapter</code>方法是早期的一种方式，这种方法通常适用于i2c 设备驱动程序不知道其设备将会连接到哪个I2C adapter的情况下。</p><p><img src="attach_adapter%E6%96%B9%E6%B3%95.png" alt="attach_adapter方法"></p><h3 id="attach-adapter例程"><a href="#attach-adapter例程" class="headerlink" title="attach_adapter例程"></a>attach_adapter例程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/jiffies.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> ignore[]      = &#123; I2C_CLIENT_END &#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> normal_addr[] = &#123; <span class="number">0x50</span>, I2C_CLIENT_END &#125;; </span><br><span class="line"><span class="comment">/* 改为0x60的话, 由于不存在设备地址为0x60的设备, 所以at24cxx_detect不被调用 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> force_addr[] = &#123;ANY_I2C_BUS, <span class="number">0x60</span>, I2C_CLIENT_END&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> * forces[] = &#123;force_addr, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client_address_data</span> <span class="title">addr_data</span> =</span> &#123;</span><br><span class="line">.normal_i2c= normal_addr,  <span class="comment">/* 要发出S信号和设备地址并得到ACK信号,才能确定存在这个设备 */</span></span><br><span class="line">.probe= ignore,</span><br><span class="line">.ignore= ignore,</span><br><span class="line"><span class="comment">//.forces     = forces, /* 强制认为存在这个设备 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> major;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">cls</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">at24cxx_client</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">at24cxx_driver</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> * offset)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> address;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* address = buf[0] </span></span><br><span class="line"><span class="comment"> * data    = buf[1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (size != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">copy_from_user(&amp;address, buf, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据传输三要素: 源,目的,长度 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 读AT24CXX时,要先把要读的存储空间的地址发给它 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr  = at24cxx_client-&gt;addr;  <span class="comment">/* 目的 */</span></span><br><span class="line">msg[<span class="number">0</span>].buf   = &amp;address;              <span class="comment">/* 源 */</span></span><br><span class="line">msg[<span class="number">0</span>].len   = <span class="number">1</span>;                     <span class="comment">/* 地址=1 byte */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = <span class="number">0</span>;                     <span class="comment">/* 表示写 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 然后启动读操作 */</span></span><br><span class="line">msg[<span class="number">1</span>].addr  = at24cxx_client-&gt;addr;  <span class="comment">/* 源 */</span></span><br><span class="line">msg[<span class="number">1</span>].buf   = &amp;data;                 <span class="comment">/* 目的 */</span></span><br><span class="line">msg[<span class="number">1</span>].len   = <span class="number">1</span>;                     <span class="comment">/* 数据=1 byte */</span></span><br><span class="line">msg[<span class="number">1</span>].flags = I2C_M_RD;                     <span class="comment">/* 表示读 */</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(at24cxx_client-&gt;adapter, msg, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">copy_to_user(buf, &amp;data, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *offset)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> val[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[1];</span></span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* address = buf[0] </span></span><br><span class="line"><span class="comment"> * data    = buf[1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (size != <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">copy_from_user(val, buf, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据传输三要素: 源,目的,长度 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr  = at24cxx_client-&gt;addr;  <span class="comment">/* 目的 */</span></span><br><span class="line">msg[<span class="number">0</span>].buf   = val;                   <span class="comment">/* 源 */</span></span><br><span class="line">msg[<span class="number">0</span>].len   = <span class="number">2</span>;                     <span class="comment">/* 地址+数据=2 byte */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = <span class="number">0</span>;                     <span class="comment">/* 表示写 */</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(at24cxx_client-&gt;adapter, msg, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">at24cxx_fops</span> =</span> &#123;</span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.read  = at24cxx_read,</span><br><span class="line">.write = at24cxx_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_detect</span><span class="params">(<span class="keyword">struct</span> i2c_adapter *adapter, <span class="type">int</span> address, <span class="type">int</span> kind)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;at24cxx_detect\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构构一个i2c_client结构体: 以后收改数据时会用到它 */</span></span><br><span class="line">at24cxx_client = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> i2c_client), GFP_KERNEL);</span><br><span class="line">at24cxx_client-&gt;addr    = address;</span><br><span class="line">at24cxx_client-&gt;adapter = adapter;</span><br><span class="line">at24cxx_client-&gt;driver  = &amp;at24cxx_driver;</span><br><span class="line"><span class="built_in">strcpy</span>(at24cxx_client-&gt;name, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">i2c_attach_client(at24cxx_client);</span><br><span class="line"></span><br><span class="line">major = register_chrdev(<span class="number">0</span>, <span class="string">&quot;at24cxx&quot;</span>, &amp;at24cxx_fops);</span><br><span class="line"></span><br><span class="line">cls = class_create(THIS_MODULE, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">class_device_create(cls, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">&quot;at24cxx&quot;</span>); <span class="comment">/* /dev/at24cxx */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_attach</span><span class="params">(<span class="keyword">struct</span> i2c_adapter *adapter)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i2c_probe(adapter, &amp;addr_data, at24cxx_detect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_detach</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;at24cxx_detach\n&quot;</span>);</span><br><span class="line">class_device_destroy(cls, MKDEV(major, <span class="number">0</span>));</span><br><span class="line">class_destroy(cls);</span><br><span class="line">unregister_chrdev(major, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">i2c_detach_client(client);</span><br><span class="line">kfree(i2c_get_clientdata(client));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 分配一个i2c_driver结构体 */</span></span><br><span class="line"><span class="comment">/* 2. 设置i2c_driver结构体 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">at24cxx_driver</span> =</span> &#123;</span><br><span class="line">.driver = &#123;</span><br><span class="line">.name= <span class="string">&quot;at24cxx&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">.attach_adapter = at24cxx_attach,</span><br><span class="line">.detach_client  = at24cxx_detach,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_add_driver(&amp;at24cxx_driver);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">at24cxx_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_del_driver(&amp;at24cxx_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(at24cxx_init);</span><br><span class="line">module_exit(at24cxx_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Test代码"><a href="#Test代码" class="headerlink" title="Test代码"></a>Test代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c_test r addr</span></span><br><span class="line"><span class="comment"> * i2c_test w addr val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_usage</span><span class="params">(<span class="type">char</span> *file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s r addr\n&quot;</span>, file);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s w addr val\n&quot;</span>, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((argc != <span class="number">3</span>) &amp;&amp; (argc != <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/dev/at24cxx&quot;</span>, O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/at24cxx\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">read(fd, buf, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data: %c, %d, 0x%2x\n&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">0</span>], buf[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">buf[<span class="number">1</span>] = strtoul(argv[<span class="number">3</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">write(fd, buf, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-i2c-new-device方法"><a href="#2-i2c-new-device方法" class="headerlink" title="2.  i2c_new_device方法"></a>2.  i2c_new_device方法</h2><p>对于已经知道i2c设备挂接于哪个i2c adapter时，可以直接使用i2c_new_device接口注册i2c client设备。实际上注册i2c client设备最后会注册一个i2c_bus_type类型的device ，注册i2c_driver最后会注册一个i2c_bus_type类型的driver。</p><p>与platform总线类似，一旦有device或driver注册到i2c_bus_type上，便会调用i2c_bus_type的match函数尝试匹配，若匹配则执行i2c_driver的probe函数。不同版本的内核的匹配机制都大同小异，这里以2.6内核，注册i2c_client做分析：</p><p><img src="i2c_new_device%E6%96%B9%E6%B3%951.png" alt="i2c_new_device方法1"></p><p><img src="i2c_new_device%E6%96%B9%E6%B3%952.png" alt="i2c_new_device方法2"></p><h3 id="device代码"><a href="#device代码" class="headerlink" title="device代码"></a>device代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">at24cxx_info</span> =</span> &#123;</span><br><span class="line">I2C_BOARD_INFO(<span class="string">&quot;at24c08&quot;</span>, <span class="number">0x50</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">at24cxx_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_dev_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">i2c_adap</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已经知道当前i2c设备挂接于i2c adapter 0 */</span></span><br><span class="line">i2c_adap = i2c_get_adapter(<span class="number">0</span>);</span><br><span class="line">at24cxx_client = i2c_new_device(i2c_adap, &amp;at24cxx_info);</span><br><span class="line">i2c_put_adapter(i2c_adap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">at24cxx_dev_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_unregister_device(at24cxx_client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(at24cxx_dev_init);</span><br><span class="line">module_exit(at24cxx_dev_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="driver代码"><a href="#driver代码" class="headerlink" title="driver代码"></a>driver代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> major;</span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="keyword">class</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">at24cxx_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 传入: buf[0] : addr</span></span><br><span class="line"><span class="comment"> * 输出: buf[0] : data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_read</span><span class="params">(<span class="keyword">struct</span> file * file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *off)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addr, data;</span><br><span class="line"></span><br><span class="line">copy_from_user(&amp;addr, buf, <span class="number">1</span>);</span><br><span class="line">data = i2c_smbus_read_byte_data(at24cxx_client, addr);</span><br><span class="line">copy_to_user(buf, &amp;data, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* buf[0] : addr</span></span><br><span class="line"><span class="comment"> * buf[1] : data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> __user *buf, <span class="type">size_t</span> count, <span class="type">loff_t</span> *off)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> ker_buf[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addr, data;</span><br><span class="line"></span><br><span class="line">copy_from_user(ker_buf, buf, <span class="number">2</span>);</span><br><span class="line">addr = ker_buf[<span class="number">0</span>];</span><br><span class="line">data = ker_buf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;addr = 0x%02x, data = 0x%02x\n&quot;</span>, addr, data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!i2c_smbus_write_byte_data(at24cxx_client, addr, data))</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">at24cxx_fops</span> =</span> &#123;</span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.read  = at24cxx_read,</span><br><span class="line">.write = at24cxx_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __devinit <span class="title function_">at24cxx_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span><br><span class="line">&#123;</span><br><span class="line">at24cxx_client = client;</span><br><span class="line"></span><br><span class="line">major = register_chrdev(<span class="number">0</span>, <span class="string">&quot;at24cxx&quot;</span>, &amp;at24cxx_fops);</span><br><span class="line"><span class="class"><span class="keyword">class</span> =</span> class_create(THIS_MODULE, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">device_create(class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">&quot;at24cxx&quot;</span>); <span class="comment">/* /dev/at24cxx */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __devexit <span class="title function_">at24cxx_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">device_destroy(class, MKDEV(major, <span class="number">0</span>));</span><br><span class="line">class_destroy(class);</span><br><span class="line">unregister_chrdev(major, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">at24cxx_id_table</span>[] =</span> &#123;</span><br><span class="line">&#123; <span class="string">&quot;at24c08&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 分配/设置i2c_driver */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">at24cxx_driver</span> =</span> &#123;</span><br><span class="line">.driver= &#123;</span><br><span class="line">.name= <span class="string">&quot;100ask&quot;</span>,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">&#125;,</span><br><span class="line">.probe= at24cxx_probe,</span><br><span class="line">.remove= __devexit_p(at24cxx_remove),</span><br><span class="line">.id_table= at24cxx_id_table,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_drv_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2. 注册i2c_driver */</span></span><br><span class="line">i2c_add_driver(&amp;at24cxx_driver);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">at24cxx_drv_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_del_driver(&amp;at24cxx_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(at24cxx_drv_init);</span><br><span class="line">module_exit(at24cxx_drv_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Test代码-1"><a href="#Test代码-1" class="headerlink" title="Test代码"></a>Test代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c_test r addr</span></span><br><span class="line"><span class="comment"> * i2c_test w addr val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_usage</span><span class="params">(<span class="type">char</span> *file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s r addr\n&quot;</span>, file);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s w addr val\n&quot;</span>, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((argc != <span class="number">3</span>) &amp;&amp; (argc != <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/dev/at24cxx&quot;</span>, O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/at24cxx\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">read(fd, buf, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data: %c, %d, 0x%2x\n&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">0</span>], buf[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>) &amp;&amp; (argc == <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">buf[<span class="number">0</span>] = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">buf[<span class="number">1</span>] = strtoul(argv[<span class="number">3</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (write(fd, buf, <span class="number">2</span>) != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write err, addr = 0x%02x, data = 0x%02x\n&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><strong>Note 1：</strong>i2c_new_device方法与adapter_attach方法不能同时存在，即i2c_driver中不能同时有probe和adapter_attach成员，i2c框架在注册i2c_driver时做了判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> is_newstyle_driver(d) ((d)-&gt;probe || (d)-&gt;remove)</span></span><br><span class="line">i2c_add_driver</span><br><span class="line">i2c_register_driver</span><br><span class="line"><span class="comment">/* new style driver methods can&#x27;t mix with legacy ones */</span></span><br><span class="line"><span class="keyword">if</span> (is_newstyle_driver(driver)) &#123;</span><br><span class="line"><span class="keyword">if</span> (driver-&gt;attach_adapter || driver-&gt;detach_adapter || driver-&gt;detach_client) &#123;</span><br><span class="line">printk(KERN_WARNING <span class="string">&quot;i2c-core: driver [%s] is confused\n&quot;</span>, driver-&gt;driver.name);</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i2c_bus_type的match函数里也做了判断，确保i2c_driver端注册i2c_bus_type类型的driver时，不会与i2c_bus_type类型的device匹配成功。is_newstyle_driver判断没有probe成员，就返回0，表示没有匹配成功；有probe成员才真正去匹配：</p><p><img src="i2c_device_match.png" alt="i2c_device_match"></p><p>通过注释，如果是旧式驱动（legacy driver）也就是adapter_attach方法，它会自行扫描每个I2C适配器&#x2F;总线，而不是使用内核的驱动模型probe探测机制。</p><p><strong>Note 2：i2c_new_probed_device</strong></p><p>i2c_new_device方法不会判断I2C_BOARD_INFO(“at24c08”, 0x50)中指定的地址是不是真的存在设备，他只管利用给他的I2C_BOARD_INFO信息去注册i2c_client，最后会注册一个i2c_bus_type类型的device。</p><p>要注意，I2C_BOARD_INFO中的字符串”at24c08”要和i2c_driver中的id_table数组匹配，因为i2c_driver最后会注册一个i2c_bus_type类型的driver，他们之间是利用这个字符串来匹配，才会执行i2c_driver的probe函数。</p><p>若要在地址真实存在设备时才注册i2c_client，使用：i2c_new_probed_device。它会在创建i2c_client设备前调用adapter的传输函数对指定的地址进行探测，看是否能收到该地址的ACK回应信号，以验证设备是否真实存在于总线上。</p><p>只需更改device侧代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">at24cxx_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> addr_list[] = &#123; <span class="number">0x60</span>, <span class="number">0x50</span>, I2C_CLIENT_END &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_dev_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">i2c_adap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">at24cxx_info</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;at24cxx_info, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> i2c_board_info));</span><br><span class="line">strlcpy(at24cxx_info.type, <span class="string">&quot;at24c08&quot;</span>, I2C_NAME_SIZE);</span><br><span class="line"></span><br><span class="line">i2c_adap = i2c_get_adapter(<span class="number">0</span>);</span><br><span class="line">at24cxx_client = i2c_new_probed_device(i2c_adap, &amp;at24cxx_info, addr_list, <span class="literal">NULL</span>);</span><br><span class="line">i2c_put_adapter(i2c_adap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (at24cxx_client)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -ENODEV;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">at24cxx_dev_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_unregister_device(at24cxx_client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(at24cxx_dev_init);</span><br><span class="line">module_exit(at24cxx_dev_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>Note 3：i2c_new_device与i2c_attach_client关系</strong></p><p>i2c_new_device需要依据i2c_board_info的信息先分配、设置i2c_client，再调用i2c_attach_client注册i2c_client，最终注册一个i2c_bus_type类型的device。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> i2c_client *<span class="title function_">i2c_new_device</span><span class="params">(<span class="keyword">struct</span> i2c_adapter *adap, <span class="keyword">struct</span> i2c_board_info <span class="type">const</span> *info)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span>*<span class="title">client</span>;</span></span><br><span class="line"></span><br><span class="line">client = kzalloc(<span class="keyword">sizeof</span> *client, GFP_KERNEL);</span><br><span class="line">client-&gt;adapter = adap;</span><br><span class="line">client-&gt;dev.platform_data = info-&gt;platform_data;</span><br><span class="line">client-&gt;addr = info-&gt;addr;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">strlcpy(client-&gt;driver_name, info-&gt;driver_name,<span class="keyword">sizeof</span>(client-&gt;driver_name));</span><br><span class="line"></span><br><span class="line">i2c_attach_client(client);</span><br><span class="line"><span class="comment">/* 这里相当于注册i2c_client */</span></span><br><span class="line">list_add_tail(&amp;client-&gt;<span class="built_in">list</span>,&amp;adapter-&gt;clients);</span><br><span class="line"><span class="comment">/* 注册i2c_bus_type类型的device */</span></span><br><span class="line">client-&gt;dev.bus = &amp;i2c_bus_type;</span><br><span class="line">device_register(&amp;client-&gt;dev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、近期版本框架"><a href="#二、近期版本框架" class="headerlink" title="二、近期版本框架"></a>二、近期版本框架</h1><h2 id="1-detect方法"><a href="#1-detect方法" class="headerlink" title="1. detect方法"></a>1. detect方法</h2><p>随着linux内核版本的更新，早期的attach_adapter方法已经不推荐了，新增了一个detect方法，我理解成是attach_adapter方法的增强版。也是适用于i2c 设备驱动程序不知道其设备将会连接到哪个I2C adapter的情况下。以4.14内核为例分析。</p><p>怎么理解增强呢？在attach_adapter方法中，i2c_driver中不能同时有probe和adapter_attach成员，所以在它的回调函数中需要做很多事情，比如：</p><p>① 虽然adapter收到了指定地址返回的ACK信号，但是这只是确定了有i2c设备挂接在这个adapter控制器上，但i2c设备的地址可能相同，是at24c02还是iic oled呢？所以在回调函数里需要读取一下i2c设备信息，分辨是哪款i2c设备。</p><p>②  attach_adapter方法收到了指定地址返回的ACK信号后，不会帮我们调用i2c_new_device，即分配、设置、注册i2c_client，所以需要在回调函数中完成。</p><p>③ 我们可能还需要在回调函数中注册字符设备驱动、input输入设备。</p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>detect方法的整体流程和早期版本的attach_adapter方法类似，不管是注册一个i2c_adapter还是注册一个i2c_driver，最终都会调用到i2c_detect(adap, driver);</p><p>① 注册i2c_adapter时，取出存放i2c_driver的链表调用i2c_detect(adap, driver);</p><p>② 注册i2c_driver时，取出存放i2c_adapter的链表调用i2c_detect(adap, driver);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注册i2c_adapter */</span></span><br><span class="line">i2c_add_adapter(adap);</span><br><span class="line">__i2c_add_numbered_adapter(adapter);</span><br><span class="line">i2c_register_adapter(adap);</span><br><span class="line"><span class="comment">/* Notify drivers */</span></span><br><span class="line">bus_for_each_drv(&amp;i2c_bus_type, <span class="literal">NULL</span>, adap, __process_new_adapter);</span><br><span class="line">__process_new_adapter</span><br><span class="line"><span class="title function_">i2c_do_add_adapter</span><span class="params">(to_i2c_driver(d), data)</span>;</span><br><span class="line">i2c_detect(adap, driver);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册i2c_driver */</span></span><br><span class="line">i2c_add_driver(driver)</span><br><span class="line">i2c_register_driver(THIS_MODULE, driver)</span><br><span class="line"><span class="comment">/* Walk the adapters that are already present */</span></span><br><span class="line">i2c_for_each_dev(driver, __process_new_driver);</span><br><span class="line">__process_new_driver</span><br><span class="line"><span class="title function_">i2c_do_add_adapter</span><span class="params">(data, to_i2c_adapter(dev))</span>;</span><br><span class="line">i2c_detect(adap, driver);</span><br></pre></td></tr></table></figure><p>分析i2c_detect：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Detect supported devices on that bus, and instantiate them */</span></span><br><span class="line">i2c_detect(<span class="keyword">struct</span> i2c_adapter *adapter, <span class="keyword">struct</span> i2c_driver *driver)</span><br><span class="line"><span class="comment">/* 取出i2c_driver中的设备地址数组 */</span></span><br><span class="line">address_list = driver-&gt;address_list;</span><br><span class="line"><span class="comment">/* 判断是否使用detect方法，如果i2c_driver没有设置对应成员就是不使用 */</span></span><br><span class="line"><span class="keyword">if</span> (!driver-&gt;detect || !address_list)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; address_list[i] != I2C_CLIENT_END; i += <span class="number">1</span>)</span><br><span class="line">temp_client-&gt;addr = address_list[i];</span><br><span class="line">temp_client-&gt;adapter = adapter;</span><br><span class="line"><span class="comment">/* 对每个地址都去访问，看看能否收到ACK回应 */</span></span><br><span class="line">i2c_detect_address(temp_client, driver);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_board_info</span> <span class="title">info</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_adapter</span> *<span class="title">adapter</span> =</span> temp_client-&gt;adapter;</span><br><span class="line"><span class="type">int</span> addr = temp_client-&gt;addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断这个设备是否存在：简单的发出S信号确定有ACK */</span></span><br><span class="line"><span class="keyword">if</span> (!i2c_default_probe(adapter, addr))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用我们i2c_driver设置的detect函数成员，分辨具体芯片，设置info-&gt;type */</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;info, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> i2c_board_info));</span><br><span class="line">info.addr = addr;</span><br><span class="line"><span class="comment">/* 后面的i2c_new_device需要利用i2c_board_info的信息来设置i2c_client和注册一个i2c_bus_type类型的device</span></span><br><span class="line"><span class="comment"> * 为了让i2c_driver的probe函数被调用，就需要在driver-&gt;detect中设置info-&gt;type与i2c_driver中id_table某项匹配 </span></span><br><span class="line"><span class="comment"> * 4.14版本与上面的2.6版本不同，4.14版本用info-&gt;type代替了2.6版本的info-&gt;driver_name，但其实都大同小异。*/</span></span><br><span class="line">err = driver-&gt;detect(temp_client, &amp;info);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分配、设置、注册i2c_client，最终会注册一个i2c_bus_type类型的device */</span></span><br><span class="line">client = i2c_new_device(adapter, &amp;info);</span><br></pre></td></tr></table></figure><p>可以看到，i2c_driver中可以同时有detect和probe成员，detect方法在收到了指定地址返回的ACK信号后，会调用我们i2c_driver中设置的detect函数成员。</p><p>同时帮我们调用i2c_new_device来分配、设置、注册i2c_client，最终会注册一个i2c_bus_type类型的device，与i2c_driver注册的i2c_bus_type类型的driver匹配后，调用i2c_driver的probe函数。这样我们就可以将工作分开，避免糅杂在一起：</p><p>① 在i2c_driver中设置的detect函数成员里，分辨是哪款i2c设备。</p><p>② 在i2c_driver中设置的probe函数成员里，注册字符设备驱动、input输入设备。</p><h3 id="detect代码"><a href="#detect代码" class="headerlink" title="detect代码"></a>detect代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __devinit <span class="title function_">at24cxx_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client,</span></span><br><span class="line"><span class="params">  <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 4. 注册字符设备驱动、input输入设备... */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __devexit <span class="title function_">at24cxx_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">at24cxx_id_table</span>[] =</span> &#123;</span><br><span class="line">&#123; <span class="string">&quot;at24c08&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_detect</span><span class="params">(<span class="keyword">struct</span> i2c_client *client,</span></span><br><span class="line"><span class="params">       <span class="keyword">struct</span> i2c_board_info *info)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 3. 能运行到这里, 表示该addr的设备是存在的</span></span><br><span class="line"><span class="comment"> * 但是有些设备单凭地址无法分辨(A芯片的地址是0x50, B芯片的地址也是0x50)</span></span><br><span class="line"><span class="comment"> * 还需要进一步读写I2C设备来分辨是哪款芯片</span></span><br><span class="line"><span class="comment"> * detect就是用来进一步分辨这个芯片是哪一款，并且设置info-&gt;type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;at24cxx_detect : addr = 0x%x\n&quot;</span>, client-&gt;addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 进一步判断是哪一款i2c设备 */</span></span><br><span class="line"><span class="comment">/* ...... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置info-&gt;type，i2c_driver-&gt;detect执行后便执行i2c_new_device</span></span><br><span class="line"><span class="comment"> * 他需要利用i2c_board_info的信息来设置i2c_client和注册一个i2c_bus_type类型的device */</span></span><br><span class="line">strlcpy(info-&gt;type, <span class="string">&quot;at24c08&quot;</span>, I2C_NAME_SIZE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span> addr_list[] = &#123; <span class="number">0x60</span>, <span class="number">0x50</span>, I2C_CLIENT_END &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 分配/设置i2c_driver */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">at24cxx_driver</span> =</span> &#123;</span><br><span class="line">.class  = I2C_CLASS_HWMON, <span class="comment">/* 表示去哪些适配器上找设备 */</span></span><br><span class="line">.driver= &#123;</span><br><span class="line">.name= <span class="string">&quot;100ask&quot;</span>,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">&#125;,</span><br><span class="line">.probe= at24cxx_probe,</span><br><span class="line">.remove= __devexit_p(at24cxx_remove),</span><br><span class="line">.id_table= at24cxx_id_table,</span><br><span class="line">.detect     = at24cxx_detect,  <span class="comment">/* 用这个函数来检测具体是什么i2c设备 */</span></span><br><span class="line">.address_list= addr_list,   <span class="comment">/* 这些设备的地址 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_drv_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2. 注册i2c_driver */</span></span><br><span class="line">i2c_add_driver(&amp;at24cxx_driver);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">at24cxx_drv_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_del_driver(&amp;at24cxx_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(at24cxx_drv_init);</span><br><span class="line">module_exit(at24cxx_drv_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Test代码-2"><a href="#Test代码-2" class="headerlink" title="Test代码"></a>Test代码</h3><p>略略略……</p><h2 id="2-设备树方法"><a href="#2-设备树方法" class="headerlink" title="2. 设备树方法"></a>2. 设备树方法</h2><p><img src="%E8%AE%BE%E5%A4%87%E6%A0%91%E6%96%B9%E6%B3%95.png" alt="设备树方法"></p><p>通常我们都是知道i2c设备挂载于哪个i2c控制器下，所以不用detect这么复杂的方法，在使用设备树方法时，i2c_driver中不要设置detect和address_list成员即可，如果没有这两项成员，便直接跳过detect方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注册i2c_adapter */</span></span><br><span class="line">i2c_add_adapter(adap);</span><br><span class="line">__i2c_add_numbered_adapter(adapter);</span><br><span class="line">i2c_register_adapter(adap);</span><br><span class="line"><span class="comment">/* Notify drivers */</span></span><br><span class="line">bus_for_each_drv(&amp;i2c_bus_type, <span class="literal">NULL</span>, adap, __process_new_adapter);</span><br><span class="line">__process_new_adapter</span><br><span class="line"><span class="title function_">i2c_do_add_adapter</span><span class="params">(to_i2c_driver(d), data)</span>;</span><br><span class="line">i2c_detect(adap, driver);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册i2c_driver */</span></span><br><span class="line">i2c_add_driver(driver)</span><br><span class="line">i2c_register_driver(THIS_MODULE, driver)</span><br><span class="line"><span class="comment">/* Walk the adapters that are already present */</span></span><br><span class="line">i2c_for_each_dev(driver, __process_new_driver);</span><br><span class="line">__process_new_driver</span><br><span class="line"><span class="title function_">i2c_do_add_adapter</span><span class="params">(data, to_i2c_adapter(dev))</span>;</span><br><span class="line">i2c_detect(adap, driver);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* detect方法 */</span></span><br><span class="line">i2c_detect(<span class="keyword">struct</span> i2c_adapter *adapter, <span class="keyword">struct</span> i2c_driver *driver)</span><br><span class="line"><span class="comment">/* 取出i2c_driver中的设备地址数组 */</span></span><br><span class="line">address_list = driver-&gt;address_list;</span><br><span class="line"><span class="comment">/* 判断是否使用detect方法，如果i2c_driver没有设置对应成员就是不使用 */</span></span><br><span class="line"><span class="keyword">if</span> (!driver-&gt;detect || !address_list)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>设备树方法其实就是早期版本的i2c_new_probed_device升级版。因为我们只需要在设备树的i2c控制器节点下，定义好我们的i2c设备节点，设备树框架会解析i2c设备节点，分配、设置、注册i2c_client，最后注册一个i2c_bus_type类型的device。</p><p><img src="iic%E8%AE%BE%E5%A4%87%E6%A0%91.png" alt="iic设备树"></p><p>首先，i2c0设备树节点对应一个i2c_adapter，gt911设备节点放在i2c0节点下，在解析设备树时，会用i2c0对应的i2c_adapter去访问gt911节点中的reg&#x3D;&lt;0x50&gt;地址。如果收到ACK回应，便会为gt911节点分配、设置、注册一个i2c_client，并使这个i2c_adapter与i2c_client绑定，最终会注册一个i2c_bus_type类型的device，如果与i2c_driver注册的i2c_bus_type类型的driver匹配，便调用i2c_driver的probe函数。</p><p><img src="iic%E8%AE%BE%E5%A4%87%E6%A0%912.png" alt="iic设备树2"></p><h3 id="driver代码-1"><a href="#driver代码-1" class="headerlink" title="driver代码"></a>driver代码</h3><p>这里就放一个at24c02的代码吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AT24CXX_CNT   1</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">at24cxx_cdev</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">at24cxx_cls</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">at24cxx_dev</span> &#123;</span></span><br><span class="line"><span class="type">int</span> major;</span><br><span class="line"><span class="type">int</span> irqnum;</span><br><span class="line"><span class="type">int</span> irqtype;</span><br><span class="line"><span class="type">void</span> *private_data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span>   *<span class="title">reset_pin</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span>   *<span class="title">irq_pin</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">at24cxx_dev</span> <span class="title">at24cxx</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_read</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *loff)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> offset;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> offset_msg[<span class="number">2</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset = buf[0] | buf[1]</span></span><br><span class="line"><span class="comment"> * data  -&gt; buf[0] ~ buf[size-1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = copy_from_user(offset_msg, buf, <span class="number">2</span>);</span><br><span class="line">offset = offset_msg[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> | offset_msg[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">1</span> || size &gt; <span class="number">0xffff</span> || (size + offset) &gt; <span class="number">0x40000</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">data = (<span class="type">unsigned</span> <span class="type">char</span> *)kmalloc(size, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        printk(<span class="string">&quot;kmalloc failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* at24cm02 reg addr is 2 Bytes, A15 - A8 | A7 - A0 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr  = at24cxx.client-&gt;addr;<span class="comment">/* at24cxx dev addr */</span></span><br><span class="line">msg[<span class="number">0</span>].buf   = offset_msg;<span class="comment">/* eeprom offset */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = !I2C_M_RD;<span class="comment">/* i2c write */</span></span><br><span class="line">msg[<span class="number">0</span>].len   = <span class="number">2</span>;<span class="comment">/* data len */</span></span><br><span class="line"></span><br><span class="line">msg[<span class="number">1</span>].addr  = at24cxx.client-&gt;addr;<span class="comment">/* at24cxx dev addr */</span></span><br><span class="line">msg[<span class="number">1</span>].flags = I2C_M_RD;<span class="comment">/* i2c read */</span></span><br><span class="line">msg[<span class="number">1</span>].len   = <span class="number">1</span>;<span class="comment">/* data len */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[1] read data */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">msg[<span class="number">1</span>].buf = &amp;data[i];<span class="comment">/* data buffer */</span></span><br><span class="line">ret = i2c_transfer(at24cxx.client-&gt;adapter, msg, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">2</span>) &#123;</span><br><span class="line">printk(<span class="string">&quot;at24cxx_read i2c_transfer error = %d\n&quot;</span>, ret);</span><br><span class="line">kfree(data);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* update offset */</span></span><br><span class="line">offset++;</span><br><span class="line">offset_msg[<span class="number">0</span>] = offset &gt;&gt; <span class="number">8</span>;</span><br><span class="line">offset_msg[<span class="number">1</span>] = offset;</span><br><span class="line">&#125;</span><br><span class="line">ret = copy_to_user(buf, data, size);</span><br><span class="line"><span class="comment">/* free memory */</span></span><br><span class="line">kfree(data);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">at24cxx_write</span><span class="params">(<span class="keyword">struct</span> file *file, <span class="type">const</span> <span class="type">char</span> __user *buf, <span class="type">size_t</span> size, <span class="type">loff_t</span> *loff)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret, i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> offset;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> offset_msg[<span class="number">3</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* offset = buf[0] | buf[1]</span></span><br><span class="line"><span class="comment"> * data  -&gt; buf[0] ~ buf[size-1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ret = copy_from_user(offset_msg, buf, <span class="number">2</span>);</span><br><span class="line">offset = offset_msg[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> | offset_msg[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">1</span> || size &gt; <span class="number">0xffff</span> || (size + offset) &gt; <span class="number">0x40000</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">data = (<span class="type">unsigned</span> <span class="type">char</span> *)kmalloc(size, GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        printk(<span class="string">&quot;kmalloc failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line">ret = copy_from_user(data, buf + <span class="number">2</span>, size);</span><br><span class="line"></span><br><span class="line">msg.addr   = at24cxx.client-&gt;addr;<span class="comment">/* at24cxx dev addr */</span></span><br><span class="line">msg.buf    = offset_msg;<span class="comment">/* eeprom offset &amp; write data */</span></span><br><span class="line">msg.flags  = !I2C_M_RD;<span class="comment">/* i2c write */</span></span><br><span class="line">msg.len    = <span class="number">2</span> + <span class="number">1</span>;<span class="comment">/* data len */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">offset_msg[<span class="number">2</span>] = data[i];<span class="comment">/* data buffer */</span></span><br><span class="line">ret = i2c_transfer(at24cxx.client-&gt;adapter, &amp;msg, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">1</span>) &#123;</span><br><span class="line">printk(<span class="string">&quot;at24cxx_write i2c_transfer error = %d\n&quot;</span>, ret);</span><br><span class="line">kfree(data);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* wait Twr, it&#x27;s write duration */</span></span><br><span class="line">mdelay(<span class="number">5</span>);</span><br><span class="line"><span class="comment">/* update offset */</span></span><br><span class="line">offset++;</span><br><span class="line">offset_msg[<span class="number">0</span>] = offset &gt;&gt; <span class="number">8</span>;</span><br><span class="line">offset_msg[<span class="number">1</span>] = offset;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* free memory */</span></span><br><span class="line">kfree(data);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">at24cxx_fops</span> =</span> &#123;</span><br><span class="line">.owner = THIS_MODULE,</span><br><span class="line">.open  = at24cxx_open,</span><br><span class="line">.read  = at24cxx_read,</span><br><span class="line">.write = at24cxx_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">dev_t</span> devid;</span><br><span class="line">at24cxx.client = client;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;at24cxx_probe\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (at24cxx.major) &#123;</span><br><span class="line">devid = MKDEV(at24cxx.major, <span class="number">0</span>);</span><br><span class="line">register_chrdev_region(devid, AT24CXX_CNT, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">alloc_chrdev_region(&amp;devid, <span class="number">0</span>, AT24CXX_CNT, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">at24cxx.major = MAJOR(devid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cdev_init(&amp;at24cxx_cdev, &amp;at24cxx_fops);</span><br><span class="line">cdev_add(&amp;at24cxx_cdev, devid, AT24CXX_CNT);</span><br><span class="line"></span><br><span class="line">at24cxx_cls = class_create(THIS_MODULE, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line">device_create(at24cxx_cls, <span class="literal">NULL</span>, MKDEV(at24cxx.major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">&quot;at24cxx&quot;</span>); <span class="comment">/* /dev/at24cxx */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">at24cxx_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">device_destroy(at24cxx_cls, MKDEV(at24cxx.major, <span class="number">0</span>));</span><br><span class="line">class_destroy(at24cxx_cls);</span><br><span class="line">unregister_chrdev(at24cxx.major, <span class="string">&quot;at24cxx&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">of_match_ids_at24cxx</span>[] =</span> &#123;</span><br><span class="line">&#123; .compatible = <span class="string">&quot;Anlogic,eeprom24cm02&quot;</span>,.data = <span class="literal">NULL</span> &#125;,</span><br><span class="line">&#123; <span class="comment">/* END OF LIST */</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">at24cxx_ids</span>[] =</span> &#123;</span><br><span class="line">&#123; <span class="string">&quot;Anlogic,eeprom24cm02&quot;</span>,(<span class="type">kernel_ulong_t</span>)<span class="literal">NULL</span> &#125;,</span><br><span class="line">&#123; <span class="comment">/* END OF LIST */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">at24cxx_driver</span> =</span> &#123;</span><br><span class="line">.driver = &#123;</span><br><span class="line">.name = <span class="string">&quot;at24cxx&quot;</span>,</span><br><span class="line">.of_match_table = of_match_ids_at24cxx,</span><br><span class="line">&#125;,</span><br><span class="line">.probe    = at24cxx_probe,</span><br><span class="line">.remove   = at24cxx_remove,</span><br><span class="line">.id_table = at24cxx_ids,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">at24cxx_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i2c_add_driver(&amp;at24cxx_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_init(at24cxx_init);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">at24cxx_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_del_driver(&amp;at24cxx_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_exit(at24cxx_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Anlogic: quenaiyuan&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Test代码-3"><a href="#Test代码-3" class="headerlink" title="Test代码"></a>Test代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c_test r addr</span></span><br><span class="line"><span class="comment"> * i2c_test w addr val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_usage</span><span class="params">(<span class="type">char</span> *file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s r addr\n&quot;</span>, file);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s w addr val\n&quot;</span>, file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> addr;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((argc != <span class="number">3</span>) &amp;&amp; (argc != <span class="number">4</span>)) &#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fd = open(<span class="string">&quot;/dev/at24cxx&quot;</span>, O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t open /dev/at24cxx\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">addr = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">buf[<span class="number">0</span>] = addr &gt;&gt; <span class="number">8</span>;</span><br><span class="line">buf[<span class="number">1</span>] = addr;</span><br><span class="line">read(fd, buf, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%04x: 0x%2x\n&quot;</span>, addr, buf[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">addr = strtoul(argv[<span class="number">2</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">buf[<span class="number">0</span>] = addr &gt;&gt; <span class="number">8</span>;</span><br><span class="line">buf[<span class="number">1</span>] = addr;</span><br><span class="line">buf[<span class="number">2</span>] = strtoul(argv[<span class="number">3</span>], <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">write(fd, buf, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">print_usage(argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Notes-1"><a href="#Notes-1" class="headerlink" title="Notes"></a>Notes</h3><p>设备树方法和detect方法不要一起使用。因为设备树会解析i2c设备节点，然后注册i2c_client。再使用detect方法，i2c_detect中又会注册i2c_client，可能会有冲突。</p><p>在使用设备树方法时，i2c_driver中不要设置detect和address_list成员；</p><p>在使用detect方法时，不要在设备树的i2c控制器节点下定义这个i2c设备节点；</p>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络设备驱动</title>
      <link href="/2024/04/26/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
      <url>/2024/04/26/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="想白嫖，没门！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5600a526be59f59338ff815d21cdb7b46a44329faea98d852891f5f997a29e8e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">主页支付宝转账5元，并留言文章标题获取密码！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块设备驱动</title>
      <link href="/2024/04/12/%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
      <url>/2024/04/12/%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、块设备驱动引入"><a href="#一、块设备驱动引入" class="headerlink" title="一、块设备驱动引入"></a>一、块设备驱动引入</h1><h2 id="1-1-磁盘读写"><a href="#1-1-磁盘读写" class="headerlink" title="1.1 磁盘读写"></a>1.1 磁盘读写</h2><p>磁盘的读写慢在“磁头”的机械结构的定位上面。从一个“磁头”的某“柱面”某“扇区”读到数据后（步骤 R0），跳到另一个“磁头”的某“柱面”的某“扇区”去写（步骤 W0），接着再跳回原“磁头”相同柱面的下一个“扇区”去读（步骤R1）。</p><p>若按“字符设备”中的“opne”,”read”,”write”方式，则总体效率在硬盘上会非常低。<br>字符设备读写：“R0”–&gt;”W0”–&gt;”R1” —&gt; “磁头”跳转 2 次。<br>调整顺序优化：“R0”–&gt;”R1”–&gt;”W0” —&gt; “磁头”跳转 1 次。</p><p>总结：先不执行读&#x2F;写操作，而是放入队列，优化后再执行。若按“字符设备驱动”那样的读写步骤会在硬盘上反复横跳，整体效率会非常低。所以有必要引入“优化过程”。即：读&#x2F;写操作先不执行，先放到某个“队列”中（调整顺序优化），最后再执行磁盘真正的读&#x2F;写操作</p><h2 id="1-2-Flash读写"><a href="#1-2-Flash读写" class="headerlink" title="1.2 Flash读写"></a>1.2 Flash读写</h2><p>Flash分为很多“块”，“块”里有很多的扇区。Flash 要先擦除再写， 擦除是整“块”进行的。若现在要写同一“块”的“扇区 0”和“扇区 1”。用“字符设备驱动”的方式来写：<br>① 先把Flash的这个“块”读到一个 buf 中。<br>② 然后修改 buf 中“扇区 0”对应位置的数据。<br>③ 擦除Flash的这个“块”。<br>④ 把修改过“扇区 0”数据的buf烧写到Flash的这个“块”。<br>⑤ 以相同的操作写“扇区1”<br>故：当要修改多个扇区时会多次擦除烧写动作。总体效率低下。</p><p>“块设备驱动”的方式来写：<br>① 先不执行。<br>② 优化 - 合并后执行。<br>    a. 读出Flash的这个“块”到 buf 中。<br>    b. 在buf中修改“扇区 0”和“扇区 1”对应位置的数据。<br>    c. 擦除Flash的这个“块”。<br>    d. 把修改过“扇区 0”和“扇区 1”数据的buf烧写到Flash的这个“块”。<br>故：“块驱动”不提供“字符设备驱动”那样直接读写IO的函数，其步骤可概括为：<br>① 先把读写请求放入队列，先不执行。<br>② 优化后再执行。</p><h1 id="二、块设备驱动框架"><a href="#二、块设备驱动框架" class="headerlink" title="二、块设备驱动框架"></a>二、块设备驱动框架</h1><h2 id="2-1-层次架构"><a href="#2-1-层次架构" class="headerlink" title="2.1 层次架构"></a>2.1 层次架构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用户app: open,read,write &quot;1.txt&quot;</span><br><span class="line">-----------------------------  文件的读写</span><br><span class="line">文件系统: vfat, ext4, yaffs2... (把文件的读写转换为扇区的读写)</span><br><span class="line">---------ll_rw_block---------  扇区的读写</span><br><span class="line">       1. 把&quot;读写&quot;放入队列</span><br><span class="line">       2. 调用队列的处理函数(优化/调顺序/合并)</span><br><span class="line">-----------------------------</span><br><span class="line">       块设备驱动程序     </span><br><span class="line">-----------------------------</span><br><span class="line">真实硬件:  硬盘, flash</span><br></pre></td></tr></table></figure><p>对普通文件 1.txt 的读写会转成对块设备的读写，即要读写哪个扇区。从文件的读写转成对扇区的读写，中间会涉及到“文件系统”。普通的文件转换成对扇区的读写，是由“文件系统”转换。比如：要写一个很小的数据到txt文件某个位置时，由于块设备写的数据是按扇区为单位，但又不能破坏txt文件里其它位置，那么就引入了一个“缓存区”，将所有数据先读到缓存区里，然后修改缓存数据，最后将整个数据放入txt文件对应的某个扇区中。</p><p>当txt文件多次写入很小的数据的话，就会重复不断地对扇区读出、写入，这样会浪费很多时间在读&#x2F;写硬盘上，所以内核提供了一个队列机制：在没有关闭txt文件之前，会将读&#x2F;写请求进行优化、排序、合并等操作，从而提高访问硬盘的效率。ll_rw_block 是通用的入口，会把“读&#x2F;写”放入队列，调用队列的处理函数去优化（调顺序、合并），最后执行真正的读&#x2F;写操作。</p><h2 id="2-2-ll-rw-block分析"><a href="#2-2-ll-rw-block分析" class="headerlink" title="2.2 ll_rw_block分析"></a>2.2 ll_rw_block分析</h2><p><img src="1.ll_rw_block%E8%B0%83%E7%94%A8%E5%B1%82%E6%AC%A1.png" alt="1.ll_rw_block调用层次"></p><p>① 分析ll_rw_block()函数(fs&#x2F;buffer.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rw: 读写标志位,  nr: bhs[]长度,  bhs[]: 要读写的数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ll_rw_block</span><span class="params">(<span class="type">int</span> rw, <span class="type">int</span> nr, <span class="keyword">struct</span> buffer_head *bhs[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nr; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">bh</span> =</span> bhs[i]; <span class="comment">//获取nr个buffer_head</span></span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">if</span> (rw == WRITE || rw == SWRITE) &#123;</span><br><span class="line">            ... ...</span><br><span class="line">            submit_bh(WRITE, bh); <span class="comment">//提交WRITE写标志的buffer_head</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中buffer_head结构体为缓冲区描述符，存放缓存区的各种信息，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> b_state;               <span class="comment">//缓冲区状态标志 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">buffer_head</span> *<span class="title">b_this_page</span>;</span>     <span class="comment">//页面中的缓冲区 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">b_page</span>;</span>                 <span class="comment">//存储缓冲区位于哪个页面</span></span><br><span class="line">    <span class="type">sector_t</span> b_blocknr; 　　　　　　　　　　<span class="comment">//逻辑块号</span></span><br><span class="line">    <span class="type">size_t</span> b_size; 　　　　　　　　　　　　　<span class="comment">//块的大小</span></span><br><span class="line">    <span class="type">char</span> *b_data; 　　　　　　　　　　　　　 <span class="comment">//页面中的缓冲区</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> *<span class="title">b_bdev</span>;</span> 　　　　 <span class="comment">//块设备,来表示一个独立的磁盘设备</span></span><br><span class="line">    <span class="type">bh_end_io_t</span> *b_end_io; 　　　　　　　　<span class="comment">//I/O完成方法</span></span><br><span class="line">    <span class="type">void</span> *b_private; 　　　　　　　　　　　 <span class="comment">//完成方法数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">b_assoc_buffers</span>;</span> 　 <span class="comment">//相关映射链表</span></span><br><span class="line">    <span class="comment">/* mapping this buffer is associated with */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">b_assoc_map</span>;</span>   </span><br><span class="line">    <span class="type">atomic_t</span> b_count; 　　　　　　　　　　　<span class="comment">//缓冲区使用计数 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>②  进入submit_bh()中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">submit_bh</span><span class="params">(<span class="type">int</span> rw, <span class="keyword">struct</span> buffer_head * bh)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 分配一个bio(block input output)，块设备i/o */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bio</span> *<span class="title">bio</span> =</span> bio_alloc(GFP_NOIO, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/* 根据buffer_head(bh)构造bio */</span></span><br><span class="line">    bio-&gt;bi_sector = bh-&gt;b_blocknr * (bh-&gt;b_size &gt;&gt; <span class="number">9</span>);</span><br><span class="line">    bio-&gt;bi_bdev = bh-&gt;b_bdev; <span class="comment">//存放对应的块设备</span></span><br><span class="line">    bio-&gt;bi_io_vec[<span class="number">0</span>].bv_page = bh-&gt;b_page;</span><br><span class="line">    bio-&gt;bi_io_vec[<span class="number">0</span>].bv_len = bh-&gt;b_size;</span><br><span class="line">    bio-&gt;bi_io_vec[<span class="number">0</span>].bv_offset = bh_offset(bh);</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">/* 提交bio */</span></span><br><span class="line">    submit_bio(rw, bio); </span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>submit_bh()函数通过buffer_head构造bio，然后调用submit_bio()提交。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">submit_bio</span><span class="params">(<span class="type">int</span> rw, <span class="keyword">struct</span> bio *bio)</span></span><br><span class="line">&#123;</span><br><span class="line">    ... ...</span><br><span class="line">    generic_make_request(bio); </span><br><span class="line">        <span class="comment">/* 最终会调用__generic_make_request()提交bio */</span></span><br><span class="line">        __generic_make_request(bio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ __generic_make_request()函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __generic_make_request(<span class="keyword">struct</span> bio *bio)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">request_queue_t</span> *q;    </span><br><span class="line">    <span class="type">int</span> ret;  </span><br><span class="line">    ... ...</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        q = bdev_get_queue(bio-&gt;bi_bdev); <span class="comment">//通过bio-&gt;bi_bdev获取申请队列q</span></span><br><span class="line">        ... ...</span><br><span class="line">        ret = q-&gt;make_request_fn(q, bio); <span class="comment">//提交申请队列q和bio</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个q-&gt;make_request_fn()又是什么函数？到底做了什么，搜索make_request_fn，它在blk_queue_make_request()函数中被初始化为mfn这个参数：</p><p><img src="2.blk_queue_make_request.png" alt="2.blk_queue_make_request"></p><p>继续搜索blk_queue_make_request，找到它被谁调用，赋入的mfn参数是什么，如下图，找到它在blk_init_queue_node()函数中被调用： </p><p><img src="3.mfn%E5%8F%82%E6%95%B0.png" alt="3.mfn参数"></p><p>最终q-&gt;make_request_fn()执行的是__make_request()函数</p><p>④  __make_request()函数，对提交的申请队列q和bio做了什么？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __make_request(<span class="type">request_queue_t</span> *q, <span class="keyword">struct</span> bio *bio)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">request</span> *<span class="title">req</span>;</span> <span class="comment">//块设备本身的队列</span></span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">/* (1)将之前的申请队列q和传入的bio,通过排序,合并在本身的req队列中 */</span></span><br><span class="line">    el_ret = elv_merge(q, &amp;req, bio);</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">/* (2) 执行申请队列的处理函数 */</span></span><br><span class="line">    __generic_unplug_device(q);     </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>a. 上面的elv_merge()函数，就是内核中的电梯算法(elevator merge)。比如申请队列中有以下6个申请：4(in),2(out),5(in),3(out),6(in),1(out)。其中in：写出；out：读入。最后执行下来就会排序合并：先写出4,5,6,队列，再读入1,2,3队列。</p><p>b.  __generic_unplug_device()函数如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __generic_unplug_device(<span class="type">request_queue_t</span> *q)</span><br><span class="line">&#123;      </span><br><span class="line">    <span class="keyword">if</span> (unlikely(blk_queue_stopped(q)))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!blk_remove_plug(q))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/* 调用队列的“处理函数” */</span></span><br><span class="line">    q-&gt;request_fn(q);         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行申请队列的处理函数：q的成员request_fn()函数，它是操作硬件的函数，如果是RAM模拟磁盘会执行memcopy；如果是真实块设备会执行擦除烧写动作。</p><h2 id="2-3-块设备驱动编写步骤"><a href="#2-3-块设备驱动编写步骤" class="headerlink" title="2.3 块设备驱动编写步骤"></a>2.3 块设备驱动编写步骤</h2><ol><li>以面向对象的思想分配gendisk结构体。用alloc_disk函数。</li><li>设置 gendisk 结构体。<br> ① 分配&#x2F;设置一个队列：request_queue_t(提供读写能力)，即设置request_fn()处理函数。用blk_init_queue函数。<br> ② 设置gendisk其他信息(提供磁盘属性：磁盘容量，扇区大小等)，这样块设备才能分区。</li><li>注册gendisk结构体。用add_disk函数。</li></ol><p><img src="4.%E6%B3%A8%E5%86%8Cgendisk.png" alt="4.注册gendisk"></p><p><img src="4.request_fn.png" alt="4.request_fn"></p><h1 id="三、RAM模拟块设备程序"><a href="#三、RAM模拟块设备程序" class="headerlink" title="三、RAM模拟块设备程序"></a>三、RAM模拟块设备程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 参考:</span></span><br><span class="line"><span class="comment"> * drivers\block\xd.c</span></span><br><span class="line"><span class="comment"> * drivers\block\z2ram.c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/interrupt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/timer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/genhd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/hdreg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/blkdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/blkpg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/system.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/dma.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gendisk</span> *<span class="title">ramblock_disk</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">request_queue_t</span> *ramblock_queue;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> major;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="title function_">DEFINE_SPINLOCK</span><span class="params">(ramblock_lock)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RAMBLOCK_SIZE (1024*1024)</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> *ramblock_buf;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ramblock_getgeo</span><span class="params">(<span class="keyword">struct</span> block_device *bdev, <span class="keyword">struct</span> hd_geometry *geo)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 容量 = heads * cylinders * sectors * 512 */</span></span><br><span class="line">geo-&gt;heads     = <span class="number">2</span>;</span><br><span class="line">geo-&gt;cylinders = <span class="number">32</span>;</span><br><span class="line">geo-&gt;sectors   = RAMBLOCK_SIZE/<span class="number">2</span>/<span class="number">32</span>/<span class="number">512</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">block_device_operations</span> <span class="title">ramblock_fops</span> =</span> &#123;</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">.getgeo= ramblock_getgeo,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">do_ramblock_request</span><span class="params">(<span class="type">request_queue_t</span> * q)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> r_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> w_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span> *<span class="title">req</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 数据传输三要素: 源,目的,长度 */</span></span><br><span class="line"><span class="keyword">while</span> ((req = elv_next_request(q)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 源/目的: */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> offset = req-&gt;sector * <span class="number">512</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 目的/源: */</span></span><br><span class="line"><span class="comment">// req-&gt;buffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 长度: */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> len = req-&gt;current_nr_sectors * <span class="number">512</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rq_data_dir(req) == READ)</span><br><span class="line"><span class="built_in">memcpy</span>(req-&gt;buffer, ramblock_buf+offset, len);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">memcpy</span>(ramblock_buf+offset, req-&gt;buffer, len);</span><br><span class="line"></span><br><span class="line">end_request(req, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ramblock_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 1. 分配一个gendisk结构体 */</span></span><br><span class="line">ramblock_disk = alloc_disk(<span class="number">16</span>); <span class="comment">/* 次设备号个数: 分区个数+1 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.0 设置 */</span></span><br><span class="line"><span class="comment">/* 2.1 分配/设置队列: 提供读写能力 */</span></span><br><span class="line">ramblock_queue = blk_init_queue(do_ramblock_request, &amp;ramblock_lock);</span><br><span class="line">ramblock_disk-&gt;<span class="built_in">queue</span> = ramblock_queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.2 设置其他属性: 比如容量 */</span></span><br><span class="line">major = register_blkdev(<span class="number">0</span>, <span class="string">&quot;ramblock&quot;</span>);  <span class="comment">/* cat /proc/devices */</span></span><br><span class="line">ramblock_disk-&gt;major       = major;</span><br><span class="line">ramblock_disk-&gt;first_minor = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(ramblock_disk-&gt;disk_name, <span class="string">&quot;ramblock&quot;</span>);</span><br><span class="line">ramblock_disk-&gt;fops        = &amp;ramblock_fops;</span><br><span class="line">set_capacity(ramblock_disk, RAMBLOCK_SIZE / <span class="number">512</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 硬件相关操作 */</span></span><br><span class="line">ramblock_buf = kzalloc(RAMBLOCK_SIZE, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 注册 */</span></span><br><span class="line">add_disk(ramblock_disk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ramblock_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">unregister_blkdev(major, <span class="string">&quot;ramblock&quot;</span>);</span><br><span class="line">del_gendisk(ramblock_disk);</span><br><span class="line">put_disk(ramblock_disk);</span><br><span class="line">blk_cleanup_queue(ramblock_queue);</span><br><span class="line">kfree(ramblock_buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(ramblock_init);</span><br><span class="line">module_exit(ramblock_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="四、Nand-Flash驱动分析"><a href="#四、Nand-Flash驱动分析" class="headerlink" title="四、Nand Flash驱动分析"></a>四、Nand Flash驱动分析</h1><h2 id="4-1-Nand-Flash引入"><a href="#4-1-Nand-Flash引入" class="headerlink" title="4.1 Nand Flash引入"></a>4.1 Nand Flash引入</h2><p><strong>1. 问题与回答：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">问1：原理图上NAND FLASH和S3C2440之间只有数据线，怎么传输地址？</span><br><span class="line">答1：在DATA0～DATA7上既传输数据，又传输地址。当ALE为高电平时传输的是地址。</span><br><span class="line"></span><br><span class="line">问2：从NAND FLASH芯片手册可知，要操作NAND FLASH需要先发出命令。怎么传入命令？</span><br><span class="line">答2：在DATA0～DATA7上既传输数据，又传输地址，也传输命令。</span><br><span class="line">当ALE为高电平时传输的是地址，当CLE为高电平时传输的是命令。</span><br><span class="line">当ALE和CLE都为低电平时传输的是数据。</span><br><span class="line"></span><br><span class="line">问3：数据线既接到NAND FLASH，也接到NOR FLASH，还接到SDRAM、DM9000等。怎么避免干扰？</span><br><span class="line">答3：这些设备要访问之必须&quot;选中&quot;。没有选中的芯片不会工作，相当于没接一样。</span><br><span class="line"></span><br><span class="line">问4：假设烧写NAND FLASH，把命令、地址、数据发给它之后，怎么判断传输完成？</span><br><span class="line">答4：通过状态引脚RnB来判断：它为高电平表示就绪，它为低电平表示正忙。</span><br><span class="line"></span><br><span class="line">问5：怎么操作NAND FLASH呢？</span><br><span class="line">答5：根据NAND FLASH的芯片手册，一般的过程是：发出命令，发出地址，发出数据/读数据。</span><br></pre></td></tr></table></figure><p><strong>2. NAND FLASH操作：</strong></p><p><img src="5.nand_flash%E6%93%8D%E4%BD%9C.png" alt="5.nand_flash操作"></p><p><strong>3. 用UBOOT来体验NAND FLASH的读ID：</strong></p><p><img src="5.uboot%E8%AF%BBID.png" alt="5.uboot读ID"></p><p><strong>4. 用UBOOT来体验NAND FLASH的读内容(读0地址的数据)：</strong></p><p>先用UBOOT命令读出NAND FLASH 0地址的内容: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nand dump 0</span><br><span class="line">Page 00000000 dump:</span><br><span class="line">17 00 00 ea 14 f0 9f e5  14 f0 9f e5 14 f0 9f e5</span><br></pre></td></tr></table></figure><p>再用UBOOT操作NAND FLASH控制器读出0地址内容：</p><p><img src="5.uboot%E8%AF%BB%E5%86%85%E5%AE%B9.png" alt="5.uboot读内容"></p><p><strong>5. nand flash驱动框图：</strong></p><p><img src="5.nand%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6.png" alt="5.nand驱动框架"></p><p><strong>6. 驱动注册流程：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">s3c2410_nand_inithw</span><br><span class="line">s3c2410_nand_init_chip</span><br><span class="line">nand_scan  <span class="comment">// drivers/mtd/nand/nand_base.c 根据nand_chip的底层操作函数识别NAND FLASH，构造mtd_info</span></span><br><span class="line">nand_scan_ident</span><br><span class="line">nand_set_defaults</span><br><span class="line"><span class="title function_">if</span> <span class="params">(!chip-&gt;select_chip)</span></span><br><span class="line">chip-&gt;select_chip = nand_select_chip;</span><br><span class="line"><span class="keyword">if</span> (chip-&gt;cmdfunc == <span class="literal">NULL</span>)</span><br><span class="line">chip-&gt;cmdfunc = nand_command;</span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;read_byte)</span><br><span class="line">chip-&gt;read_byte = nand_read_byte;</span><br><span class="line">nand_get_flash_type</span><br><span class="line">chip-&gt;select_chip(mtd, <span class="number">0</span>);</span><br><span class="line">chip-&gt;cmdfunc(mtd, NAND_CMD_READID, <span class="number">0x00</span>, <span class="number">-1</span>);</span><br><span class="line">*maf_id = chip-&gt;read_byte(mtd);</span><br><span class="line">dev_id = chip-&gt;read_byte(mtd);</span><br><span class="line">nand_scan_tail</span><br><span class="line">mtd-&gt;erase = nand_erase;</span><br><span class="line">mtd-&gt;read = nand_read;</span><br><span class="line">mtd-&gt;write = nand_write;</span><br><span class="line">s3c2410_nand_add_partition</span><br><span class="line">add_mtd_partitions</span><br><span class="line">add_mtd_device</span><br><span class="line"><span class="title function_">list_for_each</span><span class="params">(this, &amp;mtd_notifiers)</span> &#123; </span><br><span class="line"><span class="comment">// 问. mtd_notifiers在哪设置？</span></span><br><span class="line"><span class="comment">// 答. drivers/mtd/mtdchar.c,mtd_blkdev.c调用register_mtd_user</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_notifier</span> *<span class="title">not</span> =</span> list_entry(this, <span class="keyword">struct</span> mtd_notifier, <span class="built_in">list</span>);</span><br><span class="line">not-&gt;add(mtd);</span><br><span class="line"><span class="comment">// mtd_notify_add 和 blktrans_notify_add</span></span><br><span class="line">先看字符设备的mtd_notify_add</span><br><span class="line">class_device_create</span><br><span class="line">class_device_create</span><br><span class="line">再看块设备的blktrans_notify_add</span><br><span class="line"><span class="title function_">list_for_each</span><span class="params">(this, &amp;blktrans_majors)</span> &#123; </span><br><span class="line"><span class="comment">// 问. blktrans_majors在哪设置？</span></span><br><span class="line"><span class="comment">// 答. drivers\mtd\mdblock.c 或 mtdblock_ro.c   register_mtd_blktrans</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_blktrans_ops</span> *<span class="title">tr</span> =</span> list_entry(this, <span class="keyword">struct</span> mtd_blktrans_ops, <span class="built_in">list</span>);              </span><br><span class="line">tr-&gt;add_mtd(tr, mtd);</span><br><span class="line">mtdblock_add_mtd (drivers\mtd\mdblock.c)</span><br><span class="line">add_mtd_blktrans_dev</span><br><span class="line">alloc_disk</span><br><span class="line"><span class="comment">// tr-&gt;blkcore_priv-&gt;rq = blk_init_queue(mtd_blktrans_request, &amp;tr-&gt;blkcore_priv-&gt;queue_lock);</span></span><br><span class="line">gd-&gt;<span class="built_in">queue</span> = tr-&gt;blkcore_priv-&gt;rq; </span><br><span class="line">add_disk           </span><br></pre></td></tr></table></figure><h2 id="4-2-驱动入口"><a href="#4-2-驱动入口" class="headerlink" title="4.2 驱动入口"></a>4.2 驱动入口</h2><p>参考s3c2440的nand flash驱动，drivers&#x2F;mtd&#x2F;nand&#x2F;s3c2410.c。</p><p><strong>为什么nand在mtd目录下？</strong></p><p>因为mtd(memory technology device 存储 技术设备 ) 是用于访问 memory 设备（ ROM 、 flash ）的Linux 的子系统。 MTD 的主要目的是为了使新的 memory 设备的驱动更加简单，为此它在硬件和上层之间提供了一个抽象的接口。</p><p>进入probe函数中，主要调用nand_scan()函数，add_mtd_partitions()函数，来完成注册nand  flash：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">s3c24xx_nand_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev, <span class="keyword">enum</span> s3c_cpu_type cpu_type)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 初始化nand flash控制器，设置TACLS 、TWRPH0、TWRPH1时序等 */</span></span><br><span class="line">    s3c2410_nand_inithw(info, pdev);       </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 设置nand chip结构体，分配接口函数 */</span></span><br><span class="line">    s3c2410_nand_init_chip(info, nmtd, sets);    </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 构造mtd info结构体，并读取nand flash型号信息 */</span></span><br><span class="line">    nand_scan(&amp;nmtd-&gt;mtd, (sets) ? sets-&gt;nr_chips : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加多个mtd分区，里面会调用add_mtd_partitions */</span></span><br><span class="line">    s3c2410_nand_add_partition(info, nmtd, sets);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-配置Nand-Flash控制器"><a href="#4-3-配置Nand-Flash控制器" class="headerlink" title="4.3  配置Nand Flash控制器"></a>4.3  配置Nand Flash控制器</h2><p>s3c2410_nand_inithw：初始化nand flash控制器，设置TACLS 、TWRPH0、TWRPH1时序等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">s3c2410_nand_inithw</span><span class="params">(<span class="keyword">struct</span> s3c2410_nand_info *info,</span></span><br><span class="line"><span class="params">       <span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s3c2410_platform_nand</span> *<span class="title">plat</span> =</span> to_nand_plat(pdev);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> clkrate = clk_get_rate(info-&gt;clk);</span><br><span class="line"><span class="type">int</span> tacls_max = (info-&gt;cpu_type == TYPE_S3C2412) ? <span class="number">8</span> : <span class="number">4</span>;</span><br><span class="line"><span class="type">int</span> tacls, twrph0, twrph1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> cfg = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">clkrate /= <span class="number">1000</span>;<span class="comment">/* turn clock into kHz for ease of use */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (plat != <span class="literal">NULL</span>) &#123;</span><br><span class="line">tacls = s3c_nand_calc_rate(plat-&gt;tacls, clkrate, tacls_max);</span><br><span class="line">twrph0 = s3c_nand_calc_rate(plat-&gt;twrph0, clkrate, <span class="number">8</span>);</span><br><span class="line">twrph1 = s3c_nand_calc_rate(plat-&gt;twrph1, clkrate, <span class="number">8</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* default timings */</span></span><br><span class="line">tacls = tacls_max;</span><br><span class="line">twrph0 = <span class="number">8</span>;</span><br><span class="line">twrph1 = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置TACLS 、TWRPH0、TWRPH1时序</span></span><br><span class="line">cfg = S3C2440_NFCONF_TACLS(tacls - <span class="number">1</span>);</span><br><span class="line">cfg |= S3C2440_NFCONF_TWRPH0(twrph0 - <span class="number">1</span>);</span><br><span class="line">cfg |= S3C2440_NFCONF_TWRPH1(twrph1 - <span class="number">1</span>);</span><br><span class="line">writel(cfg, info-&gt;regs + S3C2410_NFCONF);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使能 nand flash控制器</span></span><br><span class="line">writel(S3C2440_NFCONT_ENABLE, info-&gt;regs + S3C2440_NFCONT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-设置nand-chip结构体"><a href="#4-4-设置nand-chip结构体" class="headerlink" title="4.4  设置nand chip结构体"></a>4.4  设置nand chip结构体</h2><p>s3c2410_nand_init_chip：设置nand_chip结构体，为其分配底层接口函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">s3c2410_nand_init_chip</span><span class="params">(<span class="keyword">struct</span> s3c2410_nand_info *info,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> s3c2410_nand_mtd *nmtd,</span></span><br><span class="line"><span class="params">   <span class="keyword">struct</span> s3c2410_nand_set *<span class="built_in">set</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nand_chip</span> *<span class="title">chip</span> =</span> &amp;nmtd-&gt;chip;</span><br><span class="line"><span class="type">void</span> __iomem *regs = info-&gt;regs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供nand flash读写数据接口</span></span><br><span class="line">chip-&gt;write_buf    = s3c2410_nand_write_buf;</span><br><span class="line">chip-&gt;read_buf     = s3c2410_nand_read_buf;</span><br><span class="line"><span class="comment">// 提供nand flash 片选接口</span></span><br><span class="line">chip-&gt;select_chip  = s3c2410_nand_select_chip;</span><br><span class="line">chip-&gt;chip_delay   = <span class="number">50</span>;</span><br><span class="line">chip-&gt;priv   = nmtd;</span><br><span class="line">chip-&gt;options   = <span class="number">0</span>;</span><br><span class="line">chip-&gt;controller   = &amp;info-&gt;controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (info-&gt;cpu_type) &#123;</span><br><span class="line"><span class="keyword">case</span> TYPE_S3C2440:</span><br><span class="line"><span class="comment">// 提供 nand flash控制器数据写入的寄存器地址</span></span><br><span class="line">chip-&gt;IO_ADDR_W = regs + S3C2440_NFDATA;</span><br><span class="line">info-&gt;sel_reg   = regs + S3C2440_NFCONF;</span><br><span class="line">info-&gt;sel_bit= S3C2440_NFCONF_nFCE;</span><br><span class="line"><span class="comment">// 提供nand flash 写命令或者地址接口</span></span><br><span class="line">chip-&gt;cmd_ctrl  = s3c2440_nand_hwcontrol;</span><br><span class="line"><span class="comment">// 提供nand flash 判断就绪或忙状态接口</span></span><br><span class="line">chip-&gt;dev_ready = s3c2440_nand_devready;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供 nand flash控制器数据读取的寄存器地址</span></span><br><span class="line">chip-&gt;IO_ADDR_R = chip-&gt;IO_ADDR_W;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-nand-scan-流程分析"><a href="#4-5-nand-scan-流程分析" class="headerlink" title="4.5 nand_scan()流程分析"></a>4.5 nand_scan()流程分析</h2><p><strong>nand_scan：</strong>最终目的是使用nand_chip结构体，构造出mtd_info结构体提供给MTD层，并读取nand flash型号信息。</p><p><img src="5.nand_scan.png" alt="5.nand_scan"></p><p><strong>nand_set_defaults()函数：</strong>为nand_chip中暂未设置的接口，分配系统默认的nand flash接口函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">nand_set_defaults</span><span class="params">(<span class="keyword">struct</span> nand_chip *chip, <span class="type">int</span> busw)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* check for proper chip_delay setup, set 20us if not */</span></span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;chip_delay)</span><br><span class="line">chip-&gt;chip_delay = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check, if a user supplied command function given */</span></span><br><span class="line"><span class="keyword">if</span> (chip-&gt;cmdfunc == <span class="literal">NULL</span>)</span><br><span class="line">chip-&gt;cmdfunc = nand_command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check, if a user supplied wait function given */</span></span><br><span class="line"><span class="keyword">if</span> (chip-&gt;waitfunc == <span class="literal">NULL</span>)</span><br><span class="line">chip-&gt;waitfunc = nand_wait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;select_chip)</span><br><span class="line">chip-&gt;select_chip = nand_select_chip;</span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;read_byte)</span><br><span class="line">chip-&gt;read_byte = busw ? nand_read_byte16 : nand_read_byte;</span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;read_word)</span><br><span class="line">chip-&gt;read_word = nand_read_word;</span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;write_buf)</span><br><span class="line">chip-&gt;write_buf = busw ? nand_write_buf16 : nand_write_buf;</span><br><span class="line"><span class="keyword">if</span> (!chip-&gt;read_buf)</span><br><span class="line">chip-&gt;read_buf = busw ? nand_read_buf16 : nand_read_buf;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>nand_get_flash_type()函数：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> nand_flash_dev *<span class="title function_">nand_get_flash_type</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd,<span class="keyword">struct</span> nand_chip *chip,<span class="type">int</span> busw, <span class="type">int</span> *maf_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 调用nand_chip结构体的成员select_chip使能flash片选 */</span></span><br><span class="line">    chip-&gt;select_chip(mtd, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* 调用nand_chip结构体的成员cmdfunc发送读id命令 */</span></span><br><span class="line">    chip-&gt;cmdfunc(mtd, NAND_CMD_READID, <span class="number">0x00</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">/* 获取nand flash返回的设备ID数据 */</span></span><br><span class="line">    dev_id = chip-&gt;read_byte(mtd);</span><br><span class="line">    <span class="comment">/* 循环匹配nand_flash_ids[]数组,找到对应的nandflash信息 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; nand_flash_ids[i].name != <span class="literal">NULL</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dev_id == nand_flash_ids[i].id) &#123;</span><br><span class="line">            type =  &amp;nand_flash_ids[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 匹配成功，便打印nandflash参数 */</span></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;NAND device: Manufacturer ID:&quot;</span></span><br><span class="line">                     <span class="string">&quot; 0x%02x, Chip ID: 0x%02x (%s %s)\n&quot;</span>, *maf_id,</span><br><span class="line">                     dev_id, nand_manuf_ids[maf_idx].name, mtd-&gt;name);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nand_flash_ids[]数组：</p><p><img src="5.nand_flash_type.png" alt="5.nand_flash_type"></p><p>启动内核就可以看到打印出nand flash参数：</p><p><img src="5.nand_flash_log.png" alt="5.nand_flash_log"></p><p><strong>nand_scan_tail()函数：</strong>构造mtd_info结构体，为硬件和上层之间提供了一个抽象的接口。mtd_info中包含nand_chip成员，故mtd层的接口最终都会调用到nand_chip所设置的底层硬件接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">nand_scan_tail</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nand_chip</span> *<span class="title">chip</span> =</span> mtd-&gt;priv;</span><br><span class="line">mtd-&gt;type = MTD_NANDFLASH;</span><br><span class="line">mtd-&gt;erase = nand_erase; -&gt; nand_erase_nand   -&gt; nand_chip-&gt;erase_cmd</span><br><span class="line">mtd-&gt;read = nand_read;   -&gt; nand_do_read_ops  -&gt; nand_chip-&gt;ecc.read_page</span><br><span class="line">mtd-&gt;write = nand_write; -&gt; nand_do_write_ops -&gt; nand_chip-&gt;write_page</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-添加MTD分区"><a href="#4-6-添加MTD分区" class="headerlink" title="4.6 添加MTD分区"></a>4.6 添加MTD分区</h2><p>系统启动后可以从log看到其MTD分区信息：</p><p><img src="6.MTD%E5%88%86%E5%8C%BAlog.png" alt="6.MTD分区log"></p><p>probe()里的s3c2410_nand_add_partition()函数注册nand flash的mtd设备，并添加分区</p><p>最终它调用了s3c2410_nand_add_partition()-&gt;add_mtd_partitions() -&gt; add_mtd_device()</p><p>其中add_mtd_partitions()函数主要实现多个分区创建，也就是多次调用add_mtd_device()</p><p>当只设置nand flash为一个分区时，即主分区，直接调用add_mtd_device()即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s3c2410_nand_add_partition -&gt;</span><br><span class="line"><span class="comment">// 在s3c2410_nand_init_chip函数中已经将分区信息设置给了mtd </span></span><br><span class="line">add_mtd_device(&amp;mtd-&gt;mtd) -&gt;</span><br><span class="line"><span class="comment">// 遍历mtd_notifiers，通过其add接口添加分区</span></span><br><span class="line">list_for_each(this, &amp;mtd_notifiers) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_notifier</span> *<span class="title">not</span> =</span> list_entry(this, <span class="keyword">struct</span> mtd_notifier, <span class="built_in">list</span>);</span><br><span class="line">not-&gt;add(mtd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mtd_notifiers链表在哪设置？mtdchar.c (字符设备)、mtd_blkdevs.c(块设备)</p><p><strong>①nand flash 字符设备</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/mtdchar.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mtd_notify_add</span><span class="params">(<span class="keyword">struct</span> mtd_info* mtd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建字符设备 设备节点为/dev/mtd%d</span></span><br><span class="line">class_device_create(mtd_class, <span class="literal">NULL</span>, MKDEV(MTD_CHAR_MAJOR, mtd-&gt;index*<span class="number">2</span>),</span><br><span class="line">    <span class="literal">NULL</span>, <span class="string">&quot;mtd%d&quot;</span>, mtd-&gt;index);</span><br><span class="line"><span class="comment">// 创建字符设备 设备节点为/dev/mtd%dro (只读)</span></span><br><span class="line">class_device_create(mtd_class, <span class="literal">NULL</span>,</span><br><span class="line">    MKDEV(MTD_CHAR_MAJOR, mtd-&gt;index*<span class="number">2</span>+<span class="number">1</span>),</span><br><span class="line">    <span class="literal">NULL</span>, <span class="string">&quot;mtd%dro&quot;</span>, mtd-&gt;index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_notifier</span> <span class="title">notifier</span> =</span> &#123;</span><br><span class="line">.add= mtd_notify_add,</span><br><span class="line">.remove= mtd_notify_remove,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init_mtdchar -&gt;</span><br><span class="line">register_mtd_user(&amp;notifier) -&gt;</span><br><span class="line">list_add(&amp;new-&gt;<span class="built_in">list</span>, &amp;mtd_notifiers);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>②nand flash 块设备</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/mtd_blkdevs.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">blktrans_notify_add</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">this</span>;</span></span><br><span class="line"><span class="comment">// 遍历blktrans_majors链表 通过其add_mtd函数添加分区</span></span><br><span class="line">list_for_each(this, &amp;blktrans_majors) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_blktrans_ops</span> *<span class="title">tr</span> =</span> list_entry(this, <span class="keyword">struct</span> mtd_blktrans_ops, <span class="built_in">list</span>);</span><br><span class="line">tr-&gt;add_mtd(tr, mtd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_notifier</span> <span class="title">blktrans_notifier</span> =</span> &#123;</span><br><span class="line">.add = blktrans_notify_add,</span><br><span class="line">.remove = blktrans_notify_remove,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">register_mtd_blktrans-&gt;</span><br><span class="line">register_mtd_user(&amp;blktrans_notifier) -&gt;</span><br><span class="line">list_add(&amp;new-&gt;<span class="built_in">list</span>, &amp;mtd_notifiers)</span><br></pre></td></tr></table></figure><p>blktrans_majors链表又在哪设置？ mtdblock_ro.c、mtdblock.c(以他为例)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/mtdblock.c</span></span><br><span class="line">mtdblock_add_mtd -&gt; </span><br><span class="line">add_mtd_blktrans_dev(dev)-&gt;</span><br><span class="line"><span class="comment">//分配gendisk结构体</span></span><br><span class="line">alloc_disk(<span class="number">1</span> &lt;&lt; tr-&gt;part_bits);</span><br><span class="line"><span class="comment">//设置gendisk结构体</span></span><br><span class="line">set_capacity(gd, (new-&gt;size * tr-&gt;blksize) &gt;&gt; <span class="number">9</span>);</span><br><span class="line">gd-&gt;major = tr-&gt;major;</span><br><span class="line">gd-&gt;first_minor = (new-&gt;devnum) &lt;&lt; tr-&gt;part_bits;</span><br><span class="line">gd-&gt;fops = &amp;mtd_blktrans_ops;</span><br><span class="line"><span class="comment">//设置gendisk请求队列</span></span><br><span class="line">gd-&gt;<span class="built_in">queue</span> = tr-&gt;blkcore_priv-&gt;rq;</span><br><span class="line"><span class="comment">//注册gendisk结构体</span></span><br><span class="line">add_disk(gd);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_blktrans_ops</span> <span class="title">mtdblock_tr</span> =</span> &#123;</span><br><span class="line">.name= <span class="string">&quot;mtdblock&quot;</span>,</span><br><span class="line">.major= <span class="number">31</span>,</span><br><span class="line">.part_bits= <span class="number">0</span>,</span><br><span class="line">.blksize = <span class="number">512</span>,</span><br><span class="line">.open= mtdblock_open,</span><br><span class="line">.flush= mtdblock_flush,</span><br><span class="line">.release= mtdblock_release,</span><br><span class="line">.readsect= mtdblock_readsect,</span><br><span class="line">.writesect= mtdblock_writesect,</span><br><span class="line">.add_mtd= mtdblock_add_mtd,</span><br><span class="line">.remove_dev= mtdblock_remove_dev,</span><br><span class="line">.owner= THIS_MODULE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init_mtdblock -&gt; </span><br><span class="line">register_mtd_blktrans(&amp;mtdblock_tr); -&gt;</span><br><span class="line">list_add(&amp;tr-&gt;<span class="built_in">list</span>, &amp;blktrans_majors);</span><br></pre></td></tr></table></figure><p><strong>③MTD设备</strong></p><p>所以mtd层既提供了字符设备的操作接口(mtdchar.c)， 也实现了块设备的操作接口(mtd_blkdevs.c)，块设备接口最终会分配设置注册一个gendisk。在控制台输入ls -l &#x2F;dev&#x2F;mtd*，能找到块MTD设备节点和字符MTD设备节点，可以看到一共创建了4个分区的设备，每个分区都包含了两个字符设备(mtd%d，mtd%dro)、一个块设备(mtdblock0)。MTD块设备的主设备号为31，MTD字符设备的主设备号为90。</p><p><img src="7.mtd%E8%AE%BE%E5%A4%87.png" alt="7.mtd设备"></p><p><strong>④MTD块设备请求队列</strong></p><p>块设备的操作接口(mtd_blkdevs.c)会调用mtdblock_add_mtd，最终会分配、设置、注册一个gendisk。</p><p>那么这个gendisk的请求队列在哪被设置，这个队列最终会怎么实现flash的读写呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/mtdblock.c</span></span><br><span class="line">init_mtdblock -&gt; </span><br><span class="line">register_mtd_blktrans(&amp;mtdblock_tr);</span><br><span class="line"><span class="comment">//mtd_blktrans_request便是gendisk的请求队列</span></span><br><span class="line">tr-&gt;blkcore_priv-&gt;rq = blk_init_queue(mtd_blktrans_request, &amp;tr-&gt;blkcore_priv-&gt;queue_lock);</span><br><span class="line">tr-&gt;blkcore_priv-&gt;thread = kthread_run(mtd_blktrans_thread, tr,</span><br><span class="line"><span class="string">&quot;%sd&quot;</span>, tr-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mtd_blktrans_request这个请求队列唤醒mtd_blktrans_thread线程</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">mtd_blktrans_request</span><span class="params">(<span class="keyword">struct</span> request_queue *rq)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_blktrans_ops</span> *<span class="title">tr</span> =</span> rq-&gt;queuedata;</span><br><span class="line">wake_up_process(tr-&gt;blkcore_priv-&gt;thread);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mtd_blktrans_thread线程便是gendisk具体的操作了</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mtd_blktrans_thread</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mtd_blktrans_ops</span> *<span class="title">tr</span> =</span> arg;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电梯调度算法优化队列</span></span><br><span class="line">req = elv_next_request(rq);</span><br><span class="line">dev = req-&gt;rq_disk-&gt;private_data;</span><br><span class="line">tr = dev-&gt;tr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数会取出对应的mtd_info结构体，调用mtd_info的读写接口，</span></span><br><span class="line"><span class="comment">//最终会调用对应的nand_chip结构体的读写接口，实现flash物理上的读写操作。</span></span><br><span class="line">res = do_blktrans_request(tr, dev, req);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束队列读写</span></span><br><span class="line">end_request(req, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-Nand-Flash读取流程"><a href="#4-7-Nand-Flash读取流程" class="headerlink" title="4.7 Nand Flash读取流程"></a>4.7 Nand Flash读取流程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// APP对块设备节点/dev/mtdblock进行访问操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个读数据的bio，被合并或被生成一个请求，触发请求队列的请求处理函数</span></span><br><span class="line">mtd_blktrans_request -&gt;</span><br><span class="line"><span class="comment">// 唤醒一个休眠线程--mtd_blktrans_thread，该线程在register_mtd_blktrans中创建启动</span></span><br><span class="line">wake_up_process(tr-&gt;blkcore_priv-&gt;thread);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该线程从请求队列中取出一个请求调用do_blktrans_request接口进行处理</span></span><br><span class="line">mtd_blktrans_thread</span><br><span class="line">do_blktrans_request -&gt; </span><br><span class="line"><span class="comment">//tr-&gt;readsect 即：struct mtd_blktrans_ops中的mtdblock_readsect接口</span></span><br><span class="line">tr-&gt;readsect(dev, block, buf) -&gt;</span><br><span class="line">do_cached_read(mtdblk, block&lt;&lt;<span class="number">9</span>, <span class="number">512</span>, buf) -&gt; </span><br><span class="line"><span class="comment">//mtd-&gt;read 即：struct mtd_info中的 nand_read接口</span></span><br><span class="line"><span class="comment">//在 nand_scan_tail接口中被设置 mtd-&gt;read = nand_read;</span></span><br><span class="line">mtd-&gt;read(mtd, pos, size, &amp;retlen, buf) -&gt;</span><br><span class="line">nand_do_read_ops(mtd, from, &amp;chip-&gt;ops) -&gt;</span><br><span class="line"><span class="comment">//调用到对应nand_chip的底层接口</span></span><br><span class="line">chip-&gt;ecc.read_page_raw(mtd, chip, bufpoi) -&gt;</span><br><span class="line">nand_read_page_raw -&gt; </span><br><span class="line"><span class="comment">// chip-&gt;read_buf 即：s3c2410_nand_read_buf</span></span><br><span class="line"><span class="comment">// 在驱动程序：s3c2410_nand_init_chip函数里设置</span></span><br><span class="line"><span class="comment">// chip-&gt;read_buf = s3c2410_nand_read_buf;</span></span><br><span class="line">chip-&gt;read_buf(mtd, buf, mtd-&gt;writesize); </span><br><span class="line">chip-&gt;read_buf(mtd, chip-&gt;oob_poi, mtd-&gt;oobsize) -&gt;</span><br><span class="line"><span class="comment">// 从nand flash控制器的NFDATA寄存器中读取数据</span></span><br><span class="line"><span class="comment">// chip-&gt;IO_ADDR_W = regs + S3C2440_NFDATA;</span></span><br><span class="line"><span class="comment">// chip-&gt;IO_ADDR_R = chip-&gt;IO_ADDR_W;</span></span><br><span class="line">readsb(this-&gt;IO_ADDR_R, buf, len);</span><br></pre></td></tr></table></figure><h2 id="4-8-Nand-Flash驱动编写"><a href="#4-8-Nand-Flash驱动编写" class="headerlink" title="4.8 Nand Flash驱动编写"></a>4.8 Nand Flash驱动编写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/clk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/mtd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/nand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/nand_ecc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/partitions.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/arch/regs-nand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/arch/nand.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s3c_nand_regs</span> &#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfconf  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfcont  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfcmd   ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfaddr  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfdata  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfeccd0 ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfeccd1 ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfeccd  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfstat  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfestat0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfestat1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfmecc0 ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfmecc1 ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfsecc  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfsblk  ;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nfeblk  ;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nand_chip</span> *<span class="title">s3c_nand_chip</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span> *<span class="title">s3c_mtd</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">s3c_nand_regs</span>* <span class="title">s3c_nand_regs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_partition</span> <span class="title">s3c_nand_parts</span>[] =</span> &#123;</span><br><span class="line">[<span class="number">0</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;bootloader&quot;</span>,</span><br><span class="line">.size   = <span class="number">0x00040000</span>,</span><br><span class="line">.offset= <span class="number">0</span>,</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">1</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;params&quot;</span>,</span><br><span class="line">.offset = MTDPART_OFS_APPEND,</span><br><span class="line">.size   = <span class="number">0x00020000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">2</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;kernel&quot;</span>,</span><br><span class="line">.offset = MTDPART_OFS_APPEND,</span><br><span class="line">.size   = <span class="number">0x00200000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">3</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;root&quot;</span>,</span><br><span class="line">.offset = MTDPART_OFS_APPEND,</span><br><span class="line">.size   = MTDPART_SIZ_FULL,</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">s3c2440_select_chip</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">int</span> chipnr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(chipnr == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//取消选中：NFCONT[1]设为1</span></span><br><span class="line">s3c_nand_regs-&gt;nfcont |= (<span class="number">1</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//选中：NFCONT[1]设为0</span></span><br><span class="line">s3c_nand_regs-&gt;nfcont &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">s3c2440_cmd_ctrl</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">int</span> dat, <span class="type">unsigned</span> <span class="type">int</span> ctrl)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ctrl &amp; NAND_CLE)</span><br><span class="line"><span class="comment">//发命令：NFCMMD = dat</span></span><br><span class="line">s3c_nand_regs-&gt;nfcmd  = dat;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">//发地址：NFADDR = dat</span></span><br><span class="line">s3c_nand_regs-&gt;nfaddr = dat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">s3c2440_dev_ready</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> s3c_nand_regs-&gt;nfstat &amp; (<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">nand_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clk</span> *<span class="title">clk</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1 分配一个nand_chip结构体 */</span></span><br><span class="line">s3c_nand_chip = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> nand_chip), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">s3c_nand_regs = ioremap(<span class="number">0x4e000000</span>,<span class="keyword">sizeof</span> (<span class="keyword">struct</span> s3c_nand_regs));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2 设置 */</span></span><br><span class="line">s3c_nand_chip-&gt;select_chip = s3c2440_select_chip;</span><br><span class="line">s3c_nand_chip-&gt;cmd_ctrl    = s3c2440_cmd_ctrl;</span><br><span class="line">s3c_nand_chip-&gt;IO_ADDR_R   = &amp;s3c_nand_regs-&gt;nfdata;</span><br><span class="line">s3c_nand_chip-&gt;IO_ADDR_W   = &amp;s3c_nand_regs-&gt;nfdata;</span><br><span class="line">s3c_nand_chip-&gt;dev_ready   = s3c2440_dev_ready;</span><br><span class="line">s3c_nand_chip-&gt;ecc.mode    = NAND_ECC_SOFT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3 硬件相关的设置,根据nand flsah手册设置时间参数 */</span></span><br><span class="line"><span class="comment">/* 使能NAND FLASH控制器的时钟 */</span></span><br><span class="line">clk = clk_get(<span class="literal">NULL</span>, <span class="string">&quot;nand&quot;</span>);</span><br><span class="line">clk_enable(clk);<span class="comment">/* CLKCON&#x27;bit[4] */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HCLK=100MHz</span></span><br><span class="line"><span class="comment"> * TACLS:  发出CLE/ALE之后多长时间才发出nWE信号, 从NAND手册可知CLE/ALE与nWE可以同时发出,所以TACLS=0</span></span><br><span class="line"><span class="comment"> * TWRPH0: nWE的脉冲宽度, HCLK x ( TWRPH0 + 1 ), 从NAND手册可知它要&gt;=12ns, 所以TWRPH0&gt;=1</span></span><br><span class="line"><span class="comment"> * TWRPH1: nWE变为高电平后多长时间CLE/ALE才能变为低电平, 从NAND手册可知它要&gt;=5ns, 所以TWRPH1&gt;=0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TACLS    0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TWRPH0   1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TWRPH1   0</span></span><br><span class="line">s3c_nand_regs-&gt;nfconf = (TACLS&lt;&lt;<span class="number">12</span>) | (TWRPH0&lt;&lt;<span class="number">8</span>) | (TWRPH1&lt;&lt;<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* NFCONT: </span></span><br><span class="line"><span class="comment"> * BIT1-设为1, 先取消片选 </span></span><br><span class="line"><span class="comment"> * BIT0-设为1, 使能NAND FLASH控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">s3c_nand_regs-&gt;nfcont = (<span class="number">1</span>&lt;&lt;<span class="number">1</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4 使用：nand_scan */</span></span><br><span class="line">s3c_mtd = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> mtd_info), GFP_KERNEL);</span><br><span class="line">s3c_mtd-&gt;owner = THIS_MODULE;</span><br><span class="line">s3c_mtd-&gt;priv = s3c_nand_chip;</span><br><span class="line">nand_scan(s3c_mtd,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5 add_mtd_partitions */</span></span><br><span class="line">add_mtd_partitions(s3c_mtd, s3c_nand_parts, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不分区的话，也即只有一个主分区，直接调用add_mtd_device */</span></span><br><span class="line"><span class="comment">//add_mtd_device(s3c_mtd);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">nand_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">del_mtd_partitions(s3c_mtd);</span><br><span class="line">kfree(s3c_mtd);</span><br><span class="line">iounmap(s3c_nand_regs);</span><br><span class="line">kfree(s3c_nand_chip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(nand_init);</span><br><span class="line">module_exit(nand_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>驱动测试：</strong></p><ol><li>make  menuconfig去掉内核自带的NAND FLASH驱动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Device Drivers</span></span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Memory Technology Device (MTD) support</span></span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">NAND Device Support</span></span><br><span class="line">&lt; &gt; NAND Flash support for S3C2410/S3C2440 SoC</span><br></pre></td></tr></table></figure></li><li>make  uImage<br> 使用新内核启动, 并且使用NFS作为根文件系统</li><li>insmod  s3c_nand.ko</li><li>格式化，默认格式化成 yaffs。（工具制作过程参见下方）<br> flash_eraseall  &#x2F;dev&#x2F;mtd3  </li><li>挂接<br> mount  -t  yaffs  &#x2F;dev&#x2F;mtdblock3  &#x2F;mnt</li><li>在&#x2F;mnt目录下创建文件等操作</li></ol><p><strong>工具制作：</strong></p><ol><li>tar xjf mtd-utils-05.07.23.tar.bz2 </li><li>cd mtd-utils-05.07.23&#x2F;util<br> 修改Makefile：#CROSS&#x3D;arm-linux-  改为  CROSS&#x3D;arm-linux-</li><li>make</li><li>cp  flash_eraseall  &#x2F;work&#x2F;nfs_root&#x2F;first_fs&#x2F;bin&#x2F;</li></ol><h1 id="五、nor-flash驱动分析"><a href="#五、nor-flash驱动分析" class="headerlink" title="五、nor flash驱动分析"></a>五、nor flash驱动分析</h1><h2 id="5-1-nor-flash框架"><a href="#5-1-nor-flash框架" class="headerlink" title="5.1 nor flash框架"></a>5.1 nor flash框架</h2><p>nor flash与nand flash类似，对于nand flash，硬件相关层构造一个nand_chip结构体，然后向上注册一个mtd_info。对于nor flash而言，硬件相关层构造一个map_info结构体，然后向上注册一个mtd_info。所以对于MTD层而言，nand和nor是没有区别的，在MTD看来他们都是mtd_info。</p><p><img src="8.nor_nand%E6%80%BB%E7%BB%93.png" alt="8.nor_nand总结"></p><h2 id="5-2-nor-flash规范"><a href="#5-2-nor-flash规范" class="headerlink" title="5.2 nor flash规范"></a>5.2 nor flash规范</h2><p><strong>1. JEDEC规范</strong></p><p>老式的Nor Flash一般是jedec规范，其一般只包含识别 ID、擦除芯片、烧写数据的命令。要想知道其容量大小等信息，就需要先读出其芯片id，然后到内核中的jedec_table数组中比较得到对应的芯片信息，比较麻烦。另外如果内核jedec_table数组中事先没有对应芯片id的信息，还需要先在该数组中添加。jedec_table数组：</p><p><img src="9.jedec_table%E6%95%B0%E7%BB%84.png" alt="9.jedec_table数组"></p><p><strong>2. CFI规范</strong></p><p>目前的Nor Flash一般都支持CFI规范，其除了提供识别 ID、擦除芯片、烧写数据的命令之后，还提供了进入CFI模式的命令（往地址0x55处写入0x98），进入CFI模式后就可以通过读取相应地址的数据获取芯片属性信息，如容量、电压等信息。</p><p><img src="10.CFI%E8%A7%84%E8%8C%83.png" alt="10.CFI规范"></p><p>读取芯片容量（从地址0x27处读取容量大小 ）：</p><p><img src="10.CFI%E8%A7%84%E8%8C%831.png" alt="10.CFI规范1"></p><h2 id="5-3-nor-flash驱动使能"><a href="#5-3-nor-flash驱动使能" class="headerlink" title="5.3 nor flash驱动使能"></a>5.3 nor flash驱动使能</h2><p>make menuconfig：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Device Drivers</span> </span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Memory Technology Device (MTD) support (MTD [=y])</span></span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Mapping drivers <span class="keyword">for</span> chip access</span></span><br><span class="line">&lt;M&gt; CFI Flash device in physical memory map    // 将驱动编译位内核模块，方便调试，设位y为编译进内核                                       </span><br><span class="line">(0x0) Physical start address of flash mapping  // 配置基地址</span><br><span class="line">(0x200000) Physical length of flash mapping    // 配置物理大小</span><br><span class="line">(2) Bank width in octets                       // 配置位宽  2*8=16</span><br></pre></td></tr></table></figure><p>可以在linux-2.6.22.6&#x2F;.config中看下如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_MTD_PHYSMAP=m</span><br><span class="line">CONFIG_MTD_PHYSMAP_START=0x0</span><br><span class="line">CONFIG_MTD_PHYSMAP_LEN=0x200000</span><br><span class="line">CONFIG_MTD_PHYSMAP_BANKWIDTH=2</span><br></pre></td></tr></table></figure><p>2440内核没有使用设备树，是代码注册driver与device：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/maps/physmap.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// make menuconfig时配置生成的.config中，定义了CONFIG_MTD_PHYSMAP_LEN宏</span></span><br><span class="line"><span class="comment">// 所以这里将会定义#define PHYSMAP_COMPAT，</span></span><br><span class="line"><span class="comment">// 进而会在驱动入口函数中执行platform_device_register接口调用。</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MTD_PHYSMAP_LEN  </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_MTD_PHYSMAP_LEN != 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">warning</span> using PHYSMAP compat code</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PHYSMAP_COMPAT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">physmap_flash_driver</span> =</span> &#123;</span><br><span class="line">.probe      = physmap_flash_probe,</span><br><span class="line">.remove     = physmap_flash_remove,</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PM</span></span><br><span class="line">.suspend= physmap_flash_suspend,</span><br><span class="line">.resume     = physmap_flash_resume,</span><br><span class="line">.shutdown   = physmap_flash_shutdown,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">.driver     = &#123;</span><br><span class="line">.name   = <span class="string">&quot;physmap-flash&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PHYSMAP_COMPAT</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">physmap_flash_data</span> <span class="title">physmap_flash_data</span> =</span> &#123;</span><br><span class="line">.width      = CONFIG_MTD_PHYSMAP_BANKWIDTH,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> <span class="title">physmap_flash_resource</span> =</span> &#123;</span><br><span class="line">.start      = CONFIG_MTD_PHYSMAP_START,</span><br><span class="line">.end        = CONFIG_MTD_PHYSMAP_START + CONFIG_MTD_PHYSMAP_LEN - <span class="number">1</span>,</span><br><span class="line">.flags      = IORESOURCE_MEM,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">physmap_flash</span> =</span> &#123;</span><br><span class="line">.name       = <span class="string">&quot;physmap-flash&quot;</span>,</span><br><span class="line">.id         = <span class="number">0</span>,</span><br><span class="line">.dev        = &#123;</span><br><span class="line">.platform_data= &amp;physmap_flash_data,</span><br><span class="line">&#125;,</span><br><span class="line">.num_resources= <span class="number">1</span>,</span><br><span class="line">.resource= &amp;physmap_flash_resource,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">physmap_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line">err = platform_driver_register(&amp;physmap_flash_driver);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PHYSMAP_COMPAT</span></span><br><span class="line"><span class="keyword">if</span> (err == <span class="number">0</span>)</span><br><span class="line">platform_device_register(&amp;physmap_flash);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-驱动入口"><a href="#5-4-驱动入口" class="headerlink" title="5.4 驱动入口"></a>5.4 驱动入口</h2><p>进入probe函数中，主要调用do_map_probe()函数，add_mtd_partitions()函数，来完成注册nor  flash：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">physmap_flash_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *dev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 1. 分配一个physmap_flash_info结构体，里面包含map_info、nand_chip结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">physmap_flash_info</span> *<span class="title">info</span>;</span></span><br><span class="line">info = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> physmap_flash_info), GFP_KERNEL);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 2.0 设置map_info结构体；从device的resource中解析nor flash的物理基地址、长度、位宽等信息 */</span></span><br><span class="line">info-&gt;<span class="built_in">map</span>.name = dev-&gt;dev.bus_id;</span><br><span class="line">info-&gt;<span class="built_in">map</span>.phys = dev-&gt;resource-&gt;start;</span><br><span class="line">info-&gt;<span class="built_in">map</span>.size = dev-&gt;resource-&gt;end - dev-&gt;resource-&gt;start + <span class="number">1</span>;</span><br><span class="line">info-&gt;<span class="built_in">map</span>.bankwidth = physmap_data-&gt;width;</span><br><span class="line">info-&gt;<span class="built_in">map</span>.set_vpp = physmap_data-&gt;set_vpp;</span><br><span class="line">info-&gt;<span class="built_in">map</span>.virt = ioremap(info-&gt;<span class="built_in">map</span>.phys, info-&gt;<span class="built_in">map</span>.size);  </span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 2.1 设置map_info结构体；提供nor flash的硬件相关读写接口 */</span></span><br><span class="line">simple_map_init(&amp;info-&gt;<span class="built_in">map</span>);</span><br><span class="line"><span class="built_in">map</span>-&gt;read = simple_map_read;</span><br><span class="line"><span class="built_in">map</span>-&gt;write = simple_map_write;</span><br><span class="line"><span class="built_in">map</span>-&gt;copy_from = simple_map_copy_from;</span><br><span class="line"><span class="built_in">map</span>-&gt;copy_to = simple_map_copy_to;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 以nor flash规范识别型号信息，构造出mtd_info结构体 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> **probe_type = &#123; <span class="string">&quot;cfi_probe&quot;</span>, <span class="string">&quot;jedec_probe&quot;</span>, <span class="string">&quot;map_rom&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">info-&gt;mtd = do_map_probe(*probe_type, &amp;info-&gt;<span class="built_in">map</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 添加mtd分区，优先级为：&quot;cmdlinepart&quot;, &quot;RedBoot&quot;，physmap_data-&gt;nr_parts*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_MTD_PARTITIONS</span></span><br><span class="line"><span class="comment">// &#123; &quot;cmdlinepart&quot;, &quot;RedBoot&quot;, NULL &#125;，添加cmdlinepart分区和RedBoot分区</span></span><br><span class="line"><span class="comment">// 从uboot命令行或&quot;RedBoot&quot;获取分区信息，然后添加分区，并为其创建对应的字符设备节点和块设备节点</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *part_probe_types[] = &#123; <span class="string">&quot;cmdlinepart&quot;</span>, <span class="string">&quot;RedBoot&quot;</span>, <span class="literal">NULL</span> &#125;;</span><br><span class="line">parse_mtd_partitions(info-&gt;mtd, part_probe_types, &amp;info-&gt;parts, <span class="number">0</span>);</span><br><span class="line">add_mtd_partitions(info-&gt;mtd, info-&gt;parts, err);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在设备信息中配置了分区的话，就添加对应的分区。这里没有配置，即physmap_data-&gt;nr_parts=0，没有要添加额外的分区。</span></span><br><span class="line"><span class="keyword">if</span> (physmap_data-&gt;nr_parts) &#123;</span><br><span class="line">add_mtd_partitions(info-&gt;mtd, physmap_data-&gt;parts,</span><br><span class="line">physmap_data-&gt;nr_parts);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 一个主分区，直接调用add_mtd_device创建对应的字符设备节点和块设备节点。</span></span><br><span class="line">add_mtd_device(info-&gt;mtd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-do-map-probe流程分析"><a href="#5-5-do-map-probe流程分析" class="headerlink" title="5.5 do_map_probe流程分析"></a>5.5 do_map_probe流程分析</h2><p><strong>1. CFI规范Flash识别分析</strong></p><p><strong>1.0 CFI协议层注册：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/chips/chipreg.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_mtd_chip_driver</span><span class="params">(<span class="keyword">struct</span> mtd_chip_driver *drv)</span></span><br><span class="line">&#123;</span><br><span class="line">spin_lock(&amp;chip_drvs_lock);</span><br><span class="line">    <span class="comment">// 将协议层接口放到chip_drvs_list链表中</span></span><br><span class="line">list_add(&amp;drv-&gt;<span class="built_in">list</span>, &amp;chip_drvs_list);</span><br><span class="line">spin_unlock(&amp;chip_drvs_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//linux-2.6.22.6/drivers/mtd/chips/cfi_probe.c</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">chip_probe</span> <span class="title">cfi_chip_probe</span> =</span> &#123;</span><br><span class="line">.name= <span class="string">&quot;CFI&quot;</span>,</span><br><span class="line">.probe_chip= cfi_probe_chip</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> mtd_info *<span class="title function_">cfi_probe</span><span class="params">(<span class="keyword">struct</span> map_info *<span class="built_in">map</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Just use the generic probe stuff to call our CFI-specific</span></span><br><span class="line"><span class="comment"> * chip_probe routine in all the possible permutations, etc.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> mtd_do_chip_probe(<span class="built_in">map</span>, &amp;cfi_chip_probe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_chip_driver</span> <span class="title">cfi_chipdrv</span> =</span> &#123;</span><br><span class="line">.probe= cfi_probe,</span><br><span class="line">.name= <span class="string">&quot;cfi_probe&quot;</span>,</span><br><span class="line">.module= THIS_MODULE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内核初始化时被调用</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">cfi_probe_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">register_mtd_chip_driver(&amp;cfi_chipdrv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.1 CFI规范识别过程：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/chips/chipreg.c</span></span><br><span class="line"><span class="comment">// *probe_type--&quot;cfi_probe&quot;  </span></span><br><span class="line">info-&gt;mtd = do_map_probe(*probe_type, &amp;info-&gt;<span class="built_in">map</span>) -&gt;</span><br><span class="line">drv = get_mtd_chip_driver(name) -&gt;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 从chip_drvs_list链表中取出对应协议层接口</span></span><br><span class="line"><span class="comment">// chip_drvs_list链表在register_mtd_chip_driver接口中设置</span></span><br><span class="line"><span class="comment">// register_mtd_chip_driver接口在协议层调用</span></span><br><span class="line"><span class="comment">// cfi_probe_init/jedec_probe_init/map_ram_init</span></span><br><span class="line">list_for_each(pos, &amp;chip_drvs_list)</span><br><span class="line">this = list_entry(pos, typeof(*this), <span class="built_in">list</span>); </span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(this-&gt;name, name)) &#123;</span><br><span class="line">ret = this;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"><span class="comment">// 执行协议层的probe函数 即上面分析的cfi_probe接口</span></span><br><span class="line">drv-&gt;probe(<span class="built_in">map</span>)-&gt; <span class="comment">//即cfi_probe(map)</span></span><br><span class="line"><span class="comment">// cfi_chip_probe 结构体中有一个.probe_chip接口（cfi_probe_chip）</span></span><br><span class="line">mtd_do_chip_probe(<span class="built_in">map</span>, &amp;cfi_chip_probe)-&gt;</span><br><span class="line">genprobe_ident_chips(<span class="built_in">map</span>, cp) -&gt;</span><br><span class="line">genprobe_new_chip(<span class="built_in">map</span>, cp, &amp;cfi) -&gt;</span><br><span class="line"><span class="comment">// 在该函数中，进入通过命令CFI模式，读取芯片信息</span></span><br><span class="line">cp-&gt;probe_chip(<span class="built_in">map</span>, <span class="number">0</span>, <span class="literal">NULL</span>, cfi) -&gt; <span class="comment">//即cfi_probe_chip</span></span><br><span class="line"><span class="comment">// 进入CFI模式</span></span><br><span class="line">cfi_send_gen_cmd(<span class="number">0xF0</span>, <span class="number">0</span>, base, <span class="built_in">map</span>, cfi, cfi-&gt;device_type, <span class="literal">NULL</span>);</span><br><span class="line">cfi_send_gen_cmd(<span class="number">0xFF</span>, <span class="number">0</span>, base, <span class="built_in">map</span>, cfi, cfi-&gt;device_type, <span class="literal">NULL</span>);</span><br><span class="line">cfi_send_gen_cmd(<span class="number">0x98</span>, <span class="number">0x55</span>, base, <span class="built_in">map</span>, cfi, cfi-&gt;device_type, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 看是否能读出&quot;QRY&quot;</span></span><br><span class="line">qry_present(<span class="built_in">map</span>,base,cfi)</span><br><span class="line"><span class="comment">// 读取芯片信息，比如cfi-&gt;cfiq-&gt;P_ID = 0x0000 0002</span></span><br><span class="line"><span class="comment">// 由芯片手册知P_ID: Primary vendor command set and control interface ID code</span></span><br><span class="line">cfi_chip_setup(<span class="built_in">map</span>, cfi) -&gt;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> cfi_ident) + num_erase_regions * <span class="number">4</span>); i++)</span><br><span class="line">((<span class="type">unsigned</span> <span class="type">char</span> *)cfi-&gt;cfiq)[i] = cfi_read_query(<span class="built_in">map</span>,base + (<span class="number">0x10</span> + i)*ofs_factor);</span><br><span class="line">.....</span><br><span class="line"><span class="comment">// 根据上面读取到的P_ID调用相应的接口申请并设置struct mtd_info结构体</span></span><br><span class="line">mtd = check_cmd_set(<span class="built_in">map</span>, <span class="number">1</span>) -&gt;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0002</span>:</span><br><span class="line"><span class="keyword">return</span> cfi_cmdset_0002(<span class="built_in">map</span>, primary) -&gt;</span><br><span class="line">.......</span><br><span class="line">mtd = kzalloc(<span class="keyword">sizeof</span>(*mtd), GFP_KERNEL);</span><br><span class="line"><span class="comment">//mtd_info的私有数据为map_info，包含读写操作最终的硬件接口</span></span><br><span class="line">mtd-&gt;priv = <span class="built_in">map</span>;</span><br><span class="line">mtd-&gt;type = MTD_NORFLASH;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fill in the default mtd operations */</span></span><br><span class="line">mtd-&gt;erase   = cfi_amdstd_erase_varsize;</span><br><span class="line">mtd-&gt;write   = cfi_amdstd_write_words;</span><br><span class="line">mtd-&gt;read    = cfi_amdstd_read;</span><br><span class="line">mtd-&gt;sync    = cfi_amdstd_sync;</span><br><span class="line">mtd-&gt;flags   = MTD_CAP_NORFLASH;</span><br><span class="line">.......</span><br><span class="line"><span class="keyword">return</span> mtd;</span><br></pre></td></tr></table></figure><p><strong>2. JEDEC规范Flash识别分析</strong></p><p><strong>2.0 JEDEC协议层注册：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/chips/chipreg.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">register_mtd_chip_driver</span><span class="params">(<span class="keyword">struct</span> mtd_chip_driver *drv)</span></span><br><span class="line">&#123;</span><br><span class="line">spin_lock(&amp;chip_drvs_lock);</span><br><span class="line">    <span class="comment">// 将协议层接口放到chip_drvs_list链表中</span></span><br><span class="line">list_add(&amp;drv-&gt;<span class="built_in">list</span>, &amp;chip_drvs_list);</span><br><span class="line">spin_unlock(&amp;chip_drvs_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// linux-2.6.22.6/drivers/mtd/chips/jedec_probe.c</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">chip_probe</span> <span class="title">jedec_chip_probe</span> =</span> &#123;</span><br><span class="line">.name = <span class="string">&quot;JEDEC&quot;</span>,</span><br><span class="line">.probe_chip = jedec_probe_chip</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> mtd_info *<span class="title function_">jedec_probe</span><span class="params">(<span class="keyword">struct</span> map_info *<span class="built_in">map</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Just use the generic probe stuff to call our CFI-specific</span></span><br><span class="line"><span class="comment"> * chip_probe routine in all the possible permutations, etc.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> mtd_do_chip_probe(<span class="built_in">map</span>, &amp;jedec_chip_probe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_chip_driver</span> <span class="title">jedec_chipdrv</span> =</span> &#123;</span><br><span class="line">.probe= jedec_probe,</span><br><span class="line">.name= <span class="string">&quot;jedec_probe&quot;</span>,</span><br><span class="line">.module= THIS_MODULE</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">jedec_probe_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">register_mtd_chip_driver(&amp;jedec_chipdrv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.1 JEDEC规范识别过程：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">info-&gt;mtd = do_map_probe(*probe_type, &amp;info-&gt;<span class="built_in">map</span>) -&gt;</span><br><span class="line">drv = get_mtd_chip_driver(name) -&gt;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 从chip_drvs_list链表中取出对应协议层驱动</span></span><br><span class="line"><span class="comment">// chip_drvs_list链表在register_mtd_chip_driver接口中设置</span></span><br><span class="line"><span class="comment">// register_mtd_chip_driver接口在协议层调用</span></span><br><span class="line"><span class="comment">// cfi_probe_init/jedec_probe_init/map_ram_init</span></span><br><span class="line">list_for_each(pos, &amp;chip_drvs_list)</span><br><span class="line">this = list_entry(pos, typeof(*this), <span class="built_in">list</span>); </span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(this-&gt;name, name)) &#123;</span><br><span class="line">ret = this;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"><span class="comment">// 执行协议层的probe函数 即上面分析的cfi_probe接口</span></span><br><span class="line">drv-&gt;probe(<span class="built_in">map</span>)-&gt; <span class="comment">//jedec_probe(map)</span></span><br><span class="line"><span class="comment">// jedec_chip_probe 结构体中有一个.probe_chip接口（jedec_probe_chip）</span></span><br><span class="line">mtd_do_chip_probe(<span class="built_in">map</span>, &amp;jedec_chip_probe) -&gt; </span><br><span class="line">genprobe_ident_chips(<span class="built_in">map</span>, cp) -&gt; </span><br><span class="line">genprobe_new_chip(<span class="built_in">map</span>, cp, &amp;cfi) -&gt;</span><br><span class="line"><span class="comment">// 读取芯片的id,和jedec_table数组比较得到芯片信息</span></span><br><span class="line">cp-&gt;probe_chip(<span class="built_in">map</span>, <span class="number">0</span>, <span class="literal">NULL</span>, cfi) -&gt; <span class="comment">//即jedec_probe_chip</span></span><br><span class="line">jedec_match( base, <span class="built_in">map</span>, cfi, &amp;jedec_table[i] )</span><br><span class="line">cfi_jedec_setup(cfi, i) -&gt;</span><br><span class="line">p_cfi-&gt;cfiq-&gt;P_ID = jedec_table[index].CmdSet;</span><br><span class="line"><span class="comment">// 根据读取到的p_cfi-&gt;cfiq-&gt;P_ID来调用对应接口申请并设置struct mtd_info</span></span><br><span class="line">mtd = check_cmd_set(<span class="built_in">map</span>, <span class="number">1</span>)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>do_map_probe执行完后便添加分区，最终都是调用add_mtd_device，与nand flash一模一样，此处不再赘述。</p><p>一个nor flash的读写操作，首先会执行块设备的优化，放入队列， 找到对应的mtd_info结构体，再找到对应的私有数据map_info，执行硬件相关的读写操作。</p><h2 id="5-6-nor-flash驱动编写"><a href="#5-6-nor-flash驱动编写" class="headerlink" title="5.6 nor flash驱动编写"></a>5.6 nor flash驱动编写</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参考 drivers\mtd\maps\physmap.c</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/mtd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/map.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/partitions.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">map_info</span> *<span class="title">s3c_nor_map</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span> *<span class="title">s3c_nor_mtd</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_partition</span> <span class="title">s3c_nor_parts</span>[] =</span> &#123;</span><br><span class="line">[<span class="number">0</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;bootloader_nor&quot;</span>,</span><br><span class="line">.size   = <span class="number">0x00040000</span>,</span><br><span class="line">.offset= <span class="number">0</span>,</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">1</span>] = &#123;</span><br><span class="line">.name   = <span class="string">&quot;root_nor&quot;</span>,</span><br><span class="line">.offset = MTDPART_OFS_APPEND,</span><br><span class="line">.size   = MTDPART_SIZ_FULL,</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">s3c_nor_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 1. 分配map_info结构体 */</span></span><br><span class="line">s3c_nor_map = kzalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> map_info), GFP_KERNEL);;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 设置: 物理基地址(phys), 大小(size), 位宽(bankwidth), 虚拟基地址(virt) */</span></span><br><span class="line">s3c_nor_map-&gt;name = <span class="string">&quot;s3c_nor&quot;</span>;</span><br><span class="line">s3c_nor_map-&gt;phys = <span class="number">0</span>;</span><br><span class="line">s3c_nor_map-&gt;size = <span class="number">0x1000000</span>; <span class="comment">/* &gt;= NOR的真正大小 */</span></span><br><span class="line">s3c_nor_map-&gt;bankwidth = <span class="number">2</span>;</span><br><span class="line">s3c_nor_map-&gt;virt = ioremap(s3c_nor_map-&gt;phys, s3c_nor_map-&gt;size);</span><br><span class="line"></span><br><span class="line">simple_map_init(s3c_nor_map);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 使用: 调用NOR FLASH协议层提供的函数来识别 */</span></span><br><span class="line">printk(<span class="string">&quot;use cfi_probe\n&quot;</span>);</span><br><span class="line">s3c_nor_mtd = do_map_probe(<span class="string">&quot;cfi_probe&quot;</span>, s3c_nor_map);</span><br><span class="line"><span class="keyword">if</span> (!s3c_nor_mtd)</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;use jedec_probe\n&quot;</span>);</span><br><span class="line">s3c_nor_mtd = do_map_probe(<span class="string">&quot;jedec_probe&quot;</span>, s3c_nor_map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!s3c_nor_mtd)</span><br><span class="line">&#123;</span><br><span class="line">iounmap(s3c_nor_map-&gt;virt);</span><br><span class="line">kfree(s3c_nor_map);</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. add_mtd_partitions */</span></span><br><span class="line">add_mtd_partitions(s3c_nor_mtd, s3c_nor_parts, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">s3c_nor_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">del_mtd_partitions(s3c_nor_mtd);</span><br><span class="line">iounmap(s3c_nor_map-&gt;virt);</span><br><span class="line">kfree(s3c_nor_map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(s3c_nor_init);</span><br><span class="line">module_exit(s3c_nor_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-7-RAM模拟MTD设备"><a href="#5-7-RAM模拟MTD设备" class="headerlink" title="5.7 RAM模拟MTD设备"></a>5.7 RAM模拟MTD设备</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 参考 drivers\mtd\devices\mtdram.c</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/vmalloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/mtd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/mtdram.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要添加分区的话，加上这个头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mtd/partitions.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> total_size = <span class="number">10</span>*<span class="number">1024</span>;  <span class="comment">//10M</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> erase_size = <span class="number">1</span>*<span class="number">1024</span>;   <span class="comment">//1M</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MTDRAM_TOTAL_SIZE (total_size * 1024)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MTDRAM_ERASE_SIZE (erase_size * 1024)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_partition</span> <span class="title">ram_parts</span>[] =</span> &#123;</span><br><span class="line">[<span class="number">0</span>] = &#123;</span><br><span class="line">        .name   = <span class="string">&quot;bootloader_nor&quot;</span>,</span><br><span class="line">        .size   = <span class="number">0x200000</span>,</span><br><span class="line">.offset= <span class="number">0</span>,</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="number">1</span>] = &#123;</span><br><span class="line">        .name   = <span class="string">&quot;root_nor&quot;</span>,</span><br><span class="line">        .offset = MTDPART_OFS_APPEND,</span><br><span class="line">        .size   = MTDPART_SIZ_FULL,</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We could store these in the mtd structure, but we only support 1 device..</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mtd_info</span> *<span class="title">mtd_info</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">check_offs_len</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> ofs, <span class="type">uint64_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Start address must align on block boundary */</span></span><br><span class="line"><span class="keyword">if</span> (mtd_mod_by_eb(ofs, mtd)) &#123;</span><br><span class="line">pr_debug(<span class="string">&quot;%s: unaligned address\n&quot;</span>, __func__);</span><br><span class="line">ret = -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Length must align on block boundary */</span></span><br><span class="line"><span class="keyword">if</span> (mtd_mod_by_eb(len, mtd)) &#123;</span><br><span class="line">pr_debug(<span class="string">&quot;%s: length not block aligned\n&quot;</span>, __func__);</span><br><span class="line">ret = -EINVAL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ram_erase</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="keyword">struct</span> erase_info *instr)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (check_offs_len(mtd, instr-&gt;addr, instr-&gt;len))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"><span class="built_in">memset</span>((<span class="type">char</span> *)mtd-&gt;priv + instr-&gt;addr, <span class="number">0xff</span>, instr-&gt;len);</span><br><span class="line">instr-&gt;state = MTD_ERASE_DONE;</span><br><span class="line">mtd_erase_callback(instr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ram_point</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> from, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params"><span class="type">size_t</span> *retlen, <span class="type">void</span> **virt, <span class="type">resource_size_t</span> *phys)</span></span><br><span class="line">&#123;</span><br><span class="line">*virt = mtd-&gt;priv + from;</span><br><span class="line">*retlen = len;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ram_unpoint</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> from, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Allow NOMMU mmap() to directly map the device (if not NULL)</span></span><br><span class="line"><span class="comment"> * - return the address to which the offset maps</span></span><br><span class="line"><span class="comment"> * - return -ENOSYS to indicate refusal to do the mapping</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">ram_get_unmapped_area</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd,</span></span><br><span class="line"><span class="params">   <span class="type">unsigned</span> <span class="type">long</span> len,</span></span><br><span class="line"><span class="params">   <span class="type">unsigned</span> <span class="type">long</span> offset,</span></span><br><span class="line"><span class="params">   <span class="type">unsigned</span> <span class="type">long</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>) mtd-&gt;priv + offset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ram_read</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> from, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params"><span class="type">size_t</span> *retlen, u_char *buf)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(buf, mtd-&gt;priv + from, len);</span><br><span class="line">*retlen = len;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ram_write</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">loff_t</span> to, <span class="type">size_t</span> len,</span></span><br><span class="line"><span class="params"><span class="type">size_t</span> *retlen, <span class="type">const</span> u_char *buf)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">char</span> *)mtd-&gt;priv + to, buf, len);</span><br><span class="line">*retlen = len;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">cleanup_mtdram</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mtd_info) &#123;</span><br><span class="line">mtd_device_unregister(mtd_info);</span><br><span class="line">vfree(mtd_info-&gt;priv);</span><br><span class="line">kfree(mtd_info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mtdram_init_device</span><span class="params">(<span class="keyword">struct</span> mtd_info *mtd, <span class="type">void</span> *mapped_address,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> <span class="type">long</span> size, <span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mtd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*mtd));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Setup the MTD structure */</span></span><br><span class="line">mtd-&gt;name = name;</span><br><span class="line">mtd-&gt;type = MTD_NORFLASH;</span><br><span class="line">mtd-&gt;flags = MTD_CAP_NORFLASH;</span><br><span class="line">mtd-&gt;size = size;</span><br><span class="line">mtd-&gt;writesize = <span class="number">1</span>;</span><br><span class="line">mtd-&gt;writebufsize = <span class="number">64</span>; <span class="comment">/* Mimic CFI NOR flashes */</span></span><br><span class="line">mtd-&gt;erasesize = MTDRAM_ERASE_SIZE;</span><br><span class="line">mtd-&gt;priv = mapped_address;</span><br><span class="line"></span><br><span class="line">mtd-&gt;owner = THIS_MODULE;</span><br><span class="line">mtd-&gt;_erase = ram_erase;</span><br><span class="line">mtd-&gt;_point = ram_point;</span><br><span class="line">mtd-&gt;_unpoint = ram_unpoint;</span><br><span class="line">mtd-&gt;_get_unmapped_area = ram_get_unmapped_area;</span><br><span class="line">mtd-&gt;_read = ram_read;</span><br><span class="line">mtd-&gt;_write = ram_write;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新版本的内核做的实验，add_mtd_partitions改成了mtd_device_register */</span></span><br><span class="line"><span class="keyword">if</span> (mtd_device_register(mtd, ram_parts, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> -EIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">init_mtdram</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span> *addr;</span><br><span class="line"><span class="type">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!total_size)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Allocate some memory */</span></span><br><span class="line">mtd_info = kmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> mtd_info), GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!mtd_info)</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line">addr = vmalloc(MTDRAM_TOTAL_SIZE);</span><br><span class="line"><span class="keyword">if</span> (!addr) &#123;</span><br><span class="line">kfree(mtd_info);</span><br><span class="line">mtd_info = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line">err = mtdram_init_device(mtd_info, addr, MTDRAM_TOTAL_SIZE, <span class="string">&quot;mtdram test device&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line">vfree(addr);</span><br><span class="line">kfree(mtd_info);</span><br><span class="line">mtd_info = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(mtd_info-&gt;priv, <span class="number">0xff</span>, MTDRAM_TOTAL_SIZE);</span><br><span class="line"><span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(init_mtdram);</span><br><span class="line">module_exit(cleanup_mtdram);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Alexander Larsson &lt;alexl@redhat.com&gt;&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Simulated MTD driver for testing&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gpio子系统</title>
      <link href="/2023/10/21/GPIO%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/21/GPIO%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="想白嫖，没门！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2d3b286e78c5c4a874cb119b7de6247d1eff251cda51ad58b480ab849a444aa5">571d5de1f5a053f5c86199ac456cb1a43eb166bd6254c6c81e96bfa55ef337b30ef7fffad4ccf2147b4986dfb39f6dbe375cd01e0f025e0b1a01773e5c43df500300e3c436c06e35d29910270292f1a78b2fa3c15ba2164fb766f487b4e1d069d6ed014fa526af67e6f4ce8d29104a0a7c85771da6e7d517d34767b6129be92faee8306664856a367a305371394f07e7456df7612ebf45c24e00045fc5b2e1460999ff3ccf6d844caa5b7cbf66aed10ea5e4c096e552d9a000c1fcf9a8b5cb4b88f23893f6b73c23788838e3168a5a360f398238f38e278c47a2f21c10b27a41914966c0400c7c706ece176f47ceb670166f405b9ff107c01aa94e78931b5ccc11ee455d496948f4180db26237ab93fadd7e904d970b5e803add5c18f58eb9f0eafeba4eb0a809e1577acb25cb1ab049bf063212fae5cef7ca11275c962e66fc4bbeabe7087be3d7e741555f9426d84088857826a27e359c4a7ac6d84343695711953e5047738404f62dae96e31a323c87757121ee52533a3bd19393383d51880b2d570412d1da8e39727c616bb577a5b426a92ce8a3a2733830118451b6b5752d0614d0127ef09311fbe2d6e3df8da1b0977ca2c187fa393c1dc33c8ebc0d0bb5e3ce07217f58e68821bc98573932ab5d2e402d981d9a7a9468b7a5e8c86e2eadc149e83c6193900af32bc55df6046a5b2910ff0fee9468f9f06229174c71a3db8c4b76cc86a38ad021ba9a4e138f71d75ca58f76596d2956f43f7673fafd3a963a7af5014ffc340af9212d78943133208480c96cf1af56f7be119025bb07177d02ff10d265da8d9bbf2941bb260c5c1a6011928ce3356ea8e2f6e82ad1cc7bd2a2d423b6de805ed0cc0d6244a6e5766a211df9e355f53b8ac84e1105da6cc323df9dec5848aaaf6dc32cef4355cee090632f3864c5aa0563956c571ba1a4a2d03791ac4ed8a8a19c13a5656e44c7e00240bb01c1057d6d97b7bae3ddecdfdfca9bf57fa641efaaa8da0e0448c2805e527bf0fb220e02eb3b70566afa8954efb6254367365a0682dad0c33b8b599b96f857f416119e3c8da0038d09f0578acb8df3951db886c345147fa1810f2c8b5b7b83128124a9406309dc9bfa762cb1c0510f9b83124515a1a6a2607d5fa74ff72e99f58a76d89734520471add88e6ea37d0cf5bb553414826e649be05741a43dafe004400b220320f412dc23fb51c7c3ece3d3a42bdef07149fc1c28e54d15c5be7a27a151e618fd153d3ceabdad58eae30e4559638a0a0117ae139091c93d177b38bab9b55b2a62b1733365b4a1ed00dccb18b8260a475ba95db600f8f01858945b652842d3a65a7c6ed111951bf8811710c45b20bbdea496565462883354605e953d11c6a62bd58817fa48f24278b8905a1cdd903112dd82a9ac4208e9f01f4982e185cccb48bb2dfc38c22aa655655a15fac47df002b6d8d27e4e1cb8eecd9cd27d88211c5792b5e1f753c32062610341a59d9da3c854efa9bd1f175ec76f1fc1bdd4eab09b2c6f9c4145fee25d31977c349d6fadf2f7f6ebecd84e6ea6f74fc603a646f8723d38d112f87c0ef66c183eea63d7c9032021177de2d5d7e394e0fe93d61aad01b7ee82acd6cddb0e7189f2fabafcf7f345c317d7e0c599e822f6b8ec4baa93cc4fef68ea5a39b1aac9a6e18adc67f5490d72bfb23ebe14a59a55479eb9e3331612b30fcde4da0e90a10286bfdb1db98e796e0fd9f994ed57718e98715ca18254053459fb2aac28ec39f1b0fb6f661e64e9a99c2dfcda8a91d2c1b3aecc67ecd75ce5250452889f548d789b3e9d29ddc7b071cdc7d3d98d24d17c881265912c2d991f5f6dc958e30b49b95986da65387b0958da4fe25f61042f59793401dd70c83d675fb1bd7172b120c282eb178c627f5fb929f4b4637a3fda4f23d91d90dde2adccb6fd718d84c2be59b06446200d23c6a8e2ad0fbcc5d0fe08458ddcca0ba48df65e1327dc6aa0ff9f48b33f9d03644d7dff2b6373aa9287ee8720d44b70e621dbcc882627a159884588fa4e835f7553cb8d5cfe9735e3b8a8e98be7412a9817098c7fcec4aa77177f0544b2c647d263f820eed1236ef20c37eef6d532edf6b70f50f84d9af563de22fd1bcce13aa1866e36de9b151a1a490e70978a243103baace3f71fe1ef1eb03694d0aede4e0952a7e49ce83ec9957a68ec1fc322d6999cbf2c74f84635f6daaf491c4bae0c53b405763d0e46c96e4adc16144203ce4b941f243c908b64bf9dc0816ccc0e3d1deb6093c931eb156be0d84e6e769c7241909175ab41a78416672e6eb4a70242a8f3bf5aa3b68701ba92f2de9a51046c275f97fb02fa8b0db5230109ddf03714756365de2abe2585419d1d651c97afd8879c96dd07cd4c60af1141a0b0833683768ecb8864cce32e0580d0c2c98b7b3085d726e93d9e762f62c3c85b2eaa7429bb3ab65f07e50afa78d05ec653c28934f4c4a58d512ab1a5fa88bb4c80c51961d73678e4f71aa795a62212f0e726f222abe0f7c2a65c988a276777ac783b0db86b27a58c9353f42b0fa696e787ce9adcc2e2a68b180c8c44efe7118ca0d639410acda912ac2b2080885d85af4f90927a810b439162878c2354f070fae56ca5179bbccee78a99337815732f8582ce3d1a5c9f25d1cd5cec3257f3a398d073ff279874a918ddbd8e708df5b1c749561110a9ab1191b4adb65ead5cd38f62890acfd263e2974d17f7d3c577be89c18e514ee36a920be0d67227f0556d4f1bcb31142c2387a9dc9996ca3aa44ac2a632431c170f4928a6f59f3883f561bf0011f77d0a2aa92991b1770502eaedca4ba87ff429d581b21f2939095c3624b6fc6508dcd7a41ab7117c16ce528a163c35f86f100e8635eec1b1672ba892246cb17d8d259342397b242e21c59588022a945e41e29a872d2846b65f3012608f7b34248ea946eca8124f2570a4c9af10109661e33b99f4af2fc993a7ccc50c63143d814e47d99660864484d11c2078be17ce3f2dac95c50655e7371ded5594e9b140d8a381b2210d4cc1daee3d9bac0f0995bcba582dfa6e5685e8c58b7502374e461be5bb0db1846154a54298d3b0368a7cfe46c47ac99700ff0b81c8976e3bc609881e04284561fed5198d3e30a58533ea7c63eb07df22a3db01145fa0bede354ea2772a16a3bb4bc8c8c952c6a47ab91cf2f67966cdd9f6c5d178b7ff431f9bdd02db4fa7bf16ec7805776b7a967209d1eb53cff5df27ea49fff7fbe40e048c6880a0b0944ef645e277b4d10cd9e17971828e474684b284147068c6fca1ad097d3f68bb158e31be7b912609d14925a20d159dfcbdc174a34c817179bf76d1d783af793158a274f88379a465eda25ed1d000467d55425c35808bdb2956f579d2d2f78b69187a47713dce5f33af559bd9ded9fb8d971ff781e69dcc4e0ddb83272ec699856df91637648b3ea80c99a2839890a8fcd1958c49091637f9847490435c54826f36bf128a0352453f8cfdebd3e6c68721f1865dca67a434912dd76c9b58f87f46ffd03cb7096289110b710f02bd37387592b13b587cc39eaa331038d86e5669d1bfcf5cf7060cd8eac52c47f317e36c08e04f449001db2f707edfe60a36a4037dc21ec48538049636cee4a21649026cba6c3b58e508effe0915877792eb9865420b16de39c65b8281a4ccaa2cfeb96add5559c7a6bf68dcef25ce8d1ea43ac0e5ccdc36908fbe2b61f45ef65896b873cdcd846b8420c5afaaa04154cbed1daed604a00381b6a8b8273c60cf06801cf8904618655615762d843c33737d52b1d1b7ff4b0e1615fac4bb02bf21af261083fab3a08b72b872ac6cfacd2a984f0c01ab1be2a84c447fd9cbbf284ced588de03d1e96ff8c1bea1fe96c825a1c435748f671926fcc786c9a0eb4cbc21a5016c7c4b1b182de9b978b317aec79acffa44f57e28a9ebff3c1f45990e4a47f6eca798cd9cb2f830d77cd50a9c6dc3df7f05cc5ed4eff0fcd38d88e54a8435c132ac53ad9e1f90f1f3dd131dcf20025a37ed06fe80f716d3a845f55472d65e0f205b7188279b1730c3c7d6b1dff092baa4631e6bc561a1cc1a6229c77630f7a3ffdf2b4823a2dc28f1282e6cdebc4be916c85de705b664028fe9e8c86a49265a552b7030cc4e987329f24c8e8a1fc825a06f01e13ea8b34911ade6d5f800311d43e0ce49311f5a10450ac6076291e5c4d0fda97f098d48d05858181f49b7760d8367c937478dc79c4de101d1e7eb129a49c1c3813bdbaf88ad3853e76d20e80f016c2fad0ac1d498aeff626f42913d32ad58fd6e25f955beace54912176f228741fdfadcf1d8cfee5dd275f57546f0ccdc922e575b97d89060d2ba283a8bfad0ec2b5a5c95c00b7ce3bef0843fb1bedd33293a35f3ccfda75f58b64f77328dbd01cc5910cdcc0d6d67889930799ff6d9d9a172ebd4f8cd2a62cc1fe92a02e22eec261019857fe2dd511191b15f8379e63cbbbac77a89af9dc0092074dae0f9d9206092858f2461c2fcdddd25b8a91727bb5dd33da1aa6ed8ff4522c56a139fdee12cc1ea9b3cb88bba736797edbedf7d4eaa32948730f53847c9501c9dff7c6a61bcf72ef4647a4feb857c39141af2e8a98aed4d6fa5718fc932e66553eec02880a052ddeda14d9d7a7179864c1425261b79fce673201dc479f71bcd0e3413fc1d4857b4e5a8ee3b83211d569f22654b696da665eaaa3e377096c346bafe343287669626f500f5208a70d6c58c1c525352c8b99f7d024a4512e33e9d9c844507194b105207a489a110bb1d5d767c8edb0a6e08a4669d8e3fcd720dce6943deffacf6fb6113ed8ec559471240f57d2a83bffa4f2450e3fb0f4c332170c0dcaa275af2aadce3f7c2b38c4077987f79afaeef8c9503303453a05bded92cbc0a67a3a69104c308f6e12a6b160c780f9035c0df96e5e11e7f2d3b4e265d44de3e45b0b94186267df934e92de911911065f615f1a3046c1959722bacc22ee93346ab98ca26385a14f3603cedff7f96bc27b047bef7e54797d7e320827e0392688b9c3449400629b143b674081a9fa9673c8b25011f28f35f33d60b908c333bb4ef370c40eccf3d36e2ff58705952f5eae3953a62e6bd8a1742672198a8c3c8d4f129a9645544eba8109fe61c7406b16f76325d03d69b7927837d896120498cf349eae4623fe413550e0d268e4ed152c839a03e031013ee733b093c704975c34c8b1b916d51c2530d9f14b68919fdd10191109ac34c066a3abf7a3cb0d8d7bf25e290bec18774a90eb9ca9e4b98d89789d3beb128a906f1d38942072ec6eefd367a3ecfcfc12f7a160fd6ff41b1947e97fdff463c8a10115ff2ec4d9adfd5929bcb8660a13a331ee40e78db5afdab315546e9285e3c37e8f76a719ae00fa058f9675747d7bdd7b35b516634a5b55a29275325d1449f31c9c5e8ae81a6886bf839aaabfb58b1ffe8be8940227dcdae4ff177cc221e3b88791baf2921338596b1fe85987e238042e5fe42de9d8afac8241a17a51b53e015e37e0a6fb1875157b4d9251556a8d207008295c9b866974e3bbec6798f5129e3db5aa6f62e63d6f8f3e8e65324779747a112ae453e20167665584812595b11f576361d304f059ce38eab8c15451283785e6b23bb1315d8e49fd7aa9a40b3fb802c6a3e8b8ff2bfed917d5bbc8839e2a21a53322dc17d7b91bea0e0fa774b29236879f1c869283666db92701beaabaaf17de87ae96fa6d9ca812bc1290c788f1dadafb726b9e2e7a62fadf94e6d8634fef5c658a55370cdc04127a943a6b08b4db427d6e044092b39fea5c6985a38abd87905770430c1b3d41a654a0cea072ef962ee073eddf671415343e29e0172dd89bcc4f764258af090540ca1505ab86a7ad73ea3840163ae7d8ba39555b4c35d6f8cd00d12b3ace1351953c779cfddf71e842c35a5fc59034fd45cd427e6717b75b2a31212f77b669e845d107b79a9262cb3ad844b581f67d39a4f9455ddaa57133816b4cf4d49f95ba05c3880acf24e352e5595914c124e55064009eb12050b3a4c2fdf82a3d0a4a42841033de7479b36cbacd8602582413cea0e857defa06ad92fc917da6dddd8bd5776e33a48b3e8cccd758d3b3db46883ff212569be0fdd9b66bafa2a76e8da52e00317b060a99ba25c55f25d951d77e431b8d5fa9146c8781ba94e2eab1307a020ea7704c8c0b57582ab1f1b0f20c0fbdf68dffec46ad2a2b3483dddab43dcd69f3977bf33fa487450ef54a35fd94f073328c5c8175225ea258505d9b329894607e1b4d7f1f019ebe857d7303d521ba2f18adea8a88bb9858ad7f456c1ef4b86f5d1d8aabb6a1137c4db807a77df4cf696c1446d417c10e045a2987759bb596dab6ca43184dbc8faf844eb924acc1a81b9a76081173730de31aedad6ced79c6fe210e44c3c36007444a2dc3e428e0288311cd96ceeb26ae00ffdb673968ae7b7a22f36439cb319dc2cd886de1414008aa23dea15a6a63de5bfa4cd829560a48d443a3ab9f8056fefca8cc0f005a181592612e9583cb08a1796da80e4d2c9cfe5ffe2d427d153d7858112cad9c304a42fedb56f19e268a021db2a8f09646402d9c1f0283c51ff12db8d282e4d46701ef8869e38740a70e2d0125e10ba59be8c2098c5e045220be6c806b523e77489aa05581a585ce4abc6cb2e4386a35b0cc2b6a45ce204d3abf2f62dbf6f5b75d80c8dc47b668e3190aca2db331712882506916cb0fd421b44c2f84ec65e0d27fae7b9d4f56bed5c96acf9889fe1cc52a534a53a0b96015558ae4bd3ead34b21991a1b75d7d74639c696acee2ed8ce8e2553a417ecb1c3fbaddc0bbef19e1ff792505b1603160b2c0bb73591e6a78a3e1da958dd17387b9f5a1bd489ca8a3baf5af4228aad61fd135a225f1922b28fafc1274c0a67423e3383f2071c942873d0ea0200f5ebfacbdec3f32687f93a46a910e0cf13d559b3c06e7b53ed09cea6006210eed70a5b3dafea0b034abd7bf64047e61e9aa9990908d456f4c27df13717b45678ed65a6852947d0052be2a17ca982033a65be9c534db298d2c5baebcc464fc5ab5e98d9d0b9a6b178a8ebc67c0b676b8b84b0de2d4cfa931164a3a5085363e30087c4d02efa543d2052504951c039f2d83a94e251b54e1b5faf3ea31e76f1b053840470412fe5065938391e6fd9b74f0f861781dd7d628483bc17a298bd8139fa7961814a8a6aa5f212b091fa44bb891eecf70af302ff013a363455cc54770d3f85d371bba5a51f317cc1867175a45c893e2abef9e54f88684cd851f5b83893ed59dc601b4551068a08e9ed935f7077b6ac61f4a7445df1bba67462c7ceb0ec1530f24bafad84e01e9cb8dd095545b27cf1b93b93635201c48a3559384ae5aef3b91a89adf093edd6dc7c00060c92450c03cc9261d48900d84746a99116aa11bfc248a1f8133a1737ee4059c48495cdecbf83380bc8e2441664304dffb0b5b2ca4eca52f092bf42d51c377bdfd70e7f913c48e5fc196bb25f7b7e0a5df996500164c05fed589d54af6b2f2e38e708a4b9616d6c2a05c74f2010487edb92da5ad7a45e087e561f16a48079cf09cf6fb734cf84f02d1368b0e520dd3d1aac90ce9fbae850ee84c7449080dd3abc3fe7757026c0ae3d33086360e7cc4394f0c9d31c88d5bdce39b6f4b3a7444d30b23e0a162a45972c5141957d3974ec82cef75ae1a7e42f2447007bf8d40a6171b5ad28e256c271fe382b9c95e0c54bedd15178df07ab40fd0eac882a85c37486a3816ffd9e0edf5a8957b2b3bf4dde3294a0418e56b4e02f531a8efeb788cd79feae5e2a093c4b0505207cff89104069a56d442eb200c513b2820a81ab334c20f67f950f916e13fc3eaa607e141834897cce5191cba7d1c9fb1eb7101d008a11b8a38f3a814a6126d23e14d9cfe9a985deca32d4286ff61623f4589c588803b7fa0fcdde4231e4384c12d831c7def78b2949ddffb48401abc165a0109e48ae3f705166c046351c1f48f6b7953a347815b1246a4b5b2fb46a0386164d3f660326c947df656b88d79e1980861f0a5ab148ffc11bbeb21e74637aed874654bddf5ba2f32e188c19da16f6db2fc7ff5f272cfe016693125308e1fdb1be9170085304dd80aaa2f7272bac7a062643c709996e1629601ad0cba1f03b573db5dc1b1ccf4f3b80d8d8f4195cb3462200df9193105d53171bc34e7cf159118338d5331d457cf4bd2911a4136d5889ac2b4b83b9899d33ead51df84f428fb5f3ac68279ec72d2122ddf56f493e4d81830edd0e9421ab58814b5b374cc1de2639892ce2077cab95649a3e1df111f97a5878a27a014826dcab8ff3784cf7f7c3f34cb05d27c6a82961db33585191261615e5414deeabe324eef8258cc386a68ae0e9e99ef473a99afb9d85889c7c9e2c34ef9d8a5eb2e64d6129330300b347c3f81ddc60551d1720b05fb1fb5f259496e53c721486b959ba19865bcc5720e5c36f04e4551f9f896f42dc8b5cd79373a4a3cef17ee77eb0b123ff1120f1af663906768f671742bf4c8c734b2154312cddbd7aedfd431433d0dbd420eec28e2e1579d1cd8323e3b28fd537093e574944d5ea0085da5a109de5ce3527cf25dec95f033ae3971e66f0fed6d87630036e4ee1b7b0b466b5a621b49196725f2784d72c480f2df21c895cf15131124a3e147b826142320a28a752eec7c3b8cc59146c3fb68a38417fc7d18947fde3dfdc04172cfa33c7eeb8d32d75651b0971237ae4870a8d30639621965149a4bd4478fc6a10a7a7e450d01560cae0cdf63a744987d2272c8dccf5f5e731a81e43c66a5330187bef97f1cf9244b1e69046d21a3e121ced27a185ed13cb253d62aad0ff8e34f50d77754a86116edb67530817f30413e7a1db05269dec3ad27ae3fd8b7538e6236ede17ff7acd5ca7033dbee62c6d00b31324eb7428d5f6b3cca2ae4919928412ec08bf4820cc3619b19faabb437578c7ba7b9b1b8d65002e3197ab121162ca60fd128d76a57e90398281d59a306701068d23e2facb56aa4c4e75b8c727fb37554fa324336258d8c05ca2bdee6b90ede2b1a9a2f538df34677bfe61bbffa269b1e934496d8aabecf20a81283871ad39662414082ad0c707070b05d46a0e23eea039769e0abe610ad7a7c62bfd77f3b126e47c8b74e544c1406fc13c0c0fd258ef8e67f3af574a33cef58bc75f711a6af6e9c77905556f4acb5374d6f37197a2af58023cc32ecf91f0b16c14474be4bffb9ea7c9eab0dac860f4e2fd44adfce7b96b4f16ba7a343e8ddfcdb7f0122c01dd5ec59b58083500b6c06919803e228499033b794794e79c9c48cc41965bf36fc047d92545ab4ff707a916518d56299233f7e45092db69ba0fe26ef766a89a1a5c0bc8a7d464fdb2a6b46e34ae725704e67073a60b4edb9f23395982beb097ad243b2a190fb107b60a3f765285ae57f0809363f5e40a79884239afa783a7a018e29fdf64839ecff489bca02455c8ccffd0ed7e5f850959bd184b31e7717ffd51a6631a089012d8a14514bed769aa4abf39214cedea6c98e49afe117f084e809dfaf55c99d226d64e1f4324f1111cd9d8653a26aa20e78dbc5f5646d19a6a0443bce5af079105fa4c4b4b513b52eb3aa325a797fc5b4e0a2675974b4e48be0f262d82f62c81db6be630bdda1b0d71a062a752b973240bd323fec8de25647088ecb2245a50d41569db4e121b19126f7a0725c8ceb73d9367ba521c93a407f4ce2e5be7d58bc308ac713b38acbf1b648df0e4d81ddbc16bc10a17398b2e344ced38cb75cf47e993c2420fcf05eaf5b62d663d59c1344187f4ef3cd01d757405abdb1b42fb94e3dbc3f654bdc9767f653e46ac9095f00a1b1d28beb82264e692940cc2ac428ae9667241e0b12f66196fc4f21ddd813f2ad68584b35563f0ac63494cd70e3e9c5db7fedbe63a4bdd99a082dc7711e2bb436f1385e925d88c528d49aa96abb78dbbe4cc3fb9fcc77d4da400d9892599bd1900e92052b2bd0d7d35b8abe7a04706ea2cc34fc138bb4d918df539665d480b20f6b889b66af53ef037546bc7c31e3ce998411ebef11b118040f1c7b5b4daa22cd01693e908c069150cf64df73bc36d6d10e70858587409be0e4be2e135c9278199847d6be9b6c0b688b437db6a5f0666596425f540025e9e3fde0496a13163d83718e016069ad51d6df17e6a3e7537478b48649dedb173d75ad51ad940f41c714fe887f1b587690879b06f90c9c259e6cefa6912b0a1eee359c6ac52cdc51746012c0a5098e99b72bc9ea7f87d45a62b09781b65836c0e389dbbf4174b92ec12c0a2f7dfe2a3b520a4e804c6e6372efadcd1723e968e7517e653ed8ed994516ad76f8b61dc3cf87777271d1209780de370d4c00fe9c3201150bb1424e71c5178fef7f77a98935f51d1a2ee1478fc9d0c2d15a4e67453f20a9ed7f9f70aa8fe9d33282f4721951dd48b2261df7d224d5f5992889c4ca27d881d08f591f1431f8be440c6d70613c1cf3f92e87361fa4edb0ca28bffc4914bfcbb3a276531049bf50750fc79748a1fb5d4d85f23f5f6a55aeabb85f049b0afc1d2158d5ef2d9dca9299e72f4c829cfed922036338b01f4f3a78fd167f317e7d4fbc9120db00f07e694ff3659abc62eb5c35c3a2a80c47eab9e4f00a27f50663bf271db156b97889823c10092e34c65ee83722f0c200ba687f795ac637e00744f8466e2dc487551e3df1123b907709ba8f9cd954d9365228d18b139e46865715a9291763170401878f45d7b062f31e882f425e423c73d595c48ee1e6f7912b439a68f3ab1e7556e9375349d2cf710cd724e562e30334afd066d018cbe73347a90f40307dc437007e5905803da395b593a7f997c75f3f0801ee35f3547f66b3abee9d281485e5e8dfebc3a2b6c7a8d6f2c1790b7ef4a7c2eabf1546431e33c997de162a1828807649fa583860eddc15fc3234bd7e719c44b603602fccc959ec7992b353023619284f2b9115834dd7a447594c53381f1a144d0935cd2bdf65d43665fb96c3753d499277ebc109b30bf049a0b7528b5058d0e9d09f76ecf169418245c6aa0be0bb103a9c4f7b72f0be5f20bd2e308e9e6761b64e8a61541cf7812ae5e459c204de054e18146c7c2934458d54f812356ad895fed83f660a6b358bbf62b35355a6264cdd0a4c55e616d72823c0c5c125ff8555d54f83b6cb30a108c9aa592cf920f1862d4379d1fd650f56b82cd6326d7adc3257072138e0c39ebf594639fc36a61462e6ce46304d360a3589535629c48b5a3f0a3ef4b2c270ebb469da36cc040f11b5aa7a440c05f0e2cbf2df98268ea7bf7571c9c25572420ccf4dc5c1f99d1e81a3e4c9e3e8eef49873d16efb69b32b777d13c77063aab280daebdd92d9b7b9363bc862981d28dd382daf1c910efb4c498ee383ed548d9835f8b9a61563dcef6eda2673f7890864a31ee96b57bbb1190dd42a30b390b9b522347f9346099d848334e30f0f1276d841c81749aa19004deff02d88561a8d0562852a8200c6efef1c45307abfa5fcf21cf40f75fed4401e9addc36f2615601f0680661ae48e9dde48819fe532227e81d459c58cb2f661b7dd5ea9d0a999f5adf0546514770be59264ee323bdba347788a45881e718a1415638f652726547d7bb6e6b9e2141ccc5e27d1b3f58ad25708f1c3de3d4308914a3923edf54b358587e120a54ed42b63f528da69b6a47f45bdb986de208e81555711e772e69320e982e96fb04f958bddb72acc835020bd5782adcde2cf881869c3f1785112f98cf181414b51532a97f344b57d291255bb21aeaa78d711096ee539cb28a1630fe0db448ae13cb874b887e357362d6b67c40adb0330a777d8ab309ac7492117dff319af9e3f0336b13866b0896004ed3e0247996dc4cb4ec5babcbd025f6735f7385042ab172735bce7cc26038502ab326dbf9292bfffd75ee20c8ec8b83bff7658029c84109fe71abb9345db5421b0294b6afe749265c8c30b6dc2fbe6886a6e52d05c0aae4bd39466180db78d61c8822dfecb4a17a9422202cdead3fbdd7a884f720ba77d3f04040fbf19e7a6818f283ff33850338debaa77dcd8787b955e1bac0dfd7972fea508bc0c7be6bc9de014437c43d5c08046f513ce68cbe2c2a4448d825fbfc366ac34fa0cc76cd15485b4ff591058a10631c0915f124afc4dcd3a21766971bee62303b95c92609eaaa7388d5636ab0e4019de7ac046f2acc32346fc50e1490ed739d528c108f7ae433d5d5af7cbedcb579bfe9e118089e0ca1f937d4aad9c8be00c0e98cf55f43a04a3f3ff2b99d1d56749bdceebda8c221e08df1b60df1205114d12e90546bbb98de19ab56b723069f4d605e5bfdc93aed8c2eba1b3682b3cb8b9140835d6d3170357ebaa38f0589cc7541eafc6afa51f93eeaf0ad3fe9fef8c98d52b0ba5ebe38e3f5337faa34182094dc46e20eb7146d8308a7fa8820de8027109643a5c5b2098f40905ea1bf18431ceb3d12c1a9b4f80059cea9e65f8e3228daecd8dcadfa52ec23530248e1d948b4eea8d91c569eba43316f2ce55f089b5fe1b36216c8339525ca21c439412cfd7bdaf89cb47cca6da2c56ca5d85adbaa8a945b892e30596485a624f390760421ddcfc82f6c1c47561259d8b84cba054fde9c94be0018aa18a272cca2b7bbb06ec471b1c9ed618a16bfa6b4affebc8f3f00ebfd6b1d5384586cddb7ed899ee713aa53225c6d744266e6a87e2156e9af97856bf696bd4b597a69c943c9a5029cec3fd4d5160fb5e21d4e5c39fd6eebcbee995898f1cc4ade6ab9461b28f0ad4550f67df40d6aca28129f5907e13674dd42801b504650c59c1dd4c6eb9da370b27b9c1d4b22011c894fb51a2e88328e4fb144a4fd4dc301958ee689cca943dec733319fd2f985785f1679a036e213b9dadd1f2440522479957a4e87b8924834ff8e89da5fcfd79389c4a9f2d56c849a0d5e8d4b527d5a50b1d2c5f9022b0ff93a87ac18209e36a4ba42e2e90669d1e6398ee3b2669d3d3d394cd68b78c59c5a7c578af94ee1ec2c6ff9b24f951ceacab8af09a77e892b5506bdca9d3e04d7c7dd1c845fa5d169e40a917f263ad6a7e62889798db8f8bc3a604879b115c8130dcd62f81f003c29fa6f5769e4216f63f76d6f38335d675e5e73b84de454b7a6b7e948962f2165895e26b3f7a4d9695702cbe686119aec70c839d6636ecbefeab58506584b26b3bc6be1cf9fb12e9b1b12080ae2468989ce320a68ff2c6d28d1abaf85c1a840d5e57f45c2fe17d134668dd7c8ccf47c6120193a280ecf2e3e587a8365948ec0fd9bed087df2a1ebffd91636c05e080268481769ce50bd76fedb11dac0839fa81e4682cff72893b25ececd3a2527bdfdd9a80116c36ed96d3952df801b681a0219952e152f2b29e749b2d4dda1581cdf3e54da2a3237c1fad2f66e649a4b9ad810bd98c2bdebc2127bbb376c8c0b83592f9a0a4ee45e846ffa5c511cfde84f7054e8f2c47760c4d56110bb7c8658b46a022f785b874ccd25bbab6f6d7cdf42e7e77000f6c27a77b0addd5381970e5ffeb843457ed3647913fddb3be9dd891d45404d62188b6ba19b1e268bcee7f9427fc8a7aee324c14c766863862774a3e8315449730e99557a5811c892253ea468ab8ee00111ae8c15fa0accea3253bd9f22c4c511219e1a2071ff3a7f0a6381048567d53694bfee935f8923f45270515c17a9ed1aee6c9a917df3f42702c7544594193f796b6196799e7be5f667dad6d1f1c2c4c7979f896fd6702f1dba23ea708bb5f7a974a8d5323f5855eea277f6f648091865a93ffc6c88f6acf831ec79484a47dc2400eff07535cbe98830b189aae3ff46721466947886db1aad84663c563df5254cf1e5aed22cbd492e1e1f1db1519c2c6c5b7ea8d9d6febd5b360fcca68cccfbe70733aad2076c1818efb53abcc5875661f12cbe3060a4a8d8489f716d62e77058c63785c5006093e1c2337260b58c46680fca67368d3953b17985dd8905869c6182e84b13b90bf86d8aa28afa0ccf4045e0599761ae0a5e8a0d232822594b35349137fc060eb859829bca70a6a97de61fba827ace1da7e97fdfe0960407087ec9e2e65adf89cc0d334b950eee170ecce1e0c92bbe3661526b17265d91d028a876c5cf461fa7303b4aea03534c2e9eb48f764eafb04a357550bc565b9364b93486bffe661919323e8d4e552cac483569155af5434dc6cc1e9820ce0443935f9428b9a8ce8cd165705110e8624e93edb2ac957e6d1d986748278408841372127a9d9cf40f949c0bbe74fd774f54167940320e05f6de13b9d945c217534079de88b109c0389f13fad73ecfdc5be36830c99edc9f8fcf0ab02e57e10cd65078737c2a96aad7b8035f322335539c3f6203aa216a7f9d431548eea60e26304afbdfe21f4d6aebfc387f7d59e7c8a3e7b154e426a0e98f0f8818dff38818084dcf1a239c7deb384eb95b105d26a27ec095d58c9e07ac473176b9baff117360bf3b006c82345d898a11761d2e4d578b2b3e8d5ffd99be29dab881fde421e6cc826c06404ba7c178a740e7a8d6204562febce988c22baac157901c622f8d27788f3d65d3ea607541defa97a726f747f3b796ce129e67ece4623fa727cbd933889d5dffcec373d5f732d60cb0be6ffa550d9d31dc43db7e49a86ba74a94506c7d72620259efccbea53a257b8f346d7991285687b21c442cbc428c12d75b7f7c2dd0c709b87127708398e2618b9f3c46098716f5a9bc565fa6cce31406b5bd25a5c353dcc26a63a7a9c4a9bc78ff3f96128d6e087f0e82b9c20cfdc6ecb21a5f62d0c50eb68e359593107d5b1448d925c580e8bebf9515c31a40b7d45ec98d11442cd74e60fa39fd18b678cc12e761348b7212e07075a038d429bbd891a78a1b128db12916b1f0c505ba09473c522ac09707848423ff923632235f273efb34bb89084dc91881cf380bc0c69890db74229fa66f0907007e8006e4941f296aca2967c75096516e7e3e8b5861dd3b83ad55881e18d32630663e60fd2c006e280ae905115faface87313960e3a5e9180ba4e4fcd3c455164d167764bcd4f3889e62660c1579ab5403f0c03037a233f5f4cebe84b7fcf81bec30c273f668ba792341151f7ab119464931f136839bd6984a1a00957294f434ae21e35592919e131702769e6b539aba06e4fe8bc47611e416470faae0bebd1f50f33c088f5fca8457b8df11de358f4bf26a704cdfc9aaf5becc4969230f6d1461d5ee2a5bcd30ad968df98fd805520078d79ae0a01f889064d575a35760604f322bf7c229213dcc7eaa12e889714505d6150d20e29c6b667264a18942983c3eedec5fb4831f41bbc98dfd212f06633182b563f00d82e5078780131351113f3662aad6ec99b7da37402b50ac6c8121f4c783f59e2156c606620a2086f338e5d6ac57fdaedf3de6ddffd5a91390be93d4990f8863cef477bc865bf7e925b87615a765ce723cf5f027bb7b8a02a5f7f8ed9ea58724c77cd79c47493d581035b75e151bb1c92c6e227cf94c2563bf3986f8b05f525c719a541cad4eee99eec6e64770d20c5a51962a6ded3ed6bf2bb78c4b50e00d14f925ae11da1bea7b956a9f81e11ad0eb299b7e131cf1a324f3e10947112892980dd85123d126a15aa35bd985dbbfe62e14589e4d085215baf8f84e7bd45228c05fbe5a43b9a05979cd5fd3570e31031f5d0c6eeef0582c10b73903766f34e98b87f5fb0bce17c458a197e286cb5a3a19a880bbdf3ab66a9a06065d772ee4cf17a3f278ea08d165379a89ac59cd1dea202b7d18c7c023472f64954287d3216b51c4e470926b7e51db2a58e1718def8f6d2281a84c80e108806a49dac1a88677e05c0995afcb0c52e343ddf9960ef671dfcf3be4c6c8ed1eaae47fa854e08ceb2a7fd3260f48bae466e143ff8c88ff7552cd295f774d2c3bc465489730a198c4512f3b82587e2b33c4315a44dc521bc649df289e07d323123f58205fda1d788110be2a03630daf32f145edc8a2d40323f3481ca32cf47fe069c80a4acc0eec5ff616b68b929eb2d0e82a0887f2f1bd99e615eb95ea0e71661339a6cc63fe9feab4b37936f46daab421afdbf9cad66903561e619355ee15ffa1dde318a5dc992e79936bb5d7c89e068f75d435f4fe424519e1499a976974d56e7758c2b7cd6a8306828b654421660d02ccd2fbe5a751cd49672d78fd858f769f90cad35acc2afee5ba2e334bfe2e46cf43d491af1a2cd8ff3bd6afd7c50a4b6f41b54169dd9aad44d9aa6b08a156a3afce24725ef16be0ec34a8561e8d39eae0a94f372705a5ad7057981bcf5ea855a38ec11f98ea5e0c95dd9dcb5788ac4f2f0c6cb06672e153b5e0cca22b6f27ae462d5adadc95e77da3821cc3fd586b31c08a157099546e59b24a7502dda96377a80e733dd3118d30e25b3235d8632fff973141af39e0f24bcab2a368f7d769a44d9502ebedd6c338a2087feb0b7ddc060f0f4bed44ce39754c0c22dc372e8abf60f6f1fe7f00f7d9c955d2ac94b79a7524e10055aae4918481cc0edf25a59a9435160a2555347f7b62bec699bf7a9751a6fc688d46b29348eb2964268a68c9e4508f3df75ce57e3ff025364ff8ba831c9fb877c774425a20c07f98838ecf263e7cd3fb90026b4539a7e179d9421ab59324f16ab298ca254e2c854c2b66962b111f2f2749de9d2768ac6648adec5199a39251c0dc8fedcf924b3441c2a8ed530a71bdb99690208b9dfb91f5ff38f1622d9f9fe381ca5be6f55e6994decf0f24ada6c70e64ef16211cbdd038cf95d9a37695765326c00fa4f9cf91440310a548b3985f67c4befdc1d8636810539e4f39f001386993e52bc792463304b674712d18e06854851d40d96862e5f92ed8fc2652af1f4ab79b3dcef8631413fe5ec9f5607ec187d2994be1821179f6edd8a40a26e3cc74529b20470eaac0e6e06a906cf68f34eb1de533798b190162c977422cec4c174fc048d09a2011a050ae438b8ada1c6857405c5aea3e031ae3f90b800a9237337d94dc30cbdc5b56846fc421a5236459dcbb24871a0f97adf719bba531faac0aa6ac1e91475876562da584d0b40a7f4f7555592eacadf994158d9c64741aafe997638825f56490247630a7c8c888703b6ee341639f1387ab361167879ba3c7f14da8bd42fc32c025203c09a8b9122ee8825cfed1043e92555c99428885603d43520c6d353ac1885a8bada60b9a17b134ce758101389a06c354692987b04ce01e1ef72a574716b5efb9bf222ba3f6ab0a6574015cb8c70fbb3a498fe83f6d34066dbd96f939ca88ce4cd386577e0de89906b912b1bc79060bb497a6a108ed62e65879a0f8df7241b482fb50e2c0401883c2d88b19e502006499e305aeb6207c4a062e22dd66aa66952c5c5e79657417c52a2ca07b837393171e531e01372844d4e95075add24543041cf278090c3415c1026fce4b63a938d6774dfda6485bbfe12b3672f5af82a001c8dce32134e053b3abe990635334d8bbb0fbcfd6bc7ec8c155cfa4beb38f16d420dfa0eb3f152c428c6b7d30bd1f9d6393d03413f98d928172d611025a4af785cf0ad4e70274e0a43041078d5ca9e2160da5a7ae7175f2a52432061f995ae2402fc4c0bef9fa7884395aed851a25ab7d1e322850b356b710edd65ad671c5dd6df59e53519240744f6503855e890237bf3b9b8927d756e083fc20288441afac977ed9b538ac13b2ef6ce40db8fd6245fad231b9794784d6c7f3ebec8c434031375da2b8cca153cd19572eb32178c6242ee5aa6ca48d154ec48913f9496d58f3e88eb9f0dfa2325f14335fecf009d9b4f8958da3a7417008f6573e00ea7b3aa33572234ece9d378f428287360aec225b3d01b426586e0426f7437b14348578c9fb8b53ebe86e45ece4fdfce9898b1efb5054b8eb54a276c1083c53db91ccffc3425948bceca82867045ffa8a69a3319d6c0304849c04e1da848927a60a848aa3358576ee99f55454ef2fc9c2c8b5311e2cd4325c551412d3cf4775c1511cb9709e5d22e482a3442274775bd807c0c1c613df492f04bf487bbfdc30697f5b9c8b1b1847043a11cae06a79d20dbb7d104e3d97d1576e24eb99d5decad28a34bc3c0e762e3cade879497acb68810664a99260409c4ddfc379485ba1ea3a7814489db77a7652aedb1784bc6c745be8ef5e0a65368ee689a6607f32897f265e1bca01cc563c3a2595701116c669ae2fc4b4979ca11dd7552214527aa21a0f4560bbc8da60f8d9b41ffa178875707097d7642c26eca67b8fa3a13c9ab98e8962bbd6d367e5c2b9af405fb151accc6a9b8da6b611f6cdb47e96af01480779018dadfebb410305a1a0ac9df55b77ff54d44887ad126735a28dcc1440c354fa7a01f25fff46ae6b31bdac05ad030b16c0b9f690cb39ad0c376c412f43b70408a454a2091e85512dd3dc0c1f98da52cc88125c1ac3c5dad3b23444a93ac4b5e0f4a3eb0dd4fdeb198bf4a73b9aa3c003405f02861222cf199b596aeb06fa062688ae0846258f09a873b37563609671cabd04b50ab0e54819ccee427bd51e207dd63605f5f8a14d6f2f4a8bae84d347bbc4131e2751f0760a0d474db260903c0ccfd7dd664eeb016be622f8aec428e079fb3c81119f2227faf6cd2b1f55d33e0a23ecb4c41673e3d338fa8ed9246aa7644bb17ff449cf3fb76e0b3a75805e88ece952252994446a87630d86fca88aef7b46e6e59bbe9ff3e2137b6dd61098962aad8e768d7e95e4f0eff8820fb91128076b42741d431e299f64fe144a288b78cd23ced1b938d77dbf2d92485529e2d9109d0170011a454d80caec78d51d4fa592031e58eade7028311d23fd5ea1e5ec2b1930be476f5269a61c5d76bb0230e6c910f9b93d722694f645c25214128c44338f50845fc8088b1b517368d6a1d296923084195f539e888697a219b325fb691a2a189adcd7ec483bdfd4b27d78496969255bff0bd79e6a19e159355adcdd41d1e1665dca010ec7e74a544de8622c974e7ed5f36ad124d13138efdc9b60314b5690f03eaae662eeb2db2210ab34ccaf70690cc733aab360c9e77e6b23ca52280f8e29acd6e9ff636a6476cbbfefea6c4627ef21fffed6a10cc54be8a1b4427262dab2efd9f24e347b72216188043147bb495cff29f56be92d687ae5ee971927bd73d2af7a3b6e706ede098295a5fee2c47e439a4808377cb79a32a5ffcbf3e5982fabb760527970bfe164e242aae9ac527fb3fe130e9451896509c8cc426067564e2e6752ec181e14f6009c49b749551c13dac55cd6a03dd36de4c88df9269de2c464fcf9767a17d62575fa4b0f1cdda28e3e108087c3dba85db04911eef363e65107f3c068209831ed2ebcc9913c9d8b77094dc9ae9c8fc96b7ef1220861c1721a6b92d42bd8a2b51a883892e5b6c5598a7b48c18144143a1f1fc7e6b1d8a073fb3614be48cb4555aa5c0c1c3d3f2f91c9cf2c875be3eca3a3b1849f6d9b6ea3e2fc6e466c491b6bdbe73ac224be2f7d58b8eac7e6334edb2a8abe82df3bd0b93dcc779ece55c2adeac14e6e57dda3b9c75c25c053d65513cc832f803c9db01ebb97c36e77ca95132f57cad65b9f142311f8e24536255e87644d04a3fe2a09665bf5e9061df128fd5f610a40d7cfa84325487245d3fcf2f5d95eca7b04450659e7fa5fd8c8cdef4df3f46cb705ca6d7e9eb204b22059962b5c72aa307a91479791d6c24a4a2dcd7a8f06056c79bfff849cfdd65ff71237593f62046a5f94693ad55953206f16c940576d887a3cc2863848f4173a98f826cf639d2b68ee512be9502308c8949e0dd9f2cb209db87b13ed1e701a1fb86e3063687120d28aaee398d53f1404b0ad830b612b96f261f3c47d60149f4988d1a6891047256ed9d8d7883edb45fb2ddfda32efb3c8bc82f367f4439a8b72d154085a3ece9957ef4f611e27d04e41b913f88ff13bbcff4ff93a357b09c5079ed654c435ab9b3a1d1ff2a4619eb67a58408f14c0e3cc0930d825364c20ac66ab7e7fd2bfa70743edc5f251e6e2ff3ec8169873fd423539f0f1ae71bedb8d5d2f4e9a53fddd51e3550873ae10b29f92cbd70c893032bfce8a4d066abcb6f436ce6f4348db6c0889302a8f7ece5d0814f1bedd8ca289eab3922ecef2248748817c584c236bc2d5ee5571aff0324bf2dd3d367fc735b0b59c8d96539f99730449edbd641eff5d1f24cc5869e97757f05ac2efb9a712d8ca1a7edd9d4512249ad2cfc09adda4690c8143265c510ca3a6451c8ffe8007a608d2d4822e97857774352d41ee9a36abd06ea8932ad6bc27a2416be3208def2a9abbd3369d2208204c34bd4daaa1988f457e207fc5cc9c83bd2a345a7c55f19725106663f991c1df76b3f226fef6aa5668201fd7e0aabd296a225824ff00cb79826d8344a602db089768221c1c44c25e9c80248b53964f81bbf5614ce0c7d1a82627e22dfd28cc009dfe0b185094dd36c5566e8af5d83627e1bed6a8753f9edade1382b4c3fd36fd65a6d54ed7fb7cbbbb3a9040cc1d6a7d04d1a1044b03b2acf3c3141dbf4318d2e312054857e55adf4737e040f15ebac3aa1d4f7f0bccb6913aa2e58ca7dd5ef2535368fddf5b670808651ecff4f735508285d5c9e716c181aec8246da24a5b691410a07919e7a399346a375a06cf82ac13d43ca7e8cc8269e5de85250009204cd3a127f4387abf52223928c21ee17aec3926e7ce05d80abfef3017db4d556b003bc0f831adb20c5673c2a69365d65ba9c3d75d9e432043fbadb8db473679690a9be075047bd8f1ed744a0484f76ad3d0937589727b5a897df0718acc9a6bce8f36722ea866efdef59857bc76c6308ea2ba23fdd09411c999bedb929b601703503ca758339332609f7e3307ac05ef3924d97d077e2fd1f760ac83260e2729204e60eeec3a82c6a1466a143b7c8acfdad6ba1eadb12eec82003a343807d58574f99b6e071c24fb52cf5b0b4f872517d24ca7ad8c0c290460fe8c366a4f3d185102252ac6154d88f1d1b4d582ef35753fa167c7080194db5f2d8fd89d33b33490c9ccc6e1704cbae0b61415c9b6ca073e73e180b4f5768a13629f4ecaa8b140415baf236ec379a4c47624b4794b6a0cd8c1970e492f2ade87157f84c0741d0331b8fb9dca7148d13ad63ecc26eb7ed72f807cdb7281ed38cf2933ba21ad52f95e79e09fbd5e215168cece325b06786488e9107b595ef1b958ab1d1a2faf3ecd0ca97366ab488f9dc06bde3c2ef464992225aca2cf4518db05a458f9d7d7f70b94b82f14de31be2a14898a7483b02559bde575340b386c3375c6e36335ebbed13e52945a48d765588157aea479d1ff8ec738708ed01694aed83baa5274d65e6e69e2cee3c21844da3a8269ccbbf6531d9bda79a38132f3a7c63f4adf4e4a53bf94cc7b0c93d5a2cf1c8225a4985711b29880201454c3ecdb8235186ea7d316cf462cd8c5f8056c1075beaa0987f60c947acd780b40ad29eb8c0251e8981a2b4945653055dc82e684bceed8db168114bcf8ee04a9f76edd56dc93075fcba9d99fc8150902a2248b7d76b22ae81bf8cca567e316c477649cc0e76d137cd61bf61702f7b8abea743ec84c43856990b6030e1bfc19f55fbb75510cf5471d2f8ad8695bc76bc9907f479f9a01c7725845539f09077035e65dc2d7e577a2860e48f0ce24c5bb1febca27a5dacbaf2d4ff17fa09c835c065d40e7ba093bb1bf029e9ef203388fcb603520446f2a56af734205e9cb05abf78912a19d3e45e1500fa7980ebf12a5d59a042b74e9e46dd595261d110262940a1f2ec95938e61026814b9013f47930577ce88e3fd9d9c48482f06a8cc383f2f9182113fc3143e328fad42827c68320c8d2053bd0e46d9af58c72e086d8b7e8bb986f2d7fa92d78baa357a90cdcba6b3d2bac1ff01c1eadca026946d2d598015ab310bbaff34209940970a79cfd543446d60fbf0e9da525f1f1371f94b9eccd3213d9b22ac2a424aea6e024925da61dc18a5ca6d691a053e9074037ec3dcadb7640d1b154b04512461f949e601aa97b645e79b7f605c5043711f40ff5a1ed3391211473636e19d46073d4b9f76a6445b168a5e7cdcda6f52dbbd113cf4bada3e6e33fb3534e73ea8999a333c0e068ce806e833157eeb2fc42a4e654b8428846ab7e66a70688e977af00880599317e6621ea4b39abf02d9729cb05fb6f34ef7fb3c05a76f7101d523678e20d73d825e0c065107d06b1501d5bb6e77b6ce27e685db5d4070e0014283c65413a05c6175b67a85631af6f2f6268622e46cd00f3a71c6d9ee5d3003d66b981f493ea4bd67bcc03c966938d134439a106951d8661dd16337c3c7338ce23f6ae97aef961e68ef0aa7cea048801fb276e35ce644f2e8b38f766039f7ecb1b871eb0f95e8142fc2ec5b15137f9ad8fca54fb13eed2ac17fac1388ace8042ef75ecbe01510eff0f23e62a53f775e216e99345993c11f65b595cea4c94fa4006e4fed07124af9fd52c2757bffaf374c40727bc5fd3e96dd5f4dbb73e0c33e48b74cc1f9e344ddcc2d5c151052a97caf44c409054edee77a7b3d17ed033e1feb2fb7d48a7284f8a26c91275e5ddfa749f08e7f0afc0fe0310f6f91e3145916e7cd40729d70a9d7b22225f3352d471452c9e42ef5fe4dd8bb31595f5b18a0f40c3756c69095400b67b58167f23c7f39ba34cf64eda7b4166ee965edd869d899a81f64407e5d84c7520d1dc21dabbe8e17aac710ea1f2e14251fb442653f68f05992f19042c60970dd8250a8f8addb6f52d451edcb9a76fea656fda85cab6184adb50de6ab139ee4ecada2abf17f77459de882c458b8c32301e4c4d1f7d70c083d0c96940ece66f67867fa1f8f5c42acf3a966f775fccd6d93be8cb732a6c96b457d28207f6c990a8aaa8c2db69c6b0626c15137cabe14147a3ac4dca4ee7e771c293963faad0ceba7687d52dedb314c9b5b830c140f933aa816dcf4a81c015236decadc6295ca7e0567a6b22b3fc71052a504e0a0f0ebcdefbdcfa79030962e902db4d71e53c1a8ac94b09b749acdc7e3bd8bb4c4e698f13d3e9e05338392ba7b72a4078fde249a92aa5b533271ff1b39d3732cf27da756466e704cef8101ccc78553cfe168cb03e9953df0038ce53ace12161e6d164bb7cd0521074e27e72dc7510ef5cc334a0f4fc9764a86d735c00c55abdb0c3acbcb8cc1e842051b432c2108965651028e05722bc905181ea132fc48196e5d3ac792b0f8190f33846b526e98addf73a13410f5703fd1ff734b4d3ec121032961598f0bfc742b7177f69b94cd3e5cd473449fef91537fdd7e145b027fedac0211e947759c4b72146ee530e4c663845256314976574d225adcf805cd1438dd2b0973993102d6d62bcb86fa767e14ae9db234db78eb35c457c4e53602865ef4f0596e98e72ed37d12eb2bdcb6f4e5e88198a9dcc9c3425e20e79c69e6a05b5401bcdd8e912b77ee619d54635e468364bfbf5825c328d88cc13e5088f8db9b9d92419e2376ff3afb715685afbe598ca77c72c4ebd934e5a137e6c58a3e701e289a94bc2774cd442edec8a61f6dd7c7ec3c11b9e28a1aa93193c705dbb7e04f72fe5fefe9b52ab5799ef03750b37a910c2ab5c39e2c7f8a6208dbfc01e50fc7a8bcde61ab67730218a4efe2ca503ec967cd6eb46a800c6089d6776266460e6fe754b090d0c52ac0c49715b6cf124154054fc0bf24a14284da0db8a630c162cdedc135c61c15b95b3eb6ca9ad5634a943dc249841bf7814d7951bc1cfd09e293085683530574e572bd219cdf292a674e794b92bf0ff00c49ed18df50de03dc7efb4230871405d227f7ca7e40e25263b0d290e9105c8b02607bd82fa2eeb08da9cfd10c41423f10a3933a830ae253ce6eb890470d346aab21cd04bb7d9608162429fa47f0ae41d1f0a27261acd63a4715f9335653f9f1d0e620f1c0db613d3db151d0385a36bebf8cced5d1c4407722d31924b73a665d4f385521ec80ef13c90905392f1e60370b20ff7db46dd75d4a0704c2539c7b455803301a8cb0cd86c5b9afd0844eb33bae72844e759102345000c700a410f341b1be24d3b8e759f70c03371dddf20db54151df16d451440ff3b29a98c55928fa87d7dbb96c46d791f5a508c62b9d0f1562e94cd8cc647b1fa7253d5a2604ae6a9fa8a203a928e8ea73a0b31adca88ad2319fa9b7848ec7c9e8edf21a6ed3ed0e167a502c6baefaa0995817db737718e1ea473f126f99ff77a5f8300928ac3853e03728bb56a376934ac767bce28b47a547ffb1358f8618707eefe9c7a1fc9f794dd536fb2dd3b32f11bdbbde15109ee69426417e2a4e011a7e01d3b5490d16f33c25465340371c138e8317019cad12631731dbecf04288c86b0b3eaffc7ca18a774623386be86286e84e8f3b947b3b530b829950e2a02ad92b8e3ad4ad5945780c78a9c7640c911ea693130946f21accb5cca0f88900ac38096759e5e586e67f70ff589dbcdab5032faeb3752c4895ddf03213f59458ac930e0aa520d4ee90308706c45acb519998cbe1b93060ef06def1480aa6c344c92738273e6b8b3b4eb5964925d7efa3d5afc69b9df6ce7c97452963e00eb4b62ee53b66398f7e1a72cafe4112ba22ede7e81e1c66781003d40131511a033867b587826b5c0d621aabb18cec633566136754167bd3ba9f6522c94f0bb361d7053374458c8d6d9ad6f5abcad3b04aece4d3368f8245cecf7c92e1b1d98aebf94cc94916d7baec8aa6b2a10bc97fe6421920c3e23165fc24f801205612571f9ed3df0929afeebed37b69b94de663bcb9cc4ae96cf09275e244937454092774f0092ca38d0dffff9f920fdcc4e17838d759d641dbc208603c499c10a7c1bce6dad27d2314a8fdc3f33c75fbb3747c45a319205f3bc4a43c68bfbc789503c9207d2b237a26d30d32cded8da6418638f47b26dceeca1965b587f380d2dd11a0537e6f38035fe66494e242f05957cd7b6d4cf3a448e3759c24a1b300d9e3e5818c8d66f75f78edc90775d159fe4c9cc9f4251e066c484dd455fd7456945ea1a6a7f0cc4248e5ee45def83a47faaf079a535e14d19af9c7a79bd668f5996cf5702557c94f59ec05af7b188b290ac9d06bdd0120ccb8b69c6e0c4f5dbe29b77168cf0744ba11c2f6381f3fb258145172bf3ac277fa330909fd8b6b317ff843f384dd06a004ab3f00790400511436f7b686d5831da0f441b6c977d8254530c6823a89b31a9a208cfa83f9a184fc9c58afa8028942ac73204d156f539ca3c78f0d5ccf38004de0a738ad6ab736385d0339f3a23c6bc4150e4be72b4adf92678b2d2e422b6085969821e275a21bcc837b2e1b1184d1bdaef616ed5e25252dac73e107b28537ffd21600091d70d056ee79c02fd0faf89658144eefbac9afb1435424500a5b84a53e8bba325040ef77d0879e3b1847dd1a4ee220030898ce6667f1b09110edbbdae356413747fa526549f9aeac8560da55eda3ffff0e0c4a005a06a3e2f400ac8c3e2e939f6d2207ce9d4618f320cb37d778c8ac8fa357a106a04eb059585d5078c7629977552ffe19ab7edd844839a642ba048103c32fd8e27a723b8fedcfee269840d6684d06e17b9e3ef87e4d8b7b1d9c4f7460c39835f11baa992603da761212f2e7769dca08018e1b630b3cb754e44b8b77c103216bc0db5b7eac0b06ea021580cfd1ba67cd426df6eccbe5ddd8565f779b02ae61a6e112354b8163ff810c87f233d585d13e6781f74e7dff58f214738c79dec53adce49eb748f4fc21b0ddd73e6f38f75d14ede3b5d71c639e172f205d12290da8a3dc6ea9d8aa3b319e8dbe1a94b14acbd227e578818643e4cf962550e2cde781c66a7ce2e5a28cbbbd349babc853173dceeb122d88aae55e78777676c404f42818a20a47cf504bfce3a11579063ba7aa36de1a838ae9ff4d61b5ff339cf51ae74924874b99bdc88360056dbb4643f6e7edcff2b31cf4bb4204e0077787efbccd4e72af82865a584e529b0b515f491553bb0aaa24525a9b9b8a5f6df132e58ea95a9846c40143996069f8431ec7feb16910d341241064d1d4c4af6cf11b39164d07dba6b7493f3f57df991c6dfa51d98c1390c6648a0a278064a0e968c1e15237e43eb8b4cfbce917f34796aaac498b507ce4668717402bbe84ac631915833a88981983d85682b08ae02d2272412a19dd7b5c689611ebaaf1ad4000f6ed81161373938cd728e9b704a11539e2ca4bf07052c58f74b4947d6baa4ca90d32e44975f236200b79c161bfab1ceecc753d79221ad4dd7da2cece54c27e162f3fb7f39eca8f15eae5e844761c00d412d51471a8f746402788ae54d989c9c8dcdb24e823e58863814fc0e8daaf972edf066c2e401f426280ee8fdd7c7aa7a42ecb64f169ad0099aad7b5f405cb26d403563e9adb00dc4405baf5f5cf4a918f5291d8abd1cc1a1e84583790d82da50c58de68a3dfcaaebd02559cc45ce2119f80fd0b9de1698bb804acad764b986071ffcb15c42dd388c504355fbb1a53e44abfee2aeef532f1e286b64bc4df8e5092ba2c53d3f6433510dbec503ed4c7fe927cccfd609fc3517a1036510d1560b58ba919e134c41265355a05d6da2a52398d91a9681d265b11251a26dbedc03c90ab8d41bb3e52f02cb4621bbe864beca6519522694255bb285dcf7b58bf2508f983085d7e9ab445cb604a08714b98db162476e3ac3aa929d591c8e61b71ecb555ac8f0bd67f41de7dc3ffeef7265259e8b9f425fdfbc64999ed9065b9888196a67cfe3f268cc120318df07b86a6ebd40563bc12846a2913700e55dbe8656e6e9e22634eb6db00a6322b4c05364e028ded67909cac3971e0b6dd169d6bf7b4f288d69d4f1067aae49a905bc860492c96c92163888ad2b435350e2ca0d59f3b811775f8d5e1384e432a1f0c1f3a1bddd33d23405ca63f4b1d36be32e68ce05f0995752b553794290194d7e8b50632278348e6217ef6ac7697e10618da30dffc1bf048e8009b4088fea8d41a1f2b93dad9e30a57634399511ab65c9fec5838690401e67436fcc3be2107aefd8006b46043b67f8c708d8f4c2eb1c0096078431d579bf00f43aa96ab7d39b53484d40a561498e181e508672e5259a5ed9e265b0d08bb9fecbbd96be6384ca8319dd69e6c15238de9f9337d9494e75b90ce81cd55ea582e4888339155dc188e8771e93fa12243dcf646159e302513c5ebeaf35731551e9eb5b12b98292adf21ef96dd0c8ea6c2fc926a8ad0e30d0e96ae45a811ce555f03fb54bf95e011091f7238cd317252d17620a01160832d7daeba9e147b57aacd83d861b781662d23b210e0bc4fa3599dd6b7942b3ba1fca9cf76f60169c587f627596db6a5b31b7c96b49f6009adc77fc185addf0a473db14f9f5fd040c4185bcc75efa55a512f08021a178731b4c693607854f303c1d9414e68df05613e5e5b21ebd863f6b7d6f07562abdfb5e3f7cca8a380707fb3c2f7951401d60b292eacf17377eaf19d4fa6798e5ee80896166943cc99fd8dd55470490e46f9279dab77e969c5a82de3512d7df159807124e4181d0565ff8a81dc405c5ed63399c3e4d00495be1e3e79da01602efa175c5cdbd6c902f50f6b84fd7f9d8403ab738e5c61323a28d70285c58a1ad10589b584cdb3d151fa44b66a56f2b8532ba64427d003d11b42f3e1da7e76e30f81bc84eacc6b4c71ba8d73eb92f06af6f5056ca8c4032d91c699a53a22168c0be4d540bac20f57bb9cd53b29dfb9b1a16b5f1efef26b2a8121f56cd0e8baa65201954635e278d2d76efb42eb16a396707f4503c65fdce754c33707dcd37e405bded5f1ec59f34abe760c07cd8d19f4b0f4210e109edd19a22e131893c59725109fa68f1f187629c14894dae7dc9e7fa51f70f67c9438984357b40305c0841dc612b67822917a4728f0a6b8a4caeb007d548137135a32ee2952274cf8e41be23aecd9faa413dfbef287cf33c017f943449e6a2c7f7178c7c2729f670d97b442be5435d3c05d437006a00b9c1fb2eac3c3a68b18be1d2471085e1084e254e3afd8505ae0f93bddd704772adaa9fd2222cda32a0112f303e56a80ceb2f046d8f1c46cdb095893f4f8b00bd4bf57e14c38ee1995e60559e2acefca787b7ae86d95df31eb6714779e101b202bc1440a50e09fa87ddaa833c86afcd05834715e928c612a6d84ad6cc81fd5988c8322ae15873faec742b541090696b0a6f78d022f53a4e10a3f0ef38a869473d0a0e5bf2918215fd07faa7084149130fc02ddc5f0d652e32e0473d9918fc3db986cf7c02282e27e995bf034c6df018ac80d1d002ed0dbc56e0a0f34ed0e10de882c638d9a7d570a61990edd431b96c45b38d43051ff377f2a9dfd40d8045841e797561cf698b29908aee2f8b7c45465ed2e70c2f137c98511993018dd02b4d2b9bb9a48c215c92888915cf61881498926f6f4fed5cc89cca67e25a4840c9b00b947251b910c2c07220df2e0fed54566d082e1535643b8dbf2f0ee4a5eb8afb684d3f0cfee30a8a8bb93290c6f6a23ee2809b4c044190afb061a51e19aeca3f7bfa20b13b4d1460265d6952052bc372723a378999b3331126d02c5718b7223a5d2a5701076167b82915bc0dd81d6b289dc00fae158677e60d90759cf4e4b3c8f1e4e21828a055dff4d9cd4592956dba9b2bdf3f3554eb0b71c0022138873d82f093ba6850c2f1de2dd49f0e884e7b2c38c579a1cc201c10466cb6198479ecbd145a987a66d1ecffa2718a17d4a49de62c102a485beac1cf010fd0ccd30d0e82d93ee34fbd2955acff770fd3196ddb53e6e7d3ac82f44e308aaf557720c26ebbde1e8c25bd57697262254f105dc428f926dda217e0a860c5ca4de73f6a26361c53d8e9201bf577696527c28f7f74c4691f84e3f46807d831f054fa89ef0ac40e0252f59e307528b7e2434ea3fa536175e81ca194a84d10afa5f751356b8bb7926cfc513932421f5297292335425253c100a36b4f7f41f9efe818cc136b08641bf96ea5a7c67039847a52262703d3c54acee2f9932706b77789f2256e8f0893bb441ec82689534128d0c6fc3bd1d4630cc13ac561179408a24cd1499e4317dac59f1ab8c0012246afe0bd7daf4fd5d480b786569a14af44d70e7465d3a95fc77780f1b43ec52cc6512eabd06fd1cbd5f251923944abd0febc4c37560d629f4e4a82f825055242bf9cddd8f300684fbbde5d0df9de8d2cc89e6ced23e026dbfdcca8b5b0c221ca818b2fd99011b32814ab470d8308cf9addb90812707cce76490a7173b7e76728bb3eaacf77979c7288a5d21f91d30e1e77ac2d62d373c4b7b5213b54f125c6d2bf4c49c42724e68071b1fac9d382e4543ce541e1a8d3ef70a7544837cd1e6a674816fa3923bb183d1aeb909193efc79d1aae2a765ab119e35c00d42abf60f28ead5d8151e4af4237ac3c42d2948d1f0c13164f1b86d0166527e1679f9993287d3ac0be856b773ea5613fc373d04699193dae0da1d40fd10aaea3fb974014ec7633ee70635fe9aa9b56e9820e36b965dd713b2b7f919209982705ed97a572b26c404a27f4b62312b162d581e4a7ff8ab837766e79687ffa76be0c36565e488cc66633c31865552d8108c724638e9fdd2d7344c53ed8385d23401dba576d8178a5d2dad2398b8e7f4e08e64cf43b8d0429dfc91223ad74c5fc67ae8169b0c5baea75988df07f3f8f98eeb530afa6cf0b1b9bd2633616c15ca9aaf67aacc1e9dc1bcb76dabc26970f9ca77258d49381f8123729ed0e2b485fae59b6ef1213135d0622e4a63f3a9b1576b90cbfc38b70fd74f908f6921033550b5a0b848c40e9f6bb143134142d3fce78fae4fab9eaf1aede529fd591fe99a2d226d6da3fd995f2ea24a836ed6acfcfedf97ada8f6f3745085ff27c650c433310699cd8c662e758ee6264cf0a9e21d55053bb8428f8bbb7b78fb2f5673e628ed1dcdb3a2f3c1ee8213088dd1b82611d08d56b088ba5c527f1b81d1b4220b77e26f5be1f9340251a5f7b22cf5e4fa7d33ce17be24bd6f0b0bbfc4ca1f95174280f88b6ff542743e704c9299d989cbdd4622cfe8088fdbf5c96eddf3a9c18c20585eeaf045693c40f7c9a95a00e36821dce084dbe2eb29df60e46dc1ced4e96e72881710bbd1039ea591a3013751361f7863ec9b480e982d71e18d3d0994cb7bb4557e48f7e761e4a17bac0ca45b1cb6b8b4ff75994002ffbe0c3a37c3e81418506721f31326c3ed483ccd90ab651d3e398f4fc90e5fc21cca50474c19dd814d363bcdb3f60f6d5aaf2db85299c6a4631ce78848e2bda53a996099d9e72a2a9598c73aaec18b6031c58dd0fbfd137791cb2c932a95e499d4134d62c1369efb39c792904dd3929dba40e3bc8a578564b69145e9a23cd028f199f6a484a4a9b463dfac40d9bcf3124edfd20eae95565607284a2c73550384882be9b1597e28f8bef223a2856245f623f3c8e1385a257bab4212dc4d71e44ca0cf6654b70941a2351130bb9d8148b187f95f919a95c8b8a4f8e4ad3525b88e85a9b060c7e4e5e9dd241a107b70c9099eebac498433d4893e1c1b6cf9ee97250f2cc28dee05486cd8729277df4439978288997ae12ac51fb23babd7ac69663b94c07529bb0fce02c9aa25aa34452e4033b1cbadd767cb53e9ecc49ad71c6360d2969c492b9d12ae62aa1c2970c92b382371af32157d1ed89765be510e181035ba20dde5daff03f9cc690ed30397f179b64d734cb4cc76d7e6da90edbde9e41114d57636da72f3f41adb25a9703ecfec57bc05af68cec70e152b6f2b067b14ecfdcaa6eb66c1826d0416cbf2385f175e00a5d1c3eb2907fc66b654ef6778695ee170dc96e5dc8fad0dca10af1ea3fedd58741f662672a3fa0de58c6bfbe260a83ae0ed35d76cda48964d10b0f0ced4ea5ea2eb4a6aead8d9f199666d18215d0f828c441eace63a719a6b78b05aa7fe8b2747fd38c2790f54b887a157f0cfcb997e16289f2ba2edfc02a97a6044b2f0a442d63cd8a9a77cc8bc449d90ef688b364c002cc73cd4c2e2463620d61c65ee8139f124dd81245442c71222f25f2ab369c4d44448da1f8b35eca6b686b739d33af8d8dda46aa98f4cc28e61cade2cd4cb60c7f610441a7fd44fdae80882f7605bda94421b5085507f176c8782eb0cef1407a53cd8dbf1dd1d249f92d628fd2dcac2b79a7a2473a50f1e1ba05a0a0d67ee454dc4f077acc957276d3a4cd357c78e9dd410fb1520ace98217fdef010f4d00f9830d66f35ae2ac15ddd093c7cd49326906c2f9a67497cace410540c5568927473ff69c8c325eea5b2662c8896315276d579c1a9b7511d427c6f90dd441c224b2540c4f47d9fc2d9f8b38f9ee3a341a2bd2e4ee404187efa8a8832273838c4e98560c3ffcdd8c1279890c9b15b84938c579a6ce8ceb26fa21c41b7e4dc3f81a3578405025731bc016bd23994826030671aaa7a6a816281b8f0c51d80bb78d649fbd947c261c1f15e3179d95daa1c4bbbabacde9ead58da5f8284ac473b96dbe83a4aa25b19cfc124cf4b83a6614f3558ef2c4c12d583e89cacc770485393377a6d1b525bc290f3864da03d49f58cbd8b0ba8ec11a45c30b3be22bfcd1413186a8418c6ae5a92af280e1e90b09827fdd35f8c43722fa0754851fe9bd997abc3debacde7bfd1d3b20017fbad5c3da655ee1b713acc0df4faa35beb56a6257e1f37977ba5f4e85e9c700302d3a78b34a8126dafc745d462e857d50c1f0a67e595482e9bd1e7f14425ba9aba14954d7b20ec69b987ccad57bacde156a59f0b1a5e90f79e5110b39abd9bbf991949358e85fa3e6a124c5ca809403f27826bbf04acc480c6438281a1acf406e3fa179f24bd22c9e81bcf3de4d73eb60e912dba0ddf873c83aaaddded92df82a32aca5ca9da8fdf18ce26acfa053dd08c371fa6d3da2014bd955bb773825fb51cd3346b3da5e5031f7ba6e6ea6d2d0f1cc813216071ca854fdeb67ce283dc6a8573de7f78f967f31c5ee3281543b8b6f60e06106e153a2d24b5700f5430e7c31ff37576e2e3bfb45f1e84bf3777104e9cd46a96ef3a58721bbd1b1864ea92dc7b4fb8836598db45062d4ec90b49e60af3489ead16ba10e262bb0bd1af9832b71a4e8ddbf03b51d9434c2a1637366879ee7377d8df440dd0b8c631f3cced20dfb902b9e141f1f232f2c5bb40375820df1fd61a3042851b19aaf0858fd60ec332a2ebf2ff4091f19c6e03acd791ea0ae0c00dd8ee23af88ac9537c36ec573e9171d7dbee6e235b98654b22a9939599a1ab3bfd4b7df124772e6a49370dc6bdec2b0a3cb3d947e7711937933b812ac94b643864f0c14b1e16ae889cb7fc7607e71ce60c5c6f326959813dfbe494d3a12afb303fd4b561921d47be4ffa3c791adc877cd1adc3806686603e30208f5d547bf2d12690d2854368c733a043cb1c57c22c9c2875d57e8b22143a7382c6b85b0311abd177cd082bde8b40ea8e42168e12c44c8d6a78541122d4ac81c4478489cf1c8f071222fb964fb32b954501113584d88c9c262eb7ceaf7653daee8fc428ae6b08988507836eb8b1fb0ab6dfc5152bb4e2303fe699cf0a88f9a18ada53322dc573c8e09083ad766695530953d17f750787652b83d26e6fc51234e565998c5de95f307deaeb0aa73648cda749cda68e2775333e8a13472124dc4609db59f72af61738c99e1001fad59e6689c971b3a265a50ff50249c5db8723366617fdf48e6f5c54d54cef9153e9629548900a138ead969a97488da3979685ddb27c0c8d1b0d8dabad4a0bda4de6ab54cc31d12a09ab4e0dfd82b8d4ccf249922961b94932e8a5cf9f5f0a280456deceb1efedebef625a785c2db5cea499f53d94cc398ce9eb99652960280e6110a2eed44d1fc903e06ff00fc17f1635b8e41eb74386b70686802fdb0b6c1c7fb83ec0423c0a1ad92982a941cec4cc48a3cb0b14575774d3df03c986179a91477059881be2736a7ca9c343fda6ac5476f3e9b186aed57e5e7f1b2c8e724ecb968d3802200ee6ae35fa0021501b497da4ed1a7bc1811491d1d84437b871970102188889d41d44ea468e0b093b7ca0068250bf9665f50218d400fb37e9d7a383420b81c155d00b3b7e057f106910a60e08bfc7bdaa65c2e0b11895fc3a2adc96ce4c7031ee0b3eea1920b0e0ab1dba804843289c1918767178a254599d24ab572140d852552affa7e0dc7278e6505c66c63bbd5a25d4d4b11380d8e484b914eca5f907b93c46d8fbb2140382d3899cdcf59bafa57aeff23fd7335cb74e69f34cf71b573c23b6d79a9f0c86787af8cd787c321afd5a3e64a04408b2d6f5943035b5c4656bad6b3dbe68cc401b8fb07e147bf9e698ec5c17f2f01e25ffd8437cca30e3c0c5a9daaa8d5b8d362088541adc2a74e8ecec30de71c6a2e94550e85728e77ff193e4d0ef6124d65b3917e2ab770a8d1acaeefe90a2032a808fe81a17b96d68f9d9471f66278854944751d919054bac0d162c560022f62fd062ef611c246ea22ae80f1cfe185615e20d3096157d4b7a61bc8f78646ea175dbc78caaaee4f216761b263c32b820c038c9ab060ff8b1f547eb8f9bc44c6ccb69d89023926f6a4288a0272ef0491d8f2f6470d5c71164d82d15802abd14179be2e1649cdf7119cf26a77dfd0aa1832df6d0da0a9c4b7019cd184cd994174f7c41e940fb9a58a39f8a604dc4ecf70c886ab3a7d8aebbe8d87a6cf7d7613bcc7c6c02c1b762b2803f7958a1275c1d4bd720708d2e8c84d1e767fb7a0abdea0a323fdd3a7c2cf775e8b0d068b2d77df2c0aa54fa4b803495a99b579fb9c6ef86a50e89db3f5154872cd57186be8f3d9633cf95ded40c500f0d6a3fc6d7434ca4501287960198e395edaa45305cf8d69902e5f219aaad9b852fd6dedb595ed5d76139365a282882d127ec868038374dfdd24d23bd9fae99c9478bc4fdea482d7281d310d526584321af5458372fde59e78042a834e81e82ac5e12fba065dae12da45b4daea616fe59c4234bdc65b73e4b57fabf5b186d5c6ead0f1999b62f0f3ce32a3968ea1051e6635a541e1aefb9c15760e2e15b447fd7c5ed4ea29c01ff3667fbe9f54a8603a4305a3876e6028bb921531a0d1fc3e6e9f781168ed2475da1af9870f9c00499dceb4f6e4189d696503fe7060799fa3a2553faadd2b4f64c7cb8b33072fded4876c7fcf04a3ec59e50b4d6ab1b5277fa6dbb44fc877a0ffc269e4e389ab097c655ee6f69901c7b1f48d490c69ff0425ee8d8428ce68213c485db4785db65844097f028bf3517f8a12ea2a1c7d6265d04cc6e15848822f9c5c42041d873ec7681d6be8592ed45b88316da9692fad9de192751fbb46b42a84695ad4d6dc3c16a88777c7ec6584b6ed53b3327b3aad4acf24449f615953402c84ec6e5c964c9099bc5e6ba86e88227bf62e31e80046cff777885f7af8be4fe6340cb21b44f8900d7dd56cc022bb935905389cc2b5c8dd897afd245785f3c180609a20cb7a8ca4bcad82ac20ca4e121aeda32db6c6b0d09dee36ee6efb040bcc987dd39e5817fe0ca4a5da2c1e07dfb83a9fcda8d645</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">主页支付宝转账5元，并留言文章标题获取密码！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinctrl子系统</title>
      <link href="/2023/10/17/Pinctrl%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/17/Pinctrl%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Pinctrl子系统使用示例"><a href="#一、Pinctrl子系统使用示例" class="headerlink" title="一、Pinctrl子系统使用示例"></a>一、Pinctrl子系统使用示例</h1><h2 id="1-1-要做什么"><a href="#1-1-要做什么" class="headerlink" title="1.1 要做什么"></a>1.1 要做什么</h2><p><img src="1.1_i2c_example.png" alt="1.1_i2c_example"></p><ul><li>查看原理图确定使用哪些引脚：比如pinA、pinB</li><li>生成pincontroller设备树信息<ul><li>选择功能：比如把pinA配置为I2C_SCL、把pinB配置为I2C_SDA</li><li>配置：比如把pinA、pinB配置为open drain</li></ul></li><li>使用pincontroller设备树信息：比如在i2c节点里定义”pinctrl-names”、”pinctrl-0”</li></ul><h2 id="1-2-pincontroller设备树"><a href="#1-2-pincontroller设备树" class="headerlink" title="1.2 pincontroller设备树"></a>1.2 pincontroller设备树</h2><p>生成pincontroller设备树信息，有3中方法：</p><ul><li>有些芯片有图形化的工具，可以点点鼠标就可以配置引脚信息，得到pincontroller中的信息</li><li>有些芯片，只能看厂家给的设备树文档或者参考设备树的例子</li><li>最差的就是需要阅读驱动代码才能构造设备树信息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&amp;iomuxc &#123;</span><br><span class="line">    pinctrl-names = &quot;default&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;BOARD_InitPins&gt;;</span><br><span class="line">    imx6ull-board &#123;</span><br><span class="line">        i2c1_pins: i2c1_pins &#123;</span><br><span class="line">            fsl,pins = &lt;</span><br><span class="line">                MX6UL_PAD_UART4_RX_DATA__I2C1_SDA          0x000018B0</span><br><span class="line">                MX6UL_PAD_UART4_TX_DATA__I2C1_SCL          0x000018B0</span><br><span class="line">            &gt;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-3-client节点使用pincontroller"><a href="#1-3-client节点使用pincontroller" class="headerlink" title="1.3 client节点使用pincontroller"></a>1.3 client节点使用pincontroller</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;i2c1 &#123;</span><br><span class="line">    clock-frequency = &lt;100000&gt;;</span><br><span class="line">    pinctrl-names = &quot;default&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;i2c1_pins&gt;;</span><br><span class="line">    status = &quot;okay&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1-4-使用过程"><a href="#1-4-使用过程" class="headerlink" title="1.4 使用过程"></a>1.4 使用过程</h2><p>设备驱动基本不用关心流程。当设备切换状态时，对应的pinctrl就会被调用。</p><p>比如在platform_device和platform_driver的probe过程中，流程如下：</p><p><img src="1.4_pinctrl_really_probe.png" alt="1.4_pinctrl_really_probe"></p><h1 id="二、Pinctrl子系统主要数据结构"><a href="#二、Pinctrl子系统主要数据结构" class="headerlink" title="二、Pinctrl子系统主要数据结构"></a>二、Pinctrl子系统主要数据结构</h1><h2 id="2-1-设备树"><a href="#2-1-设备树" class="headerlink" title="2.1 设备树"></a>2.1 设备树</h2><p>理想模型：</p><p><img src="2.1_pinctrl_dts_modules.png" alt="2.1_pinctrl_dts_modules"></p><p>实际的例子(imx6ull)：</p><p><img src="2.1_pinctrl_dts_imx6ull.png" alt="2.1_pinctrl_dts_imx6ull"></p><h2 id="2-2-pincontroller的数据结构"><a href="#2-2-pincontroller的数据结构" class="headerlink" title="2.2 pincontroller的数据结构"></a>2.2 pincontroller的数据结构</h2><p>记住pinctrl的三大作用，有助于理解所涉及的数据结构：</p><ol><li>引脚枚举与命名(Enumerating and naming)</li><li>引脚复用(Multiplexing)：比如用作GPIO、I2C或其他功能</li><li>引脚配置(Configuration)：比如上拉、下拉、open drain、驱动强度等</li></ol><h3 id="2-2-1-pinctrl-desc和pinctrl-dev"><a href="#2-2-1-pinctrl-desc和pinctrl-dev" class="headerlink" title="2.2.1 pinctrl_desc和pinctrl_dev"></a>2.2.1 pinctrl_desc和pinctrl_dev</h3><p>pincontroller虽然是一个软件的概念，但是它也用一个结构体来表示：pinctrl_dev。</p><p>怎么构造出pinctrl_dev？我们只需要描述它：提供一个pinctrl_desc，然后调用pinctrl_register就可以：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> pinctrl_dev *<span class="title function_">pinctrl_register</span><span class="params">(<span class="keyword">struct</span> pinctrl_desc *pctldesc, <span class="keyword">struct</span> device *dev, <span class="type">void</span> *driver_data)</span>;</span><br></pre></td></tr></table></figure><p>怎么使用pinctrl_desc、pinctrl_dev来描述一个pincontroller？这两个结构体定义如下：</p><p><img src="2.2.1_pinctrl_desc_and_pinctrl_dev.png" alt="2.2.1_pinctrl_desc_and_pinctrl_dev"></p><p>pinctrl_desc示例如下：</p><p><img src="2.2.1_pinctrl_desc_example.png" alt="2.2.1_pinctrl_desc_example"></p><h3 id="2-2-2-作用1：引脚枚举与命名"><a href="#2-2-2-作用1：引脚枚举与命名" class="headerlink" title="2.2.2 作用1：引脚枚举与命名"></a>2.2.2 作用1：引脚枚举与命名</h3><p>分为2部分：</p><ul><li>描述、获得单个引脚的信息</li><li>描述、获得某组引脚的信息</li></ul><p><img src="2.2.2_pinctrl_driver_1_pin_and_group.png" alt="2.2.2_pinctrl_driver_1_pin_and_group"></p><p>使用结构体pinctrl_pin_desc来描述一个引脚，一个pincontroller有多个引脚：</p><p><img src="2.2.2_pinctrl_pin_desc.png" alt="2.2.2_pinctrl_pin_desc"></p><p>单个pins 的信息在 imx6ull 是代码写死的，info中的pins是在pincontroller构造时赋值的，后文有分析。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imx_pinctrl_desc-&gt;pins  = info-&gt;pins;</span><br><span class="line">imx_pinctrl_desc-&gt;npins = info-&gt;npins;</span><br></pre></td></tr></table></figure><p><img src="2.2.2.png" alt="2.2.2"></p><p>使用pinctrl_ops来操作引脚，主要功能有二：</p><ol><li>取出某组的引脚的信息：get_groups_count、get_group_pins</li><li>处理设备树中pin controller中的某个节点：client pinctrl端回调pincontroller端的dt_node_to_map，把device_node转换为一系列的pinctrl_map</li></ol><p><img src="2.2.2_pinctrl_ops.png" alt="2.2.2_pinctrl_ops"></p><h3 id="2-2-3-作用2：引脚复用"><a href="#2-2-3-作用2：引脚复用" class="headerlink" title="2.2.3 作用2：引脚复用"></a>2.2.3 作用2：引脚复用</h3><p>用来把某组引脚(group)复用为某个功能(function)。</p><p><img src="2.2.3_pinmux_ops.png" alt="2.2.3_pinmux_ops"></p><h3 id="2-2-4-作用3：引脚配置"><a href="#2-2-4-作用3：引脚配置" class="headerlink" title="2.2.4 作用3：引脚配置"></a>2.2.4 作用3：引脚配置</h3><p>用来配置某个引脚(pin)或某组引脚(group)。</p><p><img src="2.2.4_pinconf_ops.png" alt="2.2.4_pinconf_ops"></p><h3 id="2-2-5-pinctrl-desc注册得到pinctrl-dev"><a href="#2-2-5-pinctrl-desc注册得到pinctrl-dev" class="headerlink" title="2.2.5 pinctrl_desc注册得到pinctrl_dev"></a>2.2.5 pinctrl_desc注册得到pinctrl_dev</h3><p>调用devm_pinctrl_register或pinctrl_register，就可以根据pinctrl_desc构造出pinctrl_dev，并且把pinctrl_dev放入链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">devm_pinctrl_register</span><br><span class="line">    pinctrl_register</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_dev</span> *<span class="title">pctldev</span>;</span></span><br><span class="line">pctldev = kzalloc(<span class="keyword">sizeof</span>(*pctldev), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">pctldev-&gt;owner = pctldesc-&gt;owner;</span><br><span class="line">pctldev-&gt;desc = pctldesc;</span><br><span class="line">pctldev-&gt;driver_data = driver_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check core ops for sanity */</span></span><br><span class="line">ret = pinctrl_check_ops(pctldev);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we&#x27;re implementing pinmuxing, check the ops for sanity */</span></span><br><span class="line">ret = pinmux_check_ops(pctldev);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* If we&#x27;re implementing pinconfig, check the ops for sanity */</span></span><br><span class="line">ret = pinconf_check_ops(pctldev);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Register all the pins */</span></span><br><span class="line">ret = pinctrl_register_pins(pctldev, pctldesc-&gt;pins, pctldesc-&gt;npins);</span><br><span class="line"></span><br><span class="line">list_add_tail(&amp;pctldev-&gt;node, &amp;pinctrldev_list);</span><br></pre></td></tr></table></figure><h2 id="2-3-client的数据结构"><a href="#2-3-client的数据结构" class="headerlink" title="2.3 client的数据结构"></a>2.3 client的数据结构</h2><p>在设备树中，使用pinctrl时格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* For a client device requiring named states */</span><br><span class="line">device &#123;</span><br><span class="line">    pinctrl-names = &quot;active&quot;, &quot;idle&quot;;</span><br><span class="line">    pinctrl-0 = &lt;&amp;state_0_node_a&gt;;</span><br><span class="line">    pinctrl-1 = &lt;&amp;state_1_node_a &amp;state_1_node_b&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设备节点要么被转换为platform_device，或者其他结构体(比如i2c_client)，但是里面都会有一个device结构体，比如：</p><p><img src="2.3.0_pinctrl_in_device.png" alt="2.3.0_pinctrl_in_device"></p><h3 id="2-3-1-dev-pin-info"><a href="#2-3-1-dev-pin-info" class="headerlink" title="2.3.1 dev_pin_info"></a>2.3.1 dev_pin_info</h3><p>每个device结构体里都有一个dev_pin_info结构体，用来保存设备的pinctrl信息：</p><p><img src="2.3.1_dev_pin_info.png" alt="2.3.1_dev_pin_info"></p><h3 id="2-3-2-pinctrl"><a href="#2-3-2-pinctrl" class="headerlink" title="2.3.2 pinctrl"></a>2.3.2 pinctrl</h3><p>假设芯片上有多个pincontroller，那么这个设备使用哪个pincontroller？这需要通过设备树来确定：</p><ul><li>分析设备树，找到pincontroller</li><li>对于每个状态，比如default、init，去分析pincontroller中的设备树节点<ul><li>使用pincontroller的pinctrl_ops.dt_node_to_map来处理设备树的pinctrl节点信息，得到一系列的pinctrl_map</li><li>这些pinctrl_map放在pinctrl.dt_maps链表中</li><li>每个pinctrl_map都被转换为pinctrl_setting，放在对应的pinctrl_state.settings链表中</li></ul></li></ul><p><img src="2.3.2_pinctrl_maps.png" alt="2.3.2_pinctrl_maps"></p><h3 id="2-3-3-pinctrl-map和pinctrl-setting"><a href="#2-3-3-pinctrl-map和pinctrl-setting" class="headerlink" title="2.3.3 pinctrl_map和pinctrl_setting"></a>2.3.3 pinctrl_map和pinctrl_setting</h3><p>设备引用pincontroller中的某个节点时，这个节点会被转换为一些列的pinctrl_map：</p><ul><li>转换为多少个pinctrl_map，完全由具体的驱动决定</li><li>每个pinctrl_map，又被转换为一个pinctrl_setting，里面保存有引脚的mux和config</li><li>举例，设备节点里有：<code>pinctrl-0 = &lt;&amp;state_0_node_a&gt;</code><ul><li>pinctrl-0对应一个状态，会得到一个pinctrl_state</li><li>state_0_node_a节点被解析为一系列的pinctrl_map</li><li>这一系列的pinctrl_map被转换为一系列的pinctrl_setting</li><li>这些pinctrl_setting被放入pinctrl_state的settings链表</li></ul></li></ul><p><img src="2.3.3_dt_to_map.png" alt="2.3.3_dt_to_map"></p><h3 id="2-3-4-使用pinctrl-setting"><a href="#2-3-4-使用pinctrl-setting" class="headerlink" title="2.3.4 使用pinctrl_setting"></a>2.3.4 使用pinctrl_setting</h3><p>调用过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">really_probe</span><br><span class="line">pinctrl_bind_pins</span><br><span class="line">pinctrl_select_state</span><br><span class="line"><span class="comment">/* Apply all the settings for the new state */</span></span><br><span class="line">list_for_each_entry(setting, &amp;state-&gt;settings, node) &#123;</span><br><span class="line"><span class="keyword">switch</span> (setting-&gt;type) &#123;</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_MUX_GROUP:</span><br><span class="line">ret = pinmux_enable_setting(setting);</span><br><span class="line">ret = ops-&gt;set_mux(...);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_CONFIGS_PIN:</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_CONFIGS_GROUP:</span><br><span class="line">ret = pinconf_apply_setting(setting);</span><br><span class="line">ret = ops-&gt;pin_config_group_set(...);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">ret = -EINVAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="2.3.4_apply_setting.png" alt="2.3.4_apply_setting"></p><h1 id="三、Pincontroller构造情景分析"><a href="#三、Pincontroller构造情景分析" class="headerlink" title="三、Pincontroller构造情景分析"></a>三、Pincontroller构造情景分析</h1><h2 id="3-1-整体执行流程"><a href="#3-1-整体执行流程" class="headerlink" title="3.1 整体执行流程"></a>3.1 整体执行流程</h2><p>驱动程序位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drivers\pinctrl\freescale\pinctrl-imx6ul.c</span><br><span class="line">drivers\pinctrl\freescale\pinctrl-imx.c</span><br></pre></td></tr></table></figure><p>调用过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">imx6ul_pinctrl_probe</span><br><span class="line">    <span class="title function_">imx_pinctrl_probe</span><span class="params">(pdev, pinctrl_info)</span>;</span><br><span class="line">        imx_pinctrl_desc-&gt;name = dev_name(&amp;pdev-&gt;dev);</span><br><span class="line">        imx_pinctrl_desc-&gt;pins = info-&gt;pins;</span><br><span class="line">        imx_pinctrl_desc-&gt;npins = info-&gt;npins;</span><br><span class="line">        imx_pinctrl_desc-&gt;pctlops = &amp;imx_pctrl_ops;</span><br><span class="line">        imx_pinctrl_desc-&gt;pmxops = &amp;imx_pmx_ops;</span><br><span class="line">        imx_pinctrl_desc-&gt;confops = &amp;imx_pinconf_ops;</span><br><span class="line">        imx_pinctrl_desc-&gt;owner = THIS_MODULE;</span><br><span class="line"></span><br><span class="line">        ret = imx_pinctrl_probe_dt(pdev, info);</span><br><span class="line"></span><br><span class="line">        ipctl-&gt;pctl = devm_pinctrl_register(&amp;pdev-&gt;dev, imx_pinctrl_desc, ipctl);</span><br></pre></td></tr></table></figure><h2 id="3-2-构造pinctrl-desc"><a href="#3-2-构造pinctrl-desc" class="headerlink" title="3.2 构造pinctrl_desc"></a>3.2 构造pinctrl_desc</h2><p>pincontroller的最终目的：提供一个pinctrl_desc，然后调用pinctrl_register注册。所以我们要完善pinctrl_desc。</p><ol><li>引脚枚举与命名（单个引脚）：info的pins在imx6ull是代码写死的：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[root@qing:/sys/kernel/debug/pinctrl/20e0000.iomuxc]# cat pins</span></span><br><span class="line">imx_pinctrl_probe(<span class="keyword">struct</span> platform_device *pdev, <span class="keyword">struct</span> imx_pinctrl_soc_info *info)</span><br><span class="line">imx_pinctrl_desc-&gt;pins  = info-&gt;pins;</span><br><span class="line">imx_pinctrl_desc-&gt;npins = info-&gt;npins;</span><br></pre></td></tr></table></figure><p><img src="3.2.0.png" alt="3.2.0"></p><ol start="2"><li>引脚枚举与命名（某组引脚）：某组功能中有哪些引脚？这要解析设备树，由imx_pinctrl_probe_dt函数解析设备树后放在imx_pinctrl_soc_info结构体中作为私有数据传入注册。具体解析流程省略，调用如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[root@qing:/sys/kernel/debug/pinctrl/20e0000.iomuxc]# cat pingroups</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">imx_pinctrl_probe_dt</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev, <span class="keyword">struct</span> imx_pinctrl_soc_info *info)</span></span><br></pre></td></tr></table></figure><p><img src="3.2.1.png" alt="3.2.1"></p><p>imx_pinctrl_soc_info：</p><p><img src="3.2.2.png" alt="3.2.2"></p><p>imx_pin_group：存放各组信息</p><p><img src="3.2.3.png" alt="3.2.3"></p><p>imx_pin：存放各组引脚信息，reg addr，reg val</p><p><img src="3.2.4.png" alt="3.2.4"></p><ol start="3"><li>引脚复用、引脚配置、client端回调获取引脚组信息和设备树引脚节点转换成map<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">imx_pinctrl_desc-&gt;pctlops = &amp;imx_pctrl_ops; <span class="comment">//client端回调</span></span><br><span class="line">imx_pinctrl_desc-&gt;pmxops = &amp;imx_pmx_ops; <span class="comment">//引脚复用</span></span><br><span class="line">imx_pinctrl_desc-&gt;confops = &amp;imx_pinconf_ops; <span class="comment">//引脚配置</span></span><br></pre></td></tr></table></figure></li></ol><p>整体框图如下：</p><p><img src="3.2.5.png" alt="3.2.5"></p><h1 id="四、client-pinctrl构造情景分析"><a href="#四、client-pinctrl构造情景分析" class="headerlink" title="四、client pinctrl构造情景分析"></a>四、client pinctrl构造情景分析</h1><p>client pinctrl的整体流程：</p><ol><li>设备树转换为pinctrl_map；使用pincontroller的pinctrl_ops.dt_node_to_map来处理设备pinctrl节点信息，得到一系列的pinctrl_map。</li><li>pinctrl_map转换为pinctrl_setting；每个pinctrl_map被转换为pinctrl_setting，里面保存有引脚的mux和config。</li><li>切换state；在platform_device和platform_driver的设备probe过程前，也即really_probe中使用pincontroller相关ops函数，将引脚的pinctrl_setting都进行设置。</li></ol><p>第三点切换state的调用流程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">really_probe</span><br><span class="line">pinctrl_bind_pins</span><br><span class="line">pinctrl_select_state</span><br><span class="line"><span class="comment">/* Apply all the settings for the new state */</span></span><br><span class="line">list_for_each_entry(setting, &amp;state-&gt;settings, node) &#123;</span><br><span class="line"><span class="keyword">switch</span> (setting-&gt;type) &#123;</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_MUX_GROUP:</span><br><span class="line">ret = pinmux_enable_setting(setting);</span><br><span class="line">ret = ops-&gt;set_mux(...);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_CONFIGS_PIN:</span><br><span class="line"><span class="keyword">case</span> PIN_MAP_TYPE_CONFIGS_GROUP:</span><br><span class="line">ret = pinconf_apply_setting(setting);</span><br><span class="line">ret = ops-&gt;pin_config_group_set(...);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结如下图：</p><p><img src="4.0.png" alt="4.0"></p><h1 id="五、编写虚拟的pinctrl子系统"><a href="#五、编写虚拟的pinctrl子系统" class="headerlink" title="五、编写虚拟的pinctrl子系统"></a>五、编写虚拟的pinctrl子系统</h1><h2 id="5-1-整体步骤"><a href="#5-1-整体步骤" class="headerlink" title="5.1 整体步骤"></a>5.1 整体步骤</h2><ul><li>pin controller：<ul><li>创建设备树节点</li><li>编写驱动程序</li></ul></li><li>测试：<ul><li>创建client设备树节点</li><li>编写驱动程序</li></ul></li></ul><h2 id="5-2-硬件功能"><a href="#5-2-硬件功能" class="headerlink" title="5.2 硬件功能"></a>5.2 硬件功能</h2><p>假设这个虚拟的pin controller有4个引脚：</p><ul><li>pin0,1,2,3都可以配置为GPIO功能</li><li>pin0,1还可以配置为I2C功能</li><li>pin2,3还可以配置为UART功能</li></ul><p><img src="1.1_i2c_example.png" alt="1.1_i2c_example"></p><h2 id="5-3-编写设备树"><a href="#5-3-编写设备树" class="headerlink" title="5.3 编写设备树"></a>5.3 编写设备树</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">virtual_pincontroller &#123;</span><br><span class="line">compatible = &quot;100ask,virtual_pinctrl&quot;;</span><br><span class="line">i2cgrp: i2cgrp &#123;</span><br><span class="line">functions = &quot;i2c&quot;, &quot;i2c&quot;;</span><br><span class="line">groups = &quot;pin0&quot;, &quot;pin1&quot;;</span><br><span class="line">configs = &lt;0x11223344  0x55667788&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">virtual_i2c &#123;</span><br><span class="line">compatible = &quot;100ask,virtual_i2c&quot;;</span><br><span class="line">pinctrl-names = &quot;default&quot;;</span><br><span class="line">pinctrl-0 = &lt;&amp;i2cgrp&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-4-编写pinctrl驱动"><a href="#5-4-编写pinctrl驱动" class="headerlink" title="5.4 编写pinctrl驱动"></a>5.4 编写pinctrl驱动</h2><p>核心：pinctrl_desc</p><ul><li>分配pinctrl_desc结构体</li><li>设置pinctrl_desc结构体</li><li>注册pinctrl_desc结构体</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mfd/syscon.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_address.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/machine.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinconf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinctrl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinmux.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;core.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_dev</span> *<span class="title">g_pinctrl_dev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把它作为pins的config register，config val是由virtual_dt_node_to_map解析设备树得来</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> g_configs[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************  引脚枚举与命名（单个引脚）******************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个pins的信息直接在代码中定义</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_pin_desc</span> <span class="title">pins</span>[] =</span> &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="string">&quot;pin0&quot;</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="string">&quot;pin1&quot;</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="string">&quot;pin2&quot;</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>, <span class="string">&quot;pin3&quot;</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************  引脚枚举与命名（各个function功能中有哪些引脚）******************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtual_functions_desc</span> &#123;</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *func_name;  <span class="comment">// 这个功能的名字</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> **groups;    <span class="comment">// 支持这个功能的pins是哪几组(我们现在每个pin都当作一组)</span></span><br><span class="line"><span class="type">int</span> num_groups;         <span class="comment">// 这个功能有多少个组，也就是有多少个pins(我们现在每个pin都当作一组)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各个function的group pins本应在设备树中定义，然后解析出来，我们此处也直接在代码中定义</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *func0_grps[] = &#123;<span class="string">&quot;pin0&quot;</span>, <span class="string">&quot;pin1&quot;</span>, <span class="string">&quot;pin2&quot;</span>, <span class="string">&quot;pin3&quot;</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *func1_grps[] = &#123;<span class="string">&quot;pin0&quot;</span>, <span class="string">&quot;pin1&quot;</span>&#125;;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *func2_grps[] = &#123;<span class="string">&quot;pin2&quot;</span>, <span class="string">&quot;pin3&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtual_functions_desc</span> <span class="title">g_funcs_des</span>[] =</span> &#123;</span><br><span class="line">&#123;<span class="string">&quot;gpio&quot;</span>, func0_grps, <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;i2c&quot;</span>,  func1_grps, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;uart&quot;</span>, func2_grps, <span class="number">2</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************** pctlops，client端回调获取组的信息和设备树引脚节点转换成map ****************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模仿stm32mp157的每个pin都当作一个group</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_get_groups_count</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pctldev-&gt;desc-&gt;npins;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *<span class="title function_">virtual_get_group_name</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev, <span class="type">unsigned</span> selector)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> pctldev-&gt;desc-&gt;pins[selector].name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_get_group_pins</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev, <span class="type">unsigned</span> selector,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">unsigned</span> **pins,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> *npins)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (selector &gt;= pctldev-&gt;desc-&gt;npins)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">*pins = &amp;pctldev-&gt;desc-&gt;pins[selector].number;</span><br><span class="line">*npins = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">virtual_pin_dbg_show</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev, <span class="keyword">struct</span> seq_file *s,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">seq_printf(s, <span class="string">&quot;%s&quot;</span>, dev_name(pctldev-&gt;dev));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">virtual_pincontroller &#123;</span></span><br><span class="line"><span class="comment">compatible = &quot;100ask,virtual_pinctrl&quot;;</span></span><br><span class="line"><span class="comment">i2cgrp &#123;</span></span><br><span class="line"><span class="comment">functions = &quot;i2c&quot;, &quot;i2c&quot;;</span></span><br><span class="line"><span class="comment">groups = &quot;pin0&quot;, &quot;pin1&quot;;</span></span><br><span class="line"><span class="comment">configs = &lt;0x112233440x55667788&gt;;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">virtual_i2c &#123;</span></span><br><span class="line"><span class="comment">compatible = &quot;100ask,virtual_i2c&quot;;</span></span><br><span class="line"><span class="comment">pinctrl-names = &quot;default&quot;;</span></span><br><span class="line"><span class="comment">pinctrl-0 = &lt;&amp;i2cgrp&gt;;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">one pin ==&gt; two pinctrl_map (one for mux, one for config)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_dt_node_to_map</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> device_node *np,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> pinctrl_map **<span class="built_in">map</span>, <span class="type">unsigned</span> *num_maps)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> num_pins = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pin;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *function;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> config;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_map</span> *<span class="title">new_map</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> *configs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 确定pin个数/分配pinctrl_map */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (of_property_read_string_index(np, <span class="string">&quot;groups&quot;</span>, num_pins, &amp;pin) == <span class="number">0</span>)</span><br><span class="line">num_pins++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">&quot;num_pins = %d\n&quot;</span>, num_pins);</span><br><span class="line"></span><br><span class="line">new_map = kmalloc(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> pinctrl_map) * num_pins * <span class="number">2</span>, GFP_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_pins; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2. get pin/function/config */</span></span><br><span class="line">of_property_read_string_index(np, <span class="string">&quot;groups&quot;</span>, i, &amp;pin);</span><br><span class="line">of_property_read_string_index(np, <span class="string">&quot;functions&quot;</span>, i, &amp;function);</span><br><span class="line">of_property_read_u32_index(np, <span class="string">&quot;configs&quot;</span>, i, &amp;config);</span><br><span class="line">printk(<span class="string">&quot;num_pins[%d]-&gt;groups = %s, num_pins[%d]-&gt;function = %s\n&quot;</span>, i, pin, i, function);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 存入pinctrl_map   */</span></span><br><span class="line">configs = kmalloc(<span class="keyword">sizeof</span>(*configs), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">new_map[i*<span class="number">2</span>].type = PIN_MAP_TYPE_MUX_GROUP;</span><br><span class="line">new_map[i*<span class="number">2</span>].data.mux.function = function;</span><br><span class="line">new_map[i*<span class="number">2</span>].data.mux.group = pin;</span><br><span class="line"></span><br><span class="line">new_map[i*<span class="number">2</span>+<span class="number">1</span>].type = PIN_MAP_TYPE_CONFIGS_PIN;</span><br><span class="line"> new_map[i*<span class="number">2</span>+<span class="number">1</span>].data.configs.group_or_pin = pin;</span><br><span class="line"> new_map[i*<span class="number">2</span>+<span class="number">1</span>].data.configs.configs = configs;</span><br><span class="line">configs[<span class="number">0</span>] = config;</span><br><span class="line">new_map[i*<span class="number">2</span>+<span class="number">1</span>].data.configs.num_configs = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*<span class="built_in">map</span> = new_map;</span><br><span class="line">*num_maps = num_pins * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">virtual_dt_free_map</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> pinctrl_map *<span class="built_in">map</span>, <span class="type">unsigned</span> num_maps)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (num_maps--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>-&gt;type == PIN_MAP_TYPE_CONFIGS_PIN)</span><br><span class="line">kfree(<span class="built_in">map</span>-&gt;data.configs.configs);</span><br><span class="line"></span><br><span class="line">kfree(<span class="built_in">map</span>);</span><br><span class="line"><span class="built_in">map</span>++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_ops</span> <span class="title">virtual_pctrl_ops</span> =</span> &#123;</span><br><span class="line">.get_groups_count = virtual_get_groups_count,</span><br><span class="line">.get_group_name = virtual_get_group_name,</span><br><span class="line">.get_group_pins = virtual_get_group_pins,</span><br><span class="line">.pin_dbg_show = virtual_pin_dbg_show,</span><br><span class="line">.dt_node_to_map = virtual_dt_node_to_map,</span><br><span class="line">.dt_free_map = virtual_dt_free_map,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************** pmxops 引脚复用 ****************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pmx_get_funcs_count</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ARRAY_SIZE(g_funcs_des);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *<span class="title function_">virtual_pmx_get_func_name</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> selector)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> g_funcs_des[selector].func_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pmx_get_groups</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev, <span class="type">unsigned</span> selector,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> **groups,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> * <span class="type">const</span> num_groups)</span></span><br><span class="line">&#123;</span><br><span class="line">*groups = g_funcs_des[selector].groups;</span><br><span class="line">*num_groups = g_funcs_des[selector].num_groups;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pmx_set</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev, <span class="type">unsigned</span> selector,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> group)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//真实情况这里是去操作寄存器设置复用，我们这做个打印模拟即可</span></span><br><span class="line">printk(<span class="string">&quot;set %s as %s\n&quot;</span>, pctldev-&gt;desc-&gt;pins[group].name, g_funcs_des[selector].func_name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pinmux_ops</span> <span class="title">virtual_pmx_ops</span> =</span> &#123;</span><br><span class="line">.get_functions_count = virtual_pmx_get_funcs_count,</span><br><span class="line">.get_function_name = virtual_pmx_get_func_name,</span><br><span class="line">.get_function_groups = virtual_pmx_get_groups,</span><br><span class="line">.set_mux = virtual_pmx_set,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************** pinconf_ops 引脚配置 ****************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pinconf_get</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> pin_id, <span class="type">unsigned</span> <span class="type">long</span> *config)</span></span><br><span class="line">&#123;</span><br><span class="line">*config = g_configs[pin_id];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pinconf_set</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> pin_id, <span class="type">unsigned</span> <span class="type">long</span> *configs,</span></span><br><span class="line"><span class="params"><span class="type">unsigned</span> num_configs)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num_configs != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">g_configs[pin_id] = *configs;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;config %s as 0x%lx\n&quot;</span>, pctldev-&gt;desc-&gt;pins[pin_id].name, *configs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">virtual_pinconf_dbg_show</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> seq_file *s, <span class="type">unsigned</span> pin_id)</span></span><br><span class="line">&#123;</span><br><span class="line">seq_printf(s, <span class="string">&quot;0x%lx&quot;</span>, g_configs[pin_id]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们的一个pin就是一组，所以使用上面一样的函数即可</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">virtual_pinconf_group_dbg_show</span><span class="params">(<span class="keyword">struct</span> pinctrl_dev *pctldev,</span></span><br><span class="line"><span class="params"><span class="keyword">struct</span> seq_file *s, <span class="type">unsigned</span> pin_id)</span></span><br><span class="line">&#123;</span><br><span class="line">seq_printf(s, <span class="string">&quot;0x%lx&quot;</span>, g_configs[pin_id]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pinconf_ops</span> <span class="title">virtual_pinconf_ops</span> =</span> &#123;</span><br><span class="line">.pin_config_get = virtual_pinconf_get,</span><br><span class="line">.pin_config_set = virtual_pinconf_set,</span><br><span class="line">.pin_config_dbg_show = virtual_pinconf_dbg_show,</span><br><span class="line">.pin_config_group_dbg_show = virtual_pinconf_group_dbg_show,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pinctrl_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pinctrl_desc</span> *<span class="title">pictrl</span>;</span></span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* a. 分配pinctrl_desc */</span></span><br><span class="line">pictrl = devm_kzalloc(&amp;pdev-&gt;dev, <span class="keyword">sizeof</span>(*pictrl), GFP_KERNEL);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* b. 设置pinctrl_desc */</span></span><br><span class="line">pictrl-&gt;name = dev_name(&amp;pdev-&gt;dev);</span><br><span class="line">pictrl-&gt;owner = THIS_MODULE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* b.1 pins and group */</span></span><br><span class="line">pictrl-&gt;pins = pins;</span><br><span class="line">pictrl-&gt;npins = ARRAY_SIZE(pins);</span><br><span class="line"></span><br><span class="line">pictrl-&gt;pctlops = &amp;virtual_pctrl_ops;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* b.2 pin mux */</span></span><br><span class="line">pictrl-&gt;pmxops = &amp;virtual_pmx_ops;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* b.3 pin config */</span></span><br><span class="line">pictrl-&gt;confops = &amp;virtual_pinconf_ops;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* c. 注册pinctrl_desc */</span></span><br><span class="line">g_pinctrl_dev = devm_pinctrl_register(&amp;pdev-&gt;dev, pictrl, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_pinctrl_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">virtual_pinctrl_of_match</span>[] =</span> &#123;</span><br><span class="line">&#123; .compatible = <span class="string">&quot;100ask,virtual_pinctrl&quot;</span>, &#125;,</span><br><span class="line">&#123; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">virtual_pinctrl_driver</span> =</span> &#123;</span><br><span class="line">.probe       = virtual_pinctrl_probe,</span><br><span class="line">.remove      = virtual_pinctrl_remove,</span><br><span class="line">.driver      = &#123;</span><br><span class="line">.name    = <span class="string">&quot;100ask_virtual_pinctrl&quot;</span>,</span><br><span class="line">.of_match_table = of_match_ptr(virtual_pinctrl_of_match),</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 入口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">virtual_pinctrl_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 1.1 注册一个platform_driver */</span></span><br><span class="line"><span class="keyword">return</span> platform_driver_register(&amp;virtual_pinctrl_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 出口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">virtual_pinctrl_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2.1 注销platform_driver */</span></span><br><span class="line">platform_driver_unregister(&amp;virtual_pinctrl_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(virtual_pinctrl_init);</span><br><span class="line">module_exit(virtual_pinctrl_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-5-编写client驱动"><a href="#5-5-编写client驱动" class="headerlink" title="5.5 编写client驱动"></a>5.5 编写client驱动</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mfd/syscon.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_address.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/machine.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinconf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinctrl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/pinmux.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">virtual_client_of_match</span>[] =</span> &#123;</span><br><span class="line">&#123; .compatible = <span class="string">&quot;100ask,virtual_i2c&quot;</span>, &#125;,</span><br><span class="line">&#123; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_client_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtual_client_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">virtual_client_driver</span> =</span> &#123;</span><br><span class="line">.probe= virtual_client_probe,</span><br><span class="line">.remove= virtual_client_remove,</span><br><span class="line">.driver= &#123;</span><br><span class="line">.name= <span class="string">&quot;100ask_virtual_client&quot;</span>,</span><br><span class="line">.of_match_table = of_match_ptr(virtual_client_of_match),</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1. 入口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">virtual_client_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 1.1 注册一个platform_driver */</span></span><br><span class="line"><span class="keyword">return</span> platform_driver_register(&amp;virtual_client_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 出口函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">virtual_client_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 2.1 注销platform_driver */</span></span><br><span class="line">platform_driver_unregister(&amp;virtual_client_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(virtual_client_init);</span><br><span class="line">module_exit(virtual_client_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-6-使用方法"><a href="#5-6-使用方法" class="headerlink" title="5.6 使用方法"></a>5.6 使用方法</h2><p>依次装载驱动</p><ol><li>virtual_pinctrl_driver.ko   注册了我们的虚拟的pinctrl控制器，里面有我们的虚拟pinctrl的操作函数。</li><li>virtual_pinctrl_client.ko   这个client的pinctrl控制器在设备树中指定为了我们的虚拟的pinctrl控制器，在执行他的probe函数之前，系统会先执行really_probe函数，会用这个驱动对应的pinctrl控制器的操作函数设置成设备树中指定的配置。</li></ol><p>开发板的<code>/sys/kernel/debug/pinctrl/</code>目录下，每一个pin controller都有一个目录，比如virtual_pincontroller。里面有很多文件，作用如下：</p><table><thead><tr><th>Pinctrl的虚拟文件</th><th>作用</th><th>解释</th></tr></thead><tbody><tr><td>pins</td><td>单个引脚信息</td><td></td></tr><tr><td>pingroups</td><td>引脚的组信息</td><td></td></tr><tr><td>pinmux-pins</td><td>单个引脚的复用信息</td><td></td></tr><tr><td>pinmux-functions</td><td>function下的group(支持该function的group)</td><td></td></tr><tr><td>pinconf-pins</td><td>单个引脚的配置</td><td></td></tr><tr><td>pinconf-groups</td><td>引脚组的配置</td><td></td></tr><tr><td>pinconf-config</td><td>可以通过写它修改指定设备、指定状态下、指定(组)引脚的config值</td><td></td></tr></tbody></table><ul><li>单个引脚信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pins</span><br><span class="line">registered pins: 4</span><br><span class="line">pin 0 (pin0) virtual_pincontroller</span><br><span class="line">pin 1 (pin1) virtual_pincontroller</span><br><span class="line">pin 2 (pin2) virtual_pincontroller</span><br><span class="line">pin 3 (pin3) virtual_pincontroller</span><br></pre></td></tr></table></figure><ul><li>引脚的组信息（模仿stm32mp157的每个pin都当作一个group）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pingroups</span><br><span class="line">registered pin groups:</span><br><span class="line">group: pin0</span><br><span class="line">pin 0 (pin0)</span><br><span class="line"></span><br><span class="line">group: pin1</span><br><span class="line">pin 1 (pin1)</span><br><span class="line"></span><br><span class="line">group: pin2</span><br><span class="line">pin 2 (pin2)</span><br><span class="line"></span><br><span class="line">group: pin3</span><br><span class="line">pin 3 (pin3)</span><br></pre></td></tr></table></figure><ul><li>单个引脚的复用信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pinmux-pins</span><br><span class="line">Pinmux settings per pin</span><br><span class="line">Format: pin (name): mux_owner gpio_owner hog?</span><br><span class="line">pin 0 (pin0): virtual_i2c (GPIO UNCLAIMED) function i2c group pin0</span><br><span class="line">pin 1 (pin1): virtual_i2c (GPIO UNCLAIMED) function i2c group pin1</span><br><span class="line">pin 2 (pin2): (MUX UNCLAIMED) (GPIO UNCLAIMED)</span><br><span class="line">pin 3 (pin3): (MUX UNCLAIMED) (GPIO UNCLAIMED)</span><br></pre></td></tr></table></figure><ul><li>function下的group(支持该function的group，模仿stm32mp157的每个pin都当作一个group)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pinmux-functions</span><br><span class="line">function: gpio, groups = [ pin0 pin1 pin2 pin3 ]</span><br><span class="line">function: i2c, groups = [ pin0 pin1 ]</span><br><span class="line">function: uart, groups = [ pin2 pin3 ]</span><br></pre></td></tr></table></figure><ul><li>单个引脚的配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pinconf-pins</span><br><span class="line">Pin config settings per pin</span><br><span class="line">Format: pin (name): configs</span><br><span class="line">pin 0 (pin0): 0x11223344</span><br><span class="line">pin 1 (pin1): 0x55667788</span><br><span class="line">pin 2 (pin2): 0x0</span><br><span class="line">pin 3 (pin3): 0x0</span><br></pre></td></tr></table></figure><ul><li>引脚组的配置（模仿stm32mp157的每个pin都当作一个group）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat /sys/kernel/debug/pinctrl/virtual_pincontroller/pinconf-groups</span><br><span class="line">Pin config settings per pin group</span><br><span class="line">Format: group (name): configs</span><br><span class="line">0 (pin0): 0x11223344</span><br><span class="line">1 (pin1): 0x55667788</span><br><span class="line">2 (pin2): 0x0</span><br><span class="line">3 (pin3): 0x0</span><br></pre></td></tr></table></figure><p>我们可以在pinctrl驱动的ops组中加入打印信息，这样就可以确认这些cat操作分别对应的ops函数。</p><h1 id="六、相关疑惑与调试"><a href="#六、相关疑惑与调试" class="headerlink" title="六、相关疑惑与调试"></a>六、相关疑惑与调试</h1><p><img src="6.0.png" alt="6.0"></p>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RK3399使用日志</title>
      <link href="/2023/04/11/RK3399%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/"/>
      <url>/2023/04/11/RK3399%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1、fbtft屏幕出错"><a href="#1、fbtft屏幕出错" class="headerlink" title="1、fbtft屏幕出错"></a>1、fbtft屏幕出错</h1><p>向往常一样想在RK3399上点亮st7789v屏幕，但是报错如下：</p><p><img src="fbtft-debug1.png" alt="fbtft-debug1"></p><p>从信息来看应该是在：drivers&#x2F;staging&#x2F;fbtf&#x2F;fbtft-core.c –&gt; fbtft_probe_common中出错，最终定位到：</p><p><img src="fbtft-debug2.png" alt="fbtft-debug2"></p><p><img src="fbtft-debug3.png" alt="fbtft-debug3"></p><p>我们的内核是开启了DMA的，也即开启了宏：CONFIG_HAS_DMA，所以问题出在DMA空间申请失败，手动关闭LCD dma，重新编译烧录即可。<em><strong>这里没有深究为什么DMA申请空间失败。</strong></em></p><img src="fbtft-debug4.png" alt="fbtft-debug4" style="zoom:200%;">]]></content>
      
      
      <categories>
          
          <category> RK3399 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RK3399 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出C指针</title>
      <link href="/2023/03/19/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAC%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/19/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAC%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-指针基本介绍"><a href="#1-指针基本介绍" class="headerlink" title="1. 指针基本介绍"></a>1. 指针基本介绍</h1><p><img src="1.%E6%8C%87%E9%92%88%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D1.png" alt="指针基本介绍1"></p><p><img src="1.%E6%8C%87%E9%92%88%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D2.png" alt="指针基本介绍2"></p><p><img src="1.%E6%8C%87%E9%92%88%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D3.png" alt="指针基本介绍3"></p><h1 id="2-指针类型"><a href="#2-指针类型" class="headerlink" title="2. 指针类型"></a>2. 指针类型</h1><p><img src="2.%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B1.png" alt="2.指针类型1"></p><p><img src="2.%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B2.png" alt="2.指针类型2"></p><p><img src="2.%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B3.png" alt="2.指针类型3"></p><h1 id="3-指针的指针"><a href="#3-指针的指针" class="headerlink" title="3. 指针的指针"></a>3. 指针的指针</h1><p><img src="3.%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%881.png" alt="3.指针的指针1"></p><p><img src="3.%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%882.png" alt="3.指针的指针2"></p><h1 id="4-传值与传引用"><a href="#4-传值与传引用" class="headerlink" title="4. 传值与传引用"></a>4. 传值与传引用</h1><p><img src="4.%E4%BC%A0%E5%80%BC%E4%B8%8E%E4%BC%A0%E5%BC%95%E7%94%A81.png" alt="4.传值与传引用1"></p><p><img src="4.%E4%BC%A0%E5%80%BC%E4%B8%8E%E4%BC%A0%E5%BC%95%E7%94%A82.png" alt="4.传值与传引用2"></p><h1 id="5-指针与数组"><a href="#5-指针与数组" class="headerlink" title="5. 指针与数组"></a>5. 指针与数组</h1><p><img src="5.%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%841.png" alt="5.指针与数组1"></p><h1 id="6-数组作为函数参数"><a href="#6-数组作为函数参数" class="headerlink" title="6. 数组作为函数参数"></a>6. 数组作为函数参数</h1><p><img src="6.%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B01.png" alt="6.数组作为函数参数1"></p><p><img src="6.%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B02.png" alt="6.数组作为函数参数2"></p><h1 id="7-指针和字符数组"><a href="#7-指针和字符数组" class="headerlink" title="7. 指针和字符数组"></a>7. 指针和字符数组</h1><p><img src="7.%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%841.png" alt="7.指针和字符数组1"></p><p><img src="7.%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%842.png" alt="7.指针和字符数组2"></p><p><img src="7.%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%843.png" alt="7.指针和字符数组3"></p><p><img src="7.%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%844.png" alt="7.指针和字符数组4"></p><h1 id="8-指针和多维数组"><a href="#8-指针和多维数组" class="headerlink" title="8. 指针和多维数组"></a>8. 指针和多维数组</h1><p><img src="8.%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%841.png" alt="8.指针和多维数组1"></p><p><img src="8.%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%842.png" alt="8.指针和多维数组2"></p><p><img src="8.%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%843.png" alt="8.指针和多维数组3"></p><p><img src="8.%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%844.png" alt="8.指针和多维数组4"></p><h1 id="9-指针和动态内存"><a href="#9-指针和动态内存" class="headerlink" title="9. 指针和动态内存"></a>9. 指针和动态内存</h1><p><img src="9.%E6%8C%87%E9%92%88%E5%92%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%981.png" alt="9.指针和动态内存1"></p><h1 id="10-函数返回指针"><a href="#10-函数返回指针" class="headerlink" title="10. 函数返回指针"></a>10. 函数返回指针</h1><p>从栈底向上传一个局部变量或者一个局部变量的地址是可以的，但是反过来不行；如果函数要返回一个指针，要用堆。因为栈是自动释放的，而堆需要手动释放。</p><p><img src="10.%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%881.png" alt="10.函数返回指针1"></p><p><img src="10.%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%882.png" alt="10.函数返回指针2"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出数据结构</title>
      <link href="/2023/03/19/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/19/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-链表"><a href="#1-链表" class="headerlink" title="1. 链表"></a>1. 链表</h1><h2 id="1-1-链表基本介绍"><a href="#1-1-链表基本介绍" class="headerlink" title="1.1 链表基本介绍"></a>1.1 链表基本介绍</h2><p><img src="1.%E9%93%BE%E8%A1%A81.png" alt="1.链表1"></p><p><img src="1.%E9%93%BE%E8%A1%A82.png" alt="1.链表2"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式题库总结</title>
      <link href="/2023/03/10/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%98%E5%BA%93%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/10/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%98%E5%BA%93%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、C语言"><a href="#一、C语言" class="headerlink" title="一、C语言"></a>一、C语言</h1><h2 id="1-inline-和-static-inline"><a href="#1-inline-和-static-inline" class="headerlink" title="1. inline 和 static inline"></a>1. inline 和 static inline</h2><h3 id="inline的优缺点"><a href="#inline的优缺点" class="headerlink" title="inline的优缺点"></a>inline的优缺点</h3><p>inline是c99的特性。在c99中，inline是向编译器建议，将被inline修饰的函数以内联的方式嵌入到调用这个函数的地方。 而编译器会判断这样做是否合适，以此最终决定是否这么做。</p><ol><li>好处：减少调用函数时的开销，如：减少传参时可能引起的压栈出栈的开销。减少PC跳转时对流水线的破坏。</li><li>坏处： 以空间换时间，代码所占体积会更大。</li></ol><h3 id="static-inline和inline的区别"><a href="#static-inline和inline的区别" class="headerlink" title="static inline和inline的区别"></a>static inline和inline的区别</h3><p>显然我们希望它们被其他文件访问。那么我们的inline函数原型就应该定义在头文件中，注意是函数原型而不是函数声明。因为开发者决定不了一个函数是否被内联，开发者只有建议权，只有编译器具有决定权。这就造成了一个很困扰的事情：除非你看到一个函数的反汇编代码，否则你很难确定他是不是内联函数。试想，如果头文件中的Inline函数在没有被编译成内联函数的情况下，被include到了多个源文件中，势必会产生函数重复定义的问题。 因此，我们要再加一个关键字static，才能避免这个问题。</p><h3 id="static-inline使用时机"><a href="#static-inline使用时机" class="headerlink" title="static inline使用时机"></a>static inline使用时机</h3><p>static inline什么时候用比较好：</p><ol><li>所修饰的函数语句较少时，尤其是只有一两条语句的函数。 </li><li>所修饰的函数不是递归函数，因为递归不支持内联。</li><li>内联函数定义了但没有使用的时候不会和普通函数那样warning。</li></ol><h2 id="2-struct和union内存对齐"><a href="#2-struct和union内存对齐" class="headerlink" title="2. struct和union内存对齐"></a>2. struct和union内存对齐</h2><h3 id="内存对齐的原因"><a href="#内存对齐的原因" class="headerlink" title="内存对齐的原因"></a>内存对齐的原因</h3><ol><li>平台原因：<em><strong>不是所有的硬件平台都能访问任意地址上的任意数据的；</strong></em>某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。</li><li>性能原因 ：数据结构( 尤其是栈 ) 应该尽可能地在自然边界上对齐。 原因在于，我们在访问结构体变量时，是按结构体中成员所占的最大字节数对结构体变量进行读取的。为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。<em><strong>这里归根结底的来说就是以空间换时间</strong></em> 。</li></ol><h3 id="struct对齐的规则"><a href="#struct对齐的规则" class="headerlink" title="struct对齐的规则"></a>struct对齐的规则</h3><ol><li>结构体中的第一个成员在与结构体变量偏移量为0的地址处。</li><li>其它成员变量要对齐到一个名叫“对齐数”的整数倍的地址处。补充：对齐数&#x3D;编译器默认的一个对齐数与该成员变量类型中的较小值。</li><li>结构体总大小为最大对齐数(每个成员变量类型都有一个对齐数)的整数倍。</li><li>如果存在了嵌套结构体的情况，嵌套的结构体对齐到自己的成员变量类型中最大对齐数的整数倍处，包含该嵌套结构体的结构体大小为其成员变量类型(包含嵌套结构体)最大对齐数的整数倍。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体内存对齐</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c1;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> c2;</span><br><span class="line">&#125;; <span class="comment">//32位平台为12字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c1;</span><br><span class="line"><span class="type">char</span> c2;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">&#125;; <span class="comment">//32位平台为8字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span>  d;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s2</span> <span class="title">t</span>;</span> <span class="comment">//结构体嵌套，32位平台为20字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1.2.1.png" alt="1.2.1"><br><img src="1.2.2.png" alt="1.2.2"><br><img src="1.2.3.png" alt="1.2.3"></p><h3 id="取消内存对齐"><a href="#取消内存对齐" class="headerlink" title="取消内存对齐"></a>取消内存对齐</h3><ol><li>#pragma pack(1)  …  #pragma pack()</li><li>一定要在结构体末尾加上#pragma pack()进行取消自定义字节对齐的命令，如果不取消可能会导致整个程序存在问题，因为会影响到其他结构体的字节对齐方式。</li><li>__attribute__((packed))，GNU C特有的编译机制。</li></ol><h3 id="位域存储规则"><a href="#位域存储规则" class="headerlink" title="位域存储规则"></a>位域存储规则</h3><ol><li>若相邻的位域成员的类型相同，且其占用二进制位数未超过该类型可容纳的范围，则后面的成员紧接着前一个成员进行存储；</li><li>若相邻的位域成员的类型相同，但其占用二进制位数超过该类型可容纳的范围，则后面的成员从该类型占用空间之后的内存单元开始存储;</li><li>若相邻的位域成员的类型不同，则取决于编译器的实现。对于GCC编译器会尽量利用空闲的位对数据进行存储；</li><li>若位域之间定义有匿名位域成员，则匿名位域成员指定的空闲位不用于后续成员的数据存储，注意，他也要遵守条件2；</li><li>特别地，如果匿名成员占用的位数为0，当前类型的内存单元剩余空间都将不会被使用；</li><li>混合使用位域和普通成员变量，也要遵守结构体对齐的规则。</li></ol><p><img src="1.2.4.png" alt="1.2.4"></p><ol><li>对于成员a、b、c再加上匿名成员占用的总内存空间并未超过unsigned short类型空间的大小，因此在unsigned short类型可容纳的范围内，这些成员可以紧挨着存放；</li><li>当后续存放成员d时，前一个unsigned short类型数据剩余的空间已不足以容纳d，因此选择下一个内存单元进行存放。</li><li>整个结构体的总大小为最宽基本类型成员大小的整数倍。所以总大小为4字节。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证匿名位域也要遵守规则2：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a : <span class="number">3</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b : <span class="number">4</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>   : <span class="number">9</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> c : <span class="number">3</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> d : <span class="number">5</span>;</span><br><span class="line">&#125;; <span class="comment">//匿名位域9，当前类型剩余空间刚好放的下，总空间为4字节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> a : <span class="number">3</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> b : <span class="number">4</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>   : <span class="number">10</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> c : <span class="number">3</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> d : <span class="number">5</span>;</span><br><span class="line">&#125;; <span class="comment">//匿名位域10，当前类型剩余空间放不下，从byte2开始放匿名的，总空间为6字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证位域的规则5：</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> a : <span class="number">3</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> b : <span class="number">4</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>   : <span class="number">5</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> c : <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">&#125;; <span class="comment">//int d内存对齐，从byte4开始存储，byte2、byte3不用，总空间为8字节</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="union对齐的规则"><a href="#union对齐的规则" class="headerlink" title="union对齐的规则"></a>union对齐的规则</h3><ol><li>找到占用字节最多的成员类型；</li><li>union大小必须是占最大的成员类型字节数的倍数，而且需要能够容纳其他的成员。</li></ol><p>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x64</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="type">int</span> k[<span class="number">5</span>];</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125;D</span><br></pre></td></tr></table></figure><ol><li>首先找到占用字节最多的成员，本例中是long，占用8个字节，int k[5]中都是int类型，仍然是占用4个字节的。</li><li>然后union的字节数必须是最大的成员类型的倍数,而且需要能够容纳其他的成员，为了要容纳k(20个字节)，就必须要保证是8的倍数的同时还要大于20个字节，所以是24个字节。</li></ol><h3 id="综合的栗子"><a href="#综合的栗子" class="headerlink" title="综合的栗子"></a>综合的栗子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> m:<span class="number">3</span>;</span><br><span class="line">    <span class="type">char</span> n:<span class="number">5</span>;</span><br><span class="line">    <span class="type">short</span> s;</span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="type">int</span>  a;</span><br><span class="line">        <span class="type">char</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"> <span class="type">int</span> h;</span><br><span class="line">&#125;__attribute__((packed)) data_a;</span><br><span class="line"><span class="comment">//此处的总大小为11字节，因为取消了内存对齐，否则总大小为12字节</span></span><br></pre></td></tr></table></figure><h3 id="判断机器大小端"><a href="#判断机器大小端" class="headerlink" title="判断机器大小端"></a>判断机器大小端</h3><p>小端存储：低地址内容存放在低地址，高地址内容存放在高地址<br>大端存储：低地址内容存放在高地址，高地址内容存放在低地址</p><p>方法一：联合体union</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">w</span>&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">char</span> b;</span><br><span class="line">&#125;c;</span><br><span class="line">c.a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(c.b == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：指针方法，将int强制类型转换成char单字节，p指向a的起始字节（低字节）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *)&amp;a;</span><br><span class="line"><span class="keyword">if</span>(*p == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端存储\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端存储\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-attribute-机制"><a href="#3-attribute-机制" class="headerlink" title="3. __attribute__机制"></a>3. __attribute__机制</h2><ol><li>GNU C的一大特色就是attribute机制。attribute可以设置函数属性（Function Attribute）、变量属性（Variable Attribute）和类型属性（Type Attribute）。</li><li>attribute书写特征是：__attribute__前后都有两个下划线，并且后面会紧跟一对括弧，括弧里面是相应的attribute参数。</li></ol><h1 id="二、ARM架构"><a href="#二、ARM架构" class="headerlink" title="二、ARM架构"></a>二、ARM架构</h1><h2 id="1-异常处理"><a href="#1-异常处理" class="headerlink" title="1. 异常处理"></a>1. 异常处理</h2><p>硬件自动完成：</p><ol><li>保存CPSR到SPSR_mode</li><li>设置 CPSR 对应功能位：<br>①切换处理器进入ARM状态：T[5]<br>②根据需要，禁止中断位：F[6] &#x2F; I[7]<br>③根据异常切换到对应的异常模式：M[4:0]</li><li>保存返回地址：把当前 PC 保存到 lr_mode</li><li>设置PC &#x3D; 存放跳转到对应的异常向量表的固定首地址。</li></ol><p>异常处理程序(手动完成)：</p><ol><li>保护现场，将r0 ~ r12寄存器压栈</li><li>真正的异常处理程序</li><li>恢复现场<br>①恢复 SPSR_mode 到 CPSR<br>②恢复 lr_mode 到 PC<br>③操作sp将栈中r0 ~ r12寄存器数据恢复</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">software_interrupt:</span><br><span class="line">@保存现场，连续压栈，lr先入栈，再是r12，r11...</span><br><span class="line">stmfd sp!,&#123;r0-r12, lr&#125;</span><br><span class="line"></span><br><span class="line">@执行用户代码</span><br><span class="line">mov r0, #0x5</span><br><span class="line">mov r1, #0x6</span><br><span class="line">add r3, r0,r1</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">@恢复现场:&#123;r0-r12,pc&#125;，连续出栈，先弹出给r0，r1...pc</span><br><span class="line">@&quot;^&quot;会自动将SPSR恢复到CPSR</span><br><span class="line">ldmfd sp!, &#123;r0-r12, pc&#125;^</span><br></pre></td></tr></table></figure><h1 id="三、Linux内核"><a href="#三、Linux内核" class="headerlink" title="三、Linux内核"></a>三、Linux内核</h1><h2 id="1-不同情形能否schedule"><a href="#1-不同情形能否schedule" class="headerlink" title="1. 不同情形能否schedule"></a>1. 不同情形能否schedule</h2><p>①中断、软中断、tasklet、timer、hrtimer 执行环境下、或者“内核线程、普通线程内核态环境下调用了preempt disable() &#x2F; local irq_disable() &#x2F; spin lock后”，能否调用schedule()函数 (包括usleep()、wait event等系列函数)?</p><p>答：不能调用schedule()函数，否则违反了linux kernel的设计理念，导致schedule出去后系统各种不稳定的异常。</p><p>比如内核能否抢占的条件就是当前没有持有锁，而是否持有锁的判断依据是preempt_count值是否为0，调用preempt disable()后preempt_count++，本来已经禁止抢占了，但是又主动调用schedule()，精神分裂症无疑了！</p><p>再比如spin lock成功后，spin lock内部调用了preempt disable，所以spin lock后，不能调用schedulel()。当然spin unlock会调用preempt enable，由于usleep()、wait_event等函数内部调用了schedule()函数，也不能使用。</p><p>为什么local irq_disable()后不能调用schedule()，我的解释是：根据《linux内核设计与实现》所述：“如果在调用local_irq_disable()之前就已经禁止了中断，那么该例程会带来危险”。因为schedule()中也会禁止中断，所以可能会导致系统不稳定。</p><p>②workqueue、kernel thread、普通线程的内核态这些context下，在没有调用preempt disable禁止抢占和local_irq_disable禁止中断等操作时，能否调用schedule()?</p><p>答：可以调用schedule()。前提是没有调用preempt disable禁止抢占和local_irq_disable禁止中断等操作时。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uboot源码情景分析</title>
      <link href="/2023/02/25/uboot%E6%BA%90%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/"/>
      <url>/2023/02/25/uboot%E6%BA%90%E7%A0%81%E6%83%85%E6%99%AF%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="一-UBOOT打补丁"><a href="#一-UBOOT打补丁" class="headerlink" title="一. UBOOT打补丁"></a>一. UBOOT打补丁</h1><p>uboot的源码在官方都能下到，但是每个厂家会根据自己的实际情况对代码进行修改，那么很多时候就会把修改后的补丁文件发布出来，用户只需要将补丁文件打入到官方源码即可。</p><p>打入jz2440的补丁文件: patch -p1 &lt; ..&#x2F;u-boot-1.1.6_jz2440.patch</p><h2 id="1-补丁生成"><a href="#1-补丁生成" class="headerlink" title="1 补丁生成"></a>1 补丁生成</h2><p>当前目录创建原文件：1.txx</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this is a test</span><br><span class="line"><span class="keyword">for</span> patch file format</span><br><span class="line">so let us go!</span><br></pre></td></tr></table></figure><p>当前目录创建修改后的文件：2.txt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this is a test</span><br><span class="line"><span class="keyword">for</span> linux patch file format</span><br><span class="line">so let us go!</span><br><span class="line">learn it</span><br></pre></td></tr></table></figure><p>当前目录创建生成补丁文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u <span class="number">1.</span>txt <span class="number">2.</span>txt &gt; diff.patch</span><br></pre></td></tr></table></figure><h2 id="2-补丁分析"><a href="#2-补丁分析" class="headerlink" title="2 补丁分析"></a>2 补丁分析</h2><p>生成的补丁文件内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- <span class="number">1.</span>txt       <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">38.833368403</span> +<span class="number">0000</span></span><br><span class="line">+++ <span class="number">2.</span>txt       <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">53.506331049</span> +<span class="number">0000</span></span><br><span class="line">@@ <span class="number">-1</span>,<span class="number">3</span> +<span class="number">1</span>,<span class="number">4</span> @@</span><br><span class="line"> this is a test</span><br><span class="line">-<span class="keyword">for</span> patch file format</span><br><span class="line">+<span class="keyword">for</span> linux patch file format</span><br><span class="line"> so let us go!</span><br><span class="line">+learn it</span><br></pre></td></tr></table></figure><p>补丁头：补丁头记录了原始文件和修改后的文件的文件名和创建时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- <span class="number">1.</span>txt       <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">38.833368403</span> +<span class="number">0000</span></span><br><span class="line">+++ <span class="number">2.</span>txt       <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">53.506331049</span> +<span class="number">0000</span></span><br><span class="line">“---” 表示旧文件（原文件）</span><br><span class="line">“+++” 表示新文件（修改后的文件）</span><br></pre></td></tr></table></figure><p>补丁块：补丁中的块是用来说明文件的改动情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-1</span>,<span class="number">3</span> +<span class="number">1</span>,<span class="number">4</span> @@</span><br><span class="line"> this is a test</span><br><span class="line">-<span class="keyword">for</span> patch file format</span><br><span class="line">+<span class="keyword">for</span> linux patch file format</span><br><span class="line"> so let us go!</span><br><span class="line">+learn it</span><br></pre></td></tr></table></figure><p>@@ -1,3 +1,4 @@</p><ol><li>-1,3表示这个块原文件是从第1行开始，到第3行结束。</li><li>+1,4表示这个块修改后是从第1行开始，到第3行结束。</li></ol><p>块会缩进一列，该列有三种情况：</p><ol><li>以 “-” 开头的行， 表示该行只在原始文件中存在，也就是要删除的。</li><li>以 “+” 开头的行，表示该行只在修改后的文件中存在，要加上的。</li><li>以空格开头的行，表示该行在原始文件和修改后的文件中都存在，也就是没改动。</li></ol><h2 id="3-补丁使用"><a href="#3-补丁使用" class="headerlink" title="3 补丁使用"></a>3 补丁使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p0 <span class="number">1.</span>txt &lt; diff.patch</span><br></pre></td></tr></table></figure><p>-p是指打补丁的时候忽略几层路径，假如生成补丁的时候不是在当前目录生成的，那么在补丁头的时候就会显示要将补丁打到哪里去的路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--- test/<span class="number">1.</span>txt <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">38.833368403</span> +<span class="number">0000</span></span><br><span class="line">+++ test/<span class="number">2.</span>txt <span class="number">2023</span><span class="number">-02</span><span class="number">-27</span> <span class="number">04</span>:<span class="number">00</span>:<span class="number">53.506331049</span> +<span class="number">0000</span></span><br></pre></td></tr></table></figure><p>test&#x2F;1.txt就是补丁显示的原文件路径，也就是要打入补丁的地方，但用户的原文件路径和补丁显示的原文件路径一般来说是不一样的，所以用户打补丁一般进入自己原文件的目录，并查看补丁头显示的路径，用-p去掉不属于自己的路径。</p><p>比如现在用户在hhh&#x2F;1.txt，那么他就要去除test&#x2F;这个路径，所以他应该用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p1 <span class="number">1.</span>txt &lt; diff.patch</span><br></pre></td></tr></table></figure><h1 id="二-UBOOT配置"><a href="#二-UBOOT配置" class="headerlink" title="二. UBOOT配置"></a>二. UBOOT配置</h1><p>make 100ask24x0_config 配置板级信息，我们搜索Makefile查看具体执行什么：</p><p><img src="1_make-xxxconfig.png" alt="1_make-xxxconfig"></p><p>@$(MKCONFIG)   $(@:_config&#x3D;)   arm   arm920t   100ask24x0   NULL   s3c24x0</p><ol><li>@ 是指 make 时不输出 make 信息（一行以@开头，则该行命令的输出被抑制）。</li><li>$(MKCONFIG) 变量表示 MKCONFIG :&#x3D; $(SRCTREE)&#x2F;mkconfig（源码目录下的 mkconfig 文件）。</li><li>$(@:_config&#x3D;)，$@是指表示目标，即：100ask24x0_config，_config&#x3D;是指用空替掉换$@目标中的“_config”（_config&#x3D;后是空）。则$(@:_config&#x3D;) 就表示 100ask24x0。</li></ol><p>最后：“make 100ask24x0_config”便相当于执行下面这个脚本：</p><p>mkconfig       100ask24x0       arm         arm920t        100ask24x0       NULL         s3c24x0</p><p>打开mkconfig脚本，根据入参简化后如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh -e</span></span><br><span class="line"></span><br><span class="line">APPEND=no       # Default: Create new config file</span><br><span class="line">BOARD_NAME=&quot;&quot;   # Name to print in make output</span><br><span class="line"></span><br><span class="line">echo &quot;Configuring for $&#123;BOARD_NAME&#125; board...&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Create link to architecture specific headers</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">cd</span> ./include</span></span><br><span class="line">rm -f asm</span><br><span class="line">ln -s asm-$2 asm</span><br><span class="line">rm -f asm-$2/arch</span><br><span class="line">ln -s $&#123;LNPREFIX&#125;arch-$6 asm-$2/arch</span><br><span class="line">rm -f asm-$2/proc</span><br><span class="line">ln -s $&#123;LNPREFIX&#125;proc-armv asm-$2/proc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Create include file for Make</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;ARCH   = <span class="variable">$2</span>&quot;</span> &gt;  config.mk</span></span><br><span class="line">echo &quot;CPU    = $3&quot; &gt;&gt; config.mk</span><br><span class="line">echo &quot;BOARD  = $4&quot; &gt;&gt; config.mk</span><br><span class="line"></span><br><span class="line">[ &quot;$5&quot; ] &amp;&amp; [ &quot;$5&quot; != &quot;NULL&quot; ] &amp;&amp; echo &quot;VENDOR = $5&quot; &gt;&gt; config.mk</span><br><span class="line"></span><br><span class="line">[ &quot;$6&quot; ] &amp;&amp; [ &quot;$6&quot; != &quot;NULL&quot; ] &amp;&amp; echo &quot;SOC    = $6&quot; &gt;&gt; config.mk</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Create board specific header file</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$APPEND</span>&quot;</span> = <span class="string">&quot;yes&quot;</span> ]        <span class="comment"># Append to existing config file</span></span></span><br><span class="line">then</span><br><span class="line">        echo &gt;&gt; config.h</span><br><span class="line">else</span><br><span class="line">        &gt; config.h              # Create new config file</span><br><span class="line">fi</span><br><span class="line">echo &quot;/* Automatically generated - do not edit */&quot; &gt;&gt;config.h</span><br><span class="line">echo &quot;#include &lt;configs/$1.h&gt;&quot; &gt;&gt;config.h</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>可知执行了如下：</p><ol><li>在include目录下建立了一系列软链接，如：ln -s asm-arm asm，链接文件asm指向 asm-arm。这样做的原因是避免每次都要配置。如#inclue &lt;asm-arm&#x2F;type.h&gt;是包含 arm 下的type.h 头文件，若是#include &lt;asm-i386&#x2F;type.h&gt;是包含 i386 架构下的 type.h 头文件。配置时建立链接文件到相应的架构下，这样直接写成 #include &lt;asm&#x2F;type.h&gt;即可。</li><li>在include目录下创建了config.mk，里面有我们单板的信息。</li><li>在include目录下创建了config.h，里面#include &lt;configs&#x2F;100ask24x0.h&gt;，该头文件包含板子的配置情况，所以增加一个板子，在 board 目录下新建一个开发板<board_name>的目录，在include&#x2F;configs 目录下也要建立一个文件 <board_name>.h，里在存放的就是开发板 <board_name>的配置信息。</board_name></board_name></board_name></li></ol><h1 id="三-UBOOT编译"><a href="#三-UBOOT编译" class="headerlink" title="三. UBOOT编译"></a>三. UBOOT编译</h1><p>配置完毕后，直接输入make即可编译，我们来分析Makefile。</p><p><img src="2_make.png" alt="2_make"></p><p>包含 include 目录下的 config.mk 文件，这个文件是就 make 100ask24x0_config 与 mkconfig 文件一起生成的。include&#x2F;config.mk 中定义的东西在 Makefile 中用的到。这就是配置和编译结合的过程。包含了 include&#x2F;config.mk 配置文件后，export 导出这 5 个变量给下级的 Makefile使用。</p><p>我们make是要生成uboot.bin，uboot.bin是由uboot生成的。make 编译时，若不指定目标，则 make 就找第一个目标去生成这个目标。all 是这里的第一个目标。</p><p><img src="3_make.png" alt="3_make"></p><p>我们可以将上述变量一一展开，但是现在使用一个取巧的办法，直接看最后编译的输出信息：</p><p><img src="4_make.png" alt="4_make"></p><p>上面的信息可以知道，使用board&#x2F;100ask24x0&#x2F;u-boot.lds链接脚本，链接地址为0x33f80000，将很多的文件链接在一起形成了elf文件u-boot，最后这个elf格式的u-boot再转化成二进制的u-boot.bin。那么我们来看看这个链接脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT_FORMAT(&quot;elf32-littlearm&quot;, &quot;elf32-littlearm&quot;, &quot;elf32-littlearm&quot;)</span><br><span class="line">/*OUTPUT_FORMAT(&quot;elf32-arm&quot;, &quot;elf32-arm&quot;, &quot;elf32-arm&quot;)*/</span><br><span class="line">OUTPUT_ARCH(arm)</span><br><span class="line">ENTRY(_start)</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">. = 0x00000000;</span><br><span class="line"></span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.text      :</span><br><span class="line">&#123;</span><br><span class="line">cpu/arm920t/start.o   (.text)</span><br><span class="line">board/100ask24x0/boot_init.o (.text)</span><br><span class="line">*(.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.rodata : &#123; *(.rodata) &#125;</span><br><span class="line"></span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.data : &#123; *(.data) &#125;</span><br><span class="line"></span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.got : &#123; *(.got) &#125;</span><br><span class="line"></span><br><span class="line">. = .;</span><br><span class="line">__u_boot_cmd_start = .;</span><br><span class="line">.u_boot_cmd : &#123; *(.u_boot_cmd) &#125;</span><br><span class="line">__u_boot_cmd_end = .;</span><br><span class="line"></span><br><span class="line">. = ALIGN(4);</span><br><span class="line">__bss_start = .;</span><br><span class="line">.bss : &#123; *(.bss) &#125;</span><br><span class="line">_end = .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可以看到链接脚本将cpu&#x2F;arm920t&#x2F;start.o放在了最前面，并且ENTRY(_start)声明了第一条语句的入口。</li><li>链接脚本的链接地址是0开始，为什么最后的链接显示的链接地址是0x33F80000？这个地址是TEXT_BASE，在board&#x2F;100ask24x0&#x2F;config.mk定义。我们的SDRAM为64M，地址从0x30000000开始，0x33F80000就是在SDRAM的最顶部空出512k来存放我们的uboot.bin。</li><li>__u_boot_cmd_start 这个段是用来存放uboot定义的命令，后续会分析到。</li><li>接下来的任务就是从cpu&#x2F;arm920t&#x2F;start.S这个文件入手，分析uboot的源码。</li></ol><h1 id="四-UBOOT源码分析"><a href="#四-UBOOT源码分析" class="headerlink" title="四. UBOOT源码分析"></a>四. UBOOT源码分析</h1><h2 id="1-UBOOT启动第一阶段"><a href="#1-UBOOT启动第一阶段" class="headerlink" title="1 UBOOT启动第一阶段"></a>1 UBOOT启动第一阶段</h2><p>第一阶段做的事情如下：cpu&#x2F;arm920t&#x2F;start.S</p><ol><li>进入 SVC 管理模式</li><li>关看门狗</li><li>屏蔽中断</li><li>做些初始化（主要是 SDRAM 的初始化）board&#x2F;100ask24x0&#x2F;lowlevel_init.S</li><li>设置调用 C 函数的 SP 栈。</li><li>时钟。</li><li>重定位（从 FLASH 拷代码到 SDRAM）</li><li>清 bss 段</li><li>最后调用 C 函数 start_armboot：执行更复杂的第二阶段</li></ol><h2 id="2-UBOOT启动第二阶段"><a href="#2-UBOOT启动第二阶段" class="headerlink" title="2 UBOOT启动第二阶段"></a>2 UBOOT启动第二阶段</h2><p>第二阶段的start_armboot在lib_arm&#x2F;board.c：</p><p><img src="6_start_armboot.png" alt="6_start_armboot"></p><p><img src="5_start_armboot.png" alt="5_start_armboot"></p><p><img src="7_start_armboot.png" alt="7_start_armboot"></p><ol><li>分配一个类型为 gd_t* 这样的结构体指针的内存空间给 gd全局变量，并且gd全局变量是保存在寄存器中的，使用了__asm__ <strong>volatile</strong>(“”: : :”memory”)。这个结构体贯穿整个uboot。</li><li>使用函数指针数组，完成一系列初始化。包括nor flash，nand flash，环境变量初始化等。</li><li>最后跳转到main_loop函数，处理命令。</li></ol><p>main_loop函数在common&#x2F;main.c中：</p><p><img src="8_main_loop.png" alt="8_main_loop"></p><p><img src="9_main_loop.png" alt="9_main_loop"></p><p><img src="10_main_loop.png" alt="10_main_loop"></p><ol><li>获取bootdelay倒数计时变量。</li><li>如果在这个倒数计时到达到 0 之前，没有输入空格键，就会启动bootcmd命令。</li><li>否则就进入等待命令输入，然后处理命令的死循环。</li><li>UBOOT 的核心就是这些”命令” run_commnd()，分析了这些命令的实现之后，才能明白内核的加载与启动。</li></ol><h2 id="3-UBOOT的命令实现"><a href="#3-UBOOT的命令实现" class="headerlink" title="3 UBOOT的命令实现"></a>3 UBOOT的命令实现</h2><p>UBOOT 接收串口输入时，会根据串口输入的字符去查找相应的处理函数。最简单的方法就是做一个结构体，这个结构体里面有名字，还有相应的处理函数。即cmd_tbl_t。查找函数如下：</p><p><img src="11_find_cmd.png" alt="11_find_cmd"></p><p>这就与我们的链接脚本对应上了，uboot会把所有的命令做成一个cmd_tbl_t结构体，里面有函数名字，对应的处理函数，并把所有的命令结构体都放到__u_boot_cmd_start段中，以后要执行对应的命令时就去该段根据名字查找到对应命令结构体，最后调用其处理函数即可。</p><p>究竟是不是如此。我们分析命令的定义即可：</p><p><img src="12_uboot_cmd.png" alt="12_uboot_cmd"></p><p><img src="13_uboot_cmd.png" alt="13_uboot_cmd"></p><p>最终展开后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">cmd_tbl_t</span> __u_boot_cmd_bootm __attribute__ ((unused,section (<span class="string">&quot;.u_boot_cmd&quot;</span>)))= &#123;</span><br><span class="line">    “bootm”,</span><br><span class="line">    CFG_MAXARGS,</span><br><span class="line">    <span class="number">1</span>, do_bootm, </span><br><span class="line">    <span class="string">&quot;bootm - boot application image from memory\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[addr [arg ...]]\n - boot application image stored in memory\n&quot;</span></span><br><span class="line">     <span class="string">&quot;\tpassing arguments &#x27;arg ...&#x27;; when booting a Linux kernel,\n&quot;</span></span><br><span class="line">     <span class="string">&quot;\t&#x27;arg&#x27; can be the address of an initrd image\n&quot;</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> CONFIG_OF_FLAT_TREE</span></span><br><span class="line">    <span class="string">&quot;\tWhen booting a Linux kernel which requires a flat device-tree\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\ta third argument is required which is the address of the of the\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\tdevice-tree blob. To boot that kernel without an initrd image,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\tuse a &#x27;-&#x27; for the second argument. If you do not pass a third\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\ta bd_info struct will be passed instead\n</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>故在代码中，所有用 U_BOOT_CMD 宏定义的东西，最终都会定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">cmd_tbl_t</span>  __u_boot_cmd_#<span class="meta">#name __attribute__ (...)</span></span><br></pre></td></tr></table></figure><p>这样的结构体特别在于有一个属性。就是将它的段强制指定为 .u_boot_cmd 。所有的命令结构体最终都会被集中在这个段内，很容易根据名字遍历查找。这和RT-Thread自动初始化段类似。</p><h2 id="4-UBOOT的终极目的"><a href="#4-UBOOT的终极目的" class="headerlink" title="4 UBOOT的终极目的"></a>4 UBOOT的终极目的</h2><ol><li><p>uboot的最终目的是去启动linux内核，假设我们在bootdelay之前没有按下空格键，他就会执行bootcmd中保存的命令，该命令一般有两条，第一条去flash的某一分区读取我们的linux内核到SDRAM中某一地址，这个地址可以随意，只要不破坏我们的其他内容即可。</p></li><li><p>uboot是不能识别linux直接编译出来的zImage的，他要经过uboot的脚本给zImage加上64字节的头部成为uImage才能被识别，这个头部包含了内核镜像的信息，内核的加载地址等。</p></li><li><p>从flash读取linux内核到SDRAM指定地方后，调用bootcmd的第二条命令bootm addr，该命令最终调用do_bootm函数，然后会分析uImage的头部信息，如果现在的地址不等于内核的加载地址，则还需要把内核重定位到他的加载地址去，最后调用do_bootm_linux跳转到内核真正的入口地址处，然后uboot就一去不复回了。</p></li></ol><p>do_bootm_linux函数如下：</p><p><img src="14_do_bootm_linux.png" alt="14_do_bootm_linux"></p><p><img src="15_do_bootm_linux.png" alt="15_do_bootm_linux"></p><ol><li>首先定义了一个函数指针theKernel，让他指向内核真正的入口地址处。</li><li>最后调用theKernel (0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params);</li><li>他有三个参数，第二个参数是芯片ID，内核根据这个ID判断自己是否能够支持该芯片，第三个是uboot要传递给内核的一些信息所在的首地址。</li><li>uboot可以将板子的一些信息，按照内核约定的格式存放起来，这个格式叫做tag，把所有的tag都集中放在一起，跳转到内核的时候把这个地址当作参数传递给内核，内核看到该地址就知道了，哦，原来uboot给我“留言”了，放在了“xxx”地址。</li></ol><p>至此，uboot的使命就结束了，还有很多细节没有列举出来，不同芯片的整体流程都大同小异！</p><h1 id="五-SPL为何物"><a href="#五-SPL为何物" class="headerlink" title="五. SPL为何物"></a>五. SPL为何物</h1><h2 id="1-SPL-名字由来"><a href="#1-SPL-名字由来" class="headerlink" title="1. SPL 名字由来"></a>1. SPL 名字由来</h2><p>SPL 全称叫做：Secondary Program Loader，看名字，像是一个什么二级加载相关的；实质上，也是二级加载；众所周知，u-boot 是用来 boot 我们的嵌入式系统的，那直接使用 u-boot 就行了呗，为何还会多出一个 uboot spl 呢？那我们从系统启动开始说起吧；</p><p>站在芯片厂商的角度来说，硬件系统一上电，一定是要去某个地址取指令（一般是 0x00000000），然后软件便开始很欢快的运行起来了；通常来讲，SoC 厂家都会做一个 ROM 在 SoC 内部，这个 ROM 很小(成本，你懂的)，里面固化了上电启动的代码（一经固化，永不能改，是芯片做的时候，做进去的）；这部分代码呢，我们管它叫做 BootROM。</p><p>换句话来说，上电后，先接管系统的是 SoC 厂家的 BootROM，他要做些什么事情呢？<br>他要负责最原始的初始化，这个 BootROM 叫做一级启动程序，而排在后面的就叫二级启动，这就是 SPL 名字的由来；</p><h2 id="2-SPL-拿来干嘛"><a href="#2-SPL-拿来干嘛" class="headerlink" title="2. SPL 拿来干嘛"></a>2. SPL 拿来干嘛</h2><h3 id="2-1-铺垫"><a href="#2-1-铺垫" class="headerlink" title="2.1 铺垫"></a>2.1 铺垫</h3><p>为了讲清楚 spl 的用处，我需要先铺垫一点其他东西；如果是大芯片（不是单片机），外挂了存储设备（eMMC、Nand、SDCard 等）和内存 RAM（SDRAM、DDR 等），通常情况下呢，我们要让系统跑起来，需要先烧写代码，这个烧写代码，其实是将可执行的二进制文件写到外部的存储设备上（eMMC、Nand、SD Card 等）；系统上电启动的时候呢，去把他们读到内存中去执行；</p><p>前面我们说了，上电后，先执行SoC 厂家自己的 BootROM，其他可执行的程序（u-boot、Kernel）都放（烧写）到了外部存储器上；那么BootROM 的代码除了去初始化硬件环境以外，还需要去外部存储器上面，将接下来可执行的程序读到内存来执行；</p><p>既然是读到内存执行，那么这个内存可以不可以是我们板载的 DDR 呢？理论上是可以的，但是，SoC 厂家设计的 DDR 控制器一般会支持很多种类型的 DDR 设备，并且会提供兼容性列表，<br>SoC 厂家怎么可能知道用户 PCB 上到底用了哪种内存呢？所以，直接把外部可执行程序读到 DDR 显然是不太友好的，一般来说，SoC 都会做一个内部的小容量的 SRAM （又是成本），BootROM 将外部的可执行程序从存储器中读出来，放到 内部SRAM 去执行；</p><p>好了，现在我们引出了 SRAM，引出了 BootROM；那么 BootROM 从具体哪个存储器读出二进制文件呢？SoC 厂家一般会支持多种启动方式，比如从 eMMC 读取，从 SDCard 读取，从 Nand Flash 读取等等；上电的时候，需要告诉它，它需要从什么样的外设来读取后面的启动二进制文件；</p><p>一般的设计思路是，做一组 Bootstrap Pin，上电的时候呢？BootROM 去采集这几个 IO 的电平，来确认要从什么样的外部存储器来加载后续的可执行文件；比如，2 个 IO，2’b00 表示从 Nand 启动，2’b01 表示从 eMMC 启动，2’b10 表示从 SDCard 启动等等；</p><p>当 BootROM 读到这些值后，就会去初始化对应的外设，然后来读取后面要执行的代码；这些 IO 一般来说，会做成板载的拨码开关，用于调整芯片的启动方式；这里，多说一句，读取烧写的二进制的时候呢，需要注意一些细节，比如，SoC 厂家告诉你，你需要先把 SDCard 初始化称为某种文件系统，然后把东西放进去才有效，之类的；因为文件系统是组织文件的方式，并不是裸分区；你按照 A 文件系统的方式放进去，然后 SoC 的 BootROM 也按照 A 文件系统的方式读出来，才能够达成一致；</p><h3 id="2-2-SPL具体作用"><a href="#2-2-SPL具体作用" class="headerlink" title="2.2 SPL具体作用"></a>2.2 SPL具体作用</h3><p>铺垫得够多的了，这里我们回归主题：spl；前面说了，BootROM 会根据 Bootstrap Pin 去确定从某个存储器来读可执行的二进制文件到 SRAM 并执行；理论上来说，这个二进制文件就可以是我们的 u-boot.bin 文件了；也就是 BootROM 直接加载 u-boot.bin；</p><p>但是这里有一个问题，就是 SRAM 很贵，一般来说，SoC 的片上 SRAM 都不会太大，一般 4KB、8KB、16KB…256KB不等；但是呢，u-boot 编译出来却很大，好几百KB，放不下！</p><p>放不下怎么办？比如，我们的 u-boot 有 300KB，SRAM 有 8KB，外部 DDR 1GB，有两种办法：</p><ol><li>做一个小一点的 boot 程序，先让 BootROM 加载这个小的程序，后面再由这个小 boot 去加载 u-boot；这个小的 boot 就叫做 spl，它很小很小（小于SRAM大小），它先被 BootROM 加载到 SRAM 运行，那么这个 spl 要做什么事情呢？最主要的就是要初始化 DDR Controller，然后将真正的大 u-boot 从外部存储器读取到 DDR 中，然后跳转到大 u-boot；</li><li>放不下就放不下呗，BootROM 加载多少算多少，但是这部分uboot要完成初始化DDR，并把完整的uboot搬运到DDR去运行；u-boot 的前面 8K 被加载进入 SRAM 执行，u-boot 被截断，我们就需要保证在 u-boot 的前 8KB 代码，把板载的 DDR 初始化好，把整个 u-boot 拷贝到 DDR，然后跳转到 DDR 执行；</li></ol><p>方案一：SPL流程如下：先假设，我们的“货”，都已经放置到了外部存储器上，也就是绿色部分；</p><p><img src="16_SPL.jpg" alt="16_SPL"></p><ol start="0"><li>上电后BootROM 执行最原始的初始化，根据 Bootstrap Pin 来确定启动设备，初始化外设；</li><li>从存储器读取 SPL；<br>—————- 以上部分是 SoC 厂家的事情，下面是用户要做的事情 —————-</li><li>SPL 被读到内部 SRAM 执行，此刻，控制权已经移交到我们的 SPL 了；</li><li>SPL 初始化外部 DDR；</li><li>SPL 使用从外部存储器读取 u-boot 并放到 DDR；</li><li>跳转到 DDR 中的 u-boot 执行；</li><li>加载内核；</li></ol><p>方案二：可能会涉及两次重定向；</p><p>第一次：</p><ol><li>第一次在lowlevel_init返回后，进入board_init_f函数之前，lowlevel_init设置好了时钟和ddr，为uboot的第一次重定位做好准备。我们的bootrom只拷贝了uboot的前几k代码到sram执行，而大部分uboot的代码还在SD卡中没有载入内存，没有载入sram的原因是之前我们使用的是内部SRAM，容量不足以放下整个uboot，而现在已经初始化好了外部DRAM，拥有了512MB内存，是完完全全够放下整个uboot，所以这里的第一次重定位就是将SD卡中完整的uboot.bin载入到ddr中(链接地址处)，然后绝对跳转到ddr中board_init_f函数去运行。</li><li>在重定位到链接地址之前的代码只能用位置无关码，也就是相对跳转，不能绝对跳转，因为绝对跳转是跳到链接地址上，但是重定位之前链接地址处那里我们还没有放代码呢。</li><li>重定位到DDR链接地址并跳转到board_init_f后，就可以使用函数指针等全局的变量了(board_init_f中使用了函数指针数组完成一系列初始化)；注意这里不是跳到DDR中uboot开始地址。</li></ol><p>第二次：</p><ol><li>第二次在board_init_f函数最后会调用汇编实现的ENTRY(relocate_code)，在前面第一次重定位将u-boot从SD卡拷贝到DDR中时，是拷贝到链接地址的，也就是说那个时候u-boot的运行地址就和链接地址一致了，可以正常运行完整个u-boot，这里又再次重定位，只不过是为了将u-boot搬到内存的高地址去运行，是因为防止内核解压的时候覆盖了u-boot本身。</li><li>但是要注意，如果这次像第一次那样将uboot复制到DDR高地址，然后绝对跳转过去执行，后续函数中如果有函数调用或使用全局变量的时候，还是会回到链接地址处，也就是DDR低地址处的uboot，这就与我们本意相悖，所以relocate_code最后还要修改DDR高地址的uboot.bin的rel段的数据，那是所有需要重定位的变量、函数的地址信息，加上DDR低地址到DDR高地址的偏移量即可。</li><li>relocate_code结束后使用绝对地址跳转到DDR高地址处的uboot.bin的board_init_r函数入口，也就是在DDR高地址继续执行Uboot，注意这里不是跳到DDR中高地址uboot的开始地址。第二次重定位也称自举，形象的说就是把自己举高高。</li></ol><p>你可能存在疑问，为什么要两次重定位呢，直接第一次就复制到DDR的高地址不行吗？其实我也是这样想的，可能具体芯片其自己的考虑，一般来说是一次就重定位到DDR顶部的。</p>]]></content>
      
      
      <categories>
          
          <category> uboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uboot spl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码重定位</title>
      <link href="/2023/02/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/02/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-重定位的引入"><a href="#1-重定位的引入" class="headerlink" title="1. 重定位的引入"></a>1. 重定位的引入</h1><p>S3C2440的CPU可以直接给片外SDRAM、4K的片内SRAM、Nor Flash、发送读写命令，但是不能直接给Nand Flash发送读写命令。假如把程序烧写到Nand Flash上，即向Nand Flash烧入bin文件，CPU是无法从Nand Flash中取代码执行的。</p><p>那为什还可以使用NAND启动?</p><ol><li>上电后，CPU检测到NAND启动，会自动把Nand Flash前4K内容复制到片内SRAM;</li><li>CPU从0地址运行SRAM;</li><li>如果程序大于4K，前4K的代码需要把整个程序读出来放到SDRAM(即代码重定位)；</li></ol><p>如果从Nor Flash启动，会出现什么问题?</p><ol><li>将拨动开关拨到Nor Flash启动时，此时CPU认为的0地址在Nor Flash上面，片内SRAM的基地址就变成了0x40000000(Nand启动时片内SRAM的基地址是0)。</li><li>Nor Flash可以像内存一样读，但不能和内存一样写，因此需要将全局变量和静态变量重定位到片外SDRAM中。局部变量不需要重定位，因为其保存在栈中。</li></ol><p>例如执行如下几条汇编指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV R0, #0</span><br><span class="line">LDR R1, [R0] @读有效</span><br><span class="line">STR R1, [R0] @写无效</span><br></pre></td></tr></table></figure><p>当程序中含有需要写的全局变量或者静态变量时，假如是NAND Flash可以正常操作，因为此时其实是在片内SRAM中执行的，但如果是在Nor Flash则写无效，因此我们需要将全局变量和静态变量重定位到片外SDRAM中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;s3c2440_soc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;init.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g_Char = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> g_Char2 = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="type">int</span> g_A = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> g_B;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">uart0_init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(g_Char);    <span class="comment">//串口输出g_Char</span></span><br><span class="line">g_Char++;           <span class="comment">//Nor中g_Char++无效</span></span><br><span class="line">delay(<span class="number">1000000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接：arm-linux-ld -Ttext 0 -Tdata 0x800 start.o uart.o init.o main.o -o relocate.elf<br>烧写在NAND中启动显示ABCDE…。<br>烧写在Nor中启动显示AAA…，也即说明了Nor不能正常的写。</p><p>我们的bin文件大小是2049字节，也就是我们指定的-Tdata 0x800后只存放了char g_Char &#x3D; ‘A’ 这个变量，<br>其他的变量呢？查看反汇编文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .data:</span><br><span class="line"></span><br><span class="line">00000800 &lt;__data_start&gt;:</span><br><span class="line"> 800:Address 0x800 is out of bounds.     //数据段开始，-Tdata 0x800指定</span><br><span class="line"></span><br><span class="line">Disassembly of section .rodata:</span><br><span class="line"></span><br><span class="line">00000474 &lt;g_Char2&gt;:                         //const放在只读数据段内</span><br><span class="line"> 474:Address 0x474 is out of bounds.</span><br><span class="line"></span><br><span class="line">Disassembly of section .bss:                //未初始化的和初值为0的变量都放在bss段，不保存在bin中</span><br><span class="line"></span><br><span class="line">00000804 &lt;g_A&gt;:</span><br><span class="line"> 804:00000000 andeqr0, r0, r0</span><br><span class="line"></span><br><span class="line">00000808 &lt;g_B&gt;:</span><br><span class="line"> 808:00000000 andeqr0, r0, r0</span><br><span class="line">Disassembly of section .comment:            //注释，调试信息等，不保存在bin中，会保存在elf中</span><br><span class="line"></span><br><span class="line">00000000 &lt;.comment&gt;:</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="2-链接脚本的引入"><a href="#2-链接脚本的引入" class="headerlink" title="2. 链接脚本的引入"></a>2. 链接脚本的引入</h1><p>前面程序发现在Nor Flash启动和从Nand Flash启动的效果不同，这是为什么呢？</p><ol><li>假如现在是从Nor启动：</li></ol><p><img src="1_Nor%E5%90%AF%E5%8A%A8.png" alt="Nor启动"></p><p>Nor Flash就被认为是0地址，g_Char被放到0x800后面。CPU上电后开始从0地址运行，它能读取Nor上的代码执行（xip，execute in place），打印出A，但执行g_Char++的时候，写操作无效，所以下次打印出来还是A。</p><ol start="2"><li>假如现在是从Nand启动：</li></ol><p><img src="2_Nand%E5%90%AF%E5%8A%A8.png" alt="Nand启动"></p><p>上电后Nand Flash前4K的代码被自动的复制到片内SRAM，此时的0地址就是片内SRAM，CPU上电后开始从0地址运行，读取片内SRAM上的代码执行，所以g_Char++能够生效。</p><p>为了解决Nor Flash中变量不能修改的问题，可以将变量所在的.data段放在片外SDRAM中试试：<br>链接：arm-linux-ld -Ttext 0 -Tdata 0x30000000 start.o uart.o init.o main.o -o relocate.elf<br>编译出来的bin文件很大，因为从0地址到0x30000000之间有一大块空白区域在代码段和数据段之间，称为“黑洞”。</p><p><img src="3_%E9%BB%91%E6%B4%9E%E5%8C%BA.png" alt="黑洞区"></p><p>解决黑洞区有两个办法：这两个办法的区别一个只重定位了数据段，另一个重定位了整个程序；</p><p>第一个办法：</p><ol><li>把数据段和代码段靠在一起;</li><li>烧写到Nor上，运行时把数据段复制到片外SDRAM，即0x30000000（重定位）;</li></ol><p>第二个办法：</p><ol><li>让文件直接从0x30000000地址开始，全局变量在0x3…….;</li><li>烧写到Nor上，运行时把整个程序从0地址复制到片外SDRAM上，即0x30000000（重定位）；</li></ol><p>要实现两种办法需要引入链接脚本，先来看看链接脚本的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS&#123;</span><br><span class="line">...</span><br><span class="line">secname start BLOCK(align) (NOLOAD) : AT(ldadr)</span><br><span class="line">&#123; contents &#125; &gt;region : phdr =fill</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">解释：</span><br><span class="line">secname：段名</span><br><span class="line">start：起始地址，链接地址，运行时地址(runtime addr)，重定位地址(relocate addr)</span><br><span class="line">AT(ldadr)：加载地址(load addr)，省略时：load addr = runtime addr</span><br><span class="line">&#123; contents &#125;：这个段要放的内容</span><br><span class="line">&gt;region : phdr =fill：可以不写，我们用不上</span><br></pre></td></tr></table></figure><p><strong>我的理解：</strong></p><p>就嵌入式系统而言，程序通常编译和链接为在一个特定的内存地址运行——这通常是SDRAM的起始地址。这个地址就是链接地址，因为它被用于编译时解析程序内的地址。然后，这个程序的镜像（二进制文件）被烧录到了Flash存储器中的一个位置，这个位置被称为Flash的烧录地址，也就是加载地址。在系统上电启动时，引导加载器（Bootloader）会将程序从Flash复制到SDRAM中，这时它被复制到的是预先设置好的链接地址。</p><p>换句话说，链接地址是程序预计会运行的内存地址，加载地址是程序实际存储在非易失性存储介质上的地址。当系统启动时，Bootloader负责将程序从Flash（加载地址）复制到SDRAM的链接地址处。</p><p><strong>总结：</strong></p><p>链接地址：是程序在内存中预期运行的位置，也是链接器在生成可执行程序时使用的地址。</p><p>加载地址：在嵌入式环境中通常是指程序存储在非易失性存储（如Flash）中的地址。</p><p>启动时，Bootloader负责将程序从其在Flash中的存储位置（加载地址）复制到SDRAM的链接地址处开始执行。</p><h2 id="2-1-分体式链接脚本"><a href="#2-1-分体式链接脚本" class="headerlink" title="2.1 分体式链接脚本"></a>2.1 分体式链接脚本</h2><p>我们来实现第一种办法：让数据段放在0x800，运行时在0x30000000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">.text   0  : &#123; *(.text) &#125;//所有文件的.text</span><br><span class="line">.rodata  : &#123; *(.rodata) &#125;//所有文件的只读数据段</span><br><span class="line">.data 0x30000000 : AT(0x800) &#123; *(.data) &#125;//加载地址为0x800，链接地址为0x30000000</span><br><span class="line">.bss  : &#123; *(.bss) *(.COMMON) &#125;              //所有文件的bss段、common段</span><br><span class="line">&#125;</span><br><span class="line">//链接：arm-linux-ld -T relocate.lds start.o uart.o init.o main.o -o relocate.elf</span><br></pre></td></tr></table></figure><p>重新编译烧录程序发现打印乱码，这是因为我们会从链接地址0x30000000获取g_Char，但在这之前并没有在该地址处准备好数据，因此我们需要重定位数据段，将数据段的加载地址0x800处把数据移动到链接地址。在start.s中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 重定位data段 */</span><br><span class="line">mov r1, #0x800</span><br><span class="line">ldr r0, [r1]</span><br><span class="line">mov r1, #0x30000000</span><br><span class="line">str r0, [r1]</span><br><span class="line"></span><br><span class="line">bl main</span><br></pre></td></tr></table></figure><p>这种写法不太通用，只能复制0x800处的一个数据，而且加载地址还需要自己确定，并且因为bin文件不保存bss段，所以我们的程序还需要将bss段清零。改进如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">.text   0  : &#123; *(.text) &#125;            //所有文件的.text</span><br><span class="line">.rodata  : &#123; *(.rodata) &#125;            //所有文件的只读数据段</span><br><span class="line">.data 0x30000000 : AT(0x800) </span><br><span class="line">&#123; </span><br><span class="line">data_load_addr = LOADADDR(.data); //使用宏提取出加载地址</span><br><span class="line">data_start = . ;</span><br><span class="line">*(.data) </span><br><span class="line">data_end = . ;</span><br><span class="line">&#125;</span><br><span class="line">bss_start = .;</span><br><span class="line">.bss  : &#123; *(.bss) *(.COMMON) &#125;</span><br><span class="line">bss_end = .;</span><br><span class="line">&#125;</span><br><span class="line">//链接：arm-linux-ld -T relocate.lds start.o uart.o init.o main.o -o relocate.elf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 重定位data段 */</span><br><span class="line">ldr r1, =data_load_addr  /* data段在bin文件中的地址, 加载地址 */</span><br><span class="line">ldr r2, =data_start  /* data段在重定位地址, 运行时的地址 */</span><br><span class="line">ldr r3, =data_end      /* data段结束地址 */</span><br><span class="line"></span><br><span class="line">cpy:</span><br><span class="line">ldrb r4, [r1]</span><br><span class="line">strb r4, [r2]</span><br><span class="line">add r1, r1, #1</span><br><span class="line">add r2, r2, #1</span><br><span class="line">cmp r2, r3</span><br><span class="line">bne cpy</span><br><span class="line"></span><br><span class="line">/* 清除BSS段 */</span><br><span class="line">ldr r1, =bss_start</span><br><span class="line">ldr r2, =bss_end</span><br><span class="line">mov r3, #0</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">strb r3, [r1]</span><br><span class="line">add r1, r1, #1</span><br><span class="line">cmp r1, r2</span><br><span class="line">bne clean</span><br><span class="line"></span><br><span class="line">bl main</span><br></pre></td></tr></table></figure><h2 id="2-2-改进链接脚本"><a href="#2-2-改进链接脚本" class="headerlink" title="2.2 改进链接脚本"></a>2.2 改进链接脚本</h2><p>硬件的访问是很耗时的，2440的Nor Flash是16位，SDRAM是32位。假设现在需要重定位16Byte。</p><p>采用ldrb，strb命令每次只能读写1Byte数据：</p><ol><li>内存控制器收到ldrb命令后访问Nor，需要访问Nor硬件16次；</li><li>内存控制器收到str命令后访问SDRAM，需要访问SDRAM硬件16次；</li><li>复制16Byte一共访问了32次硬件；</li></ol><p>采用ldr，str命令一次能读写4Byte数据：</p><ol><li>内存控制器收到ldr命令后访问Nor，CPU发出4次ldr，需要访问Nor硬件8次；</li><li>内存控制器收到str命令后访问SDRAM，CPU发出4次str，需要访问SDRAM硬件4次；</li><li>复制16Byte一共访问了12次硬件；</li></ol><p>继续改进代码：此时要注意地址对齐，否则清除bss段时很可能会意外清除掉data段的数据，使用ALIGN对齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS &#123;</span><br><span class="line">.text   0  : &#123; *(.text) &#125;</span><br><span class="line">.rodata  : &#123; *(.rodata) &#125;</span><br><span class="line">.data 0x30000000 : AT(0x800) </span><br><span class="line">&#123; </span><br><span class="line">data_load_addr = LOADADDR(.data);</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">data_start = . ;</span><br><span class="line">*(.data) </span><br><span class="line">data_end = . ;</span><br><span class="line">&#125;</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">bss_start = .;</span><br><span class="line">.bss  : &#123; *(.bss) *(.COMMON) &#125;</span><br><span class="line">bss_end = .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/* 重定位data段 */</span><br><span class="line">ldr r1, =data_load_addr  /* data段在bin文件中的地址, 加载地址 */</span><br><span class="line">ldr r2, =data_start  /* data段在重定位地址, 运行时的地址 */</span><br><span class="line">ldr r3, =data_end      /* data段结束地址 */</span><br><span class="line"></span><br><span class="line">cpy:</span><br><span class="line">ldr r4, [r1]</span><br><span class="line">str r4, [r2]</span><br><span class="line">add r1, r1, #4</span><br><span class="line">add r2, r2, #4</span><br><span class="line">cmp r2, r3</span><br><span class="line">ble cpy</span><br><span class="line"></span><br><span class="line">/* 清除BSS段 */</span><br><span class="line">ldr r1, =bss_start</span><br><span class="line">ldr r2, =bss_end</span><br><span class="line">mov r3, #0</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">str r3, [r1]</span><br><span class="line">add r1, r1, #4</span><br><span class="line">cmp r1, r2</span><br><span class="line">ble clean</span><br><span class="line"></span><br><span class="line">bl main</span><br></pre></td></tr></table></figure><h2 id="2-3-一体式链接脚本"><a href="#2-3-一体式链接脚本" class="headerlink" title="2.3 一体式链接脚本"></a>2.3 一体式链接脚本</h2><p>分体式链接脚本的代码段和数据段的链接地址是分开的，一体式链接脚本的代码段、数据段等都是连续在一起的，我们的嵌入式系统一般都采用一体式，原因如下：</p><ol><li>分体式链接脚本适合单片机，单片机自带有flash可以xip，不需要将代码复制到ram中。</li><li>单片机的ram资源很小，所以将代码复制到ram是很浪费的。</li><li>嵌入式系统ram很大，没必要节省这点空间，而且很多没有nor flash这种xip的flash；</li><li>所以嵌入式需要使用一体式将Nand Flash或SD卡中的程序全部复制到ram中执行。</li></ol><p>修改链接脚本和start.s如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">. = 0x30000000;</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.text      :</span><br><span class="line">&#123;</span><br><span class="line">*(.text)</span><br><span class="line">&#125;</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.rodata : &#123; *(.rodata) &#125;</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">.data : &#123; *(.data) &#125;</span><br><span class="line">. = ALIGN(4);</span><br><span class="line">__bss_start = .;</span><br><span class="line">.bss : &#123; *(.bss) *(.COMMON) &#125;</span><br><span class="line">_end = .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AT(ldadr)：加载地址(load addr)，省略时：加载地址 &#x3D; 链接地址<br>按照这个理论，上面这个链接脚本生成的可执行文件加载地址为：0x30000000</p><p>烧录工具会读取ELF文件的程序头（Program Headers）部分，找到加载地址，指示烧录工具对应的段需要被烧录到什么地址中。2440设置为nor启动时，CPU的0地址就是nor flash的0地址，而加载地址：0x30000000这是外部sdram。</p><p><strong>疑问：</strong>烧录器看到加载地址是0x30000000，不就会将程序烧写到外部sdram了吗（也烧录不了，因为没有初始化），而我需要烧写到nor或者nand中!</p><p><strong>解答：</strong>我的理解是，韦东山做的那个2440的oflash烧录工具应该有他自己的一套烧录机制，即：他的烧录工具不是根据elf中的加载地址来烧录。比如烧录时要通过oflash选择烧录到nor还是nand，烧录到nand的哪个bank，以这样的方式设置了加载地址，烧录器再将代码烧录到对应地址去。</p><p>正规的链接脚本写法是rtthread的stm32 bsp：<a href="https://github.com/qingOOyuan/RTT_STM32_HAL_ZET6">https://github.com/qingOOyuan/RTT_STM32_HAL_ZET6</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/* 重定位text, rodata, data段整个程序 */</span><br><span class="line"></span><br><span class="line">/* nor和nand的加载地址都是0，注意：是flash自身视角的0地址，而不是CPU视角的0地址，</span><br><span class="line">(虽然对于2440而言，nor启动时：CPU视角的0地址 = nor flash视角的0地址)。 */</span><br><span class="line">mov r1, #0</span><br><span class="line"></span><br><span class="line">/* 第1条指令运行时的地址 */</span><br><span class="line">ldr r2, =_start</span><br><span class="line"></span><br><span class="line">/* bss段的起始地址 */</span><br><span class="line">ldr r3, =__bss_start</span><br><span class="line"></span><br><span class="line">/* 此处只写了nor的重定位，nand不能像nor一样支持RAM般直接读取，需要操作nand控制器，</span><br><span class="line"> * 从nand flash的0地址处(加载地址)，开始读取内容，重定位到链接地址(运行时地址)。 */ </span><br><span class="line">cpy:                           </span><br><span class="line">ldr r4, [r1]</span><br><span class="line">str r4, [r2]</span><br><span class="line">add r1, r1, #4</span><br><span class="line">add r2, r2, #4</span><br><span class="line">cmp r2, r3</span><br><span class="line">ble cpy</span><br><span class="line"></span><br><span class="line">/* 清除BSS段 */</span><br><span class="line">ldr r1, =__bss_start</span><br><span class="line">ldr r2, =_end</span><br><span class="line">mov r3, #0</span><br><span class="line">clean:</span><br><span class="line">str r3, [r1]</span><br><span class="line">add r1, r1, #4</span><br><span class="line">cmp r1, r2</span><br><span class="line">ble clean</span><br><span class="line"></span><br><span class="line">//bl main      /* 使用BL命令相对跳转, 程序仍然在NOR/sram执行 */</span><br><span class="line">ldr pc, =main  /* 绝对跳转, 跳到SDRAM */</span><br></pre></td></tr></table></figure><p>最终整个代码的流程如下图所示：</p><p><img src="4_%E4%B8%80%E4%BD%93%E5%BC%8F%E9%93%BE%E6%8E%A5%E8%84%9A%E6%9C%AC%E9%87%8D%E5%AE%9A%E4%BD%8D%E5%9B%BE%E7%A4%BA.png" alt="一体式链接脚本重定位图示"></p><h1 id="3-位置无关码"><a href="#3-位置无关码" class="headerlink" title="3. 位置无关码"></a>3. 位置无关码</h1><p>为什么我们的链接地址再SDRAM中，在Nor Flash中的0地址还能够运行呢？这就要引入位置无关码，当我们访问全局变量或者函数指针等数据的时候访问的是其链接地址，但我们用bl等指令的时候，使用的是PC值+offset的方式访问的。也就与他的链接地址无关，所以我们重定位以及重定位之前的代码都需要用位置无关码来编写，查看反汇编文件：</p><p><img src="5_%E4%BD%8D%E7%BD%AE%E6%97%A0%E5%85%B3%E7%A0%81.png" alt="位置无关码反汇编"></p><p>尝试更改链接地址，bl处的机器码eb000106都是一样的，机器码一样，执行的内容肯定都是一样的。因此这里并不是跳转到显示的地址(链接地址)，而是跳转到: pc + offset，offset由链接器决定。<br>假设程序从0x30000000执行，当前指令地址：0x3000005c ，那么就是跳到0x30000478;<br>假设程序从0地址运行，当前指令地址：0x5c，那么就是跳到:0x00000478；<br>跳转到某个地址并不是由bl指令决定，是由当前pc值决定。反汇编显示该值只是为了方便读代码；</p><p>怎么写位置无关码</p><ol><li>使用相对跳转命令b或bl。</li><li>重定位之前不可以使用绝对地址，不可以访问全局变量、静态变量，也不可以访问有初始值的数组(数组的初始值放在.rodata里，使用绝对地址来访问)。</li><li>重定位之后，使用ldr pc, &#x3D;main，跳转到链接地址去运行。</li><li>前面的一体式重定位程序如果最后还是使用bl相对跳转到main，程序仍在Nor&#x2F;SRAM执行，要想main函数在SDRAM执行，需要使用绝对地址跳转。</li></ol><p>写位置无关码，其实就是不使用绝对地址，判断有没有使用绝对地址，最根本的办法就是查看反汇编。</p><h1 id="4-C语言实现重定位"><a href="#4-C语言实现重定位" class="headerlink" title="4. C语言实现重定位"></a>4. C语言实现重定位</h1><p>C函数实现和汇编实现最主要的区别就是链接脚本中变量值的获取，假设lds中有一个abc变量：</p><ol><li>汇编中访问链接脚本变量的值，直接使用abc即可；</li><li>C函数中首先声明该变量为外部变量，extern abc；</li><li>使用时要取地址，int *p &#x3D; &amp;abc，此时p的值即为lds中abc的值；</li></ol><p>为什么C函数要加&amp;？</p><ol><li>C函数定义一个int g_k，程序中必然有4字节来存放这个变量g_k;</li><li>如果lds中有非常多的变量，而我们的C程序只用到其中几个，所以完全没有必要存储lds里的变量，也就是C程序是不保存lds中的变量的；</li><li>在编译程序的时候有一个symbol符号表，保存g_k的地址和lds中变量的值；</li></ol><p><img src="6_symbol%E7%AC%A6%E5%8F%B7%E8%A1%A8.png" alt="符号表"></p><p>如何使用symbol符号表：</p><ol><li>对于常规的C程序中的变量地址，使用&amp;g_k获得；</li><li>为了保持代码一致，对于lds中的变量，如a2的值，也使用&amp;a2获得；</li></ol><p>结论：</p><ol><li>C程序不保存lds文件中的变量，所以lds再大也无所谓；</li><li>C程序使用symbol中lds变量的值，使用时加上&amp;，并且申明为外部变量，类型无所谓；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同步与互斥</title>
      <link href="/2023/02/20/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/"/>
      <url>/2023/02/20/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、原子操作"><a href="#一、原子操作" class="headerlink" title="一、原子操作"></a>一、原子操作</h1><h2 id="1-1-产生起源"><a href="#1-1-产生起源" class="headerlink" title="1.1 产生起源"></a>1.1 产生起源</h2><p>我们的程序逻辑经常遇到这样的操作序列：</p><ol><li>读一个位于memory中的变量的值到寄存器中</li><li>修改该变量的值（也就是修改寄存器中的值）</li><li>将寄存器中的数值写回memory中的变量值</li></ol><p>如果这些操作是一个串行化的操作(在一个thread中串行执行)，那么一切是OK的，但是世界总不能如我们所愿，在现在的多CPU架构和支持抢占的内核系统中，总会出现各种奇怪的现象。比如要实现同一时刻只有一个进程打开驱动文件，可以想到用标志位来简单的互斥，但因为CPU的调度是随机的，就会有问题如下：</p><p><img src="0.%E7%AB%9E%E4%BA%89%E5%AE%9E%E4%BE%8B1.png" alt="0.竞争实例1"></p><p><img src="0.%E7%AB%9E%E4%BA%89%E5%AE%9E%E4%BE%8B2.png" alt="0.竞争实例2"></p><p><img src="0.%E7%AB%9E%E4%BA%89%E5%AE%9E%E4%BE%8B3.png" alt="0.竞争实例3"></p><p>所以处理器在访问共享资源时，必须对临界区进行同步，即保证同一时间内，只有一个对临界区的访问者。当共享资源为一内存地址时，原子操作是对该类型共享资源同步访问的最佳方式。随着应用的日益复杂和SMP的广泛使用，处理器都开始提供硬件同步原语以支持原子地更新内存地址。</p><p>从ARMv6架构开始，ARM处理器提供了Exclusive accesses同步原语，包含两条指令：LDREX和STREX，将对一个内存地址的操作拆分成两个步骤，同CPU内置的记录exclusive accesses的exclusive monitors一起，完成对内存的原子操作。</p><p>LDREX与LDR指令类似，完成将内存中的数据加载进寄存器的操作。与LDR指令不同的是，该指令也会同时初始化exclusive monitor来记录对该地址的同步访问。例如LDREX R1, [R0]会将R0寄存器中内存地址的数据，加载进R1中并更新exclusive monitor。</p><p>STREX的格式为：STREX Rd, Rm, [Rn]，STREX会根据exclusive monitor的指示决定是否将寄存器中的值写回内存中。如果exclusive monitor许可这次写入，则STREX会将寄存器Rm的值写回Rn所存储的内存地址中，并将Rd寄存器设置为0表示操作成功。如果exclusive monitor禁止这次写入，则STREX指令会将Rd寄存器的值设置为1表示操作失败并放弃这次写入。应用程序可以根据Rd中的值来判断写回是否成功。</p><h2 id="1-2-原子操作的实现原理与使用"><a href="#1-2-原子操作的实现原理与使用" class="headerlink" title="1.2 原子操作的实现原理与使用"></a>1.2 原子操作的实现原理与使用</h2><p>所谓“原子操作”就是这个操作不会被打断。Linux有2种原子操作：原子变量、原子位。原子变量类型如下，实际上就是一个结构体，特殊的地方在于它的操作函数，如下(下表中v都是atomic_t指针)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">int</span> counter;</span><br><span class="line">&#125; <span class="type">atomic_t</span>;</span><br><span class="line">函数名  作用</span><br><span class="line"><span class="type">atomic_read</span>(v)读出原子变量的值，即v-&gt;counter</span><br><span class="line"><span class="title function_">atomic_set</span><span class="params">(v,i)</span>设置原子变量的值，即v-&gt;counter = i</span><br><span class="line"><span class="title function_">atomic_inc</span><span class="params">(v)</span>v-&gt;counter++</span><br><span class="line"><span class="title function_">atomic_dec</span><span class="params">(v)</span>v-&gt;counter--</span><br><span class="line"><span class="title function_">atomic_add</span><span class="params">(i,v)</span>v-&gt;counter += i</span><br><span class="line"><span class="title function_">atomic_sub</span><span class="params">(i,v)</span>v-&gt;counter -= i</span><br><span class="line"><span class="title function_">atomic_inc_and_test</span><span class="params">(v)</span>先加1，再判断新值是否等于0；等于0的话，返回值为1</span><br><span class="line"><span class="title function_">atomic_dec_and_test</span><span class="params">(v)</span>先减1，再判断新值是否等于0；等于0的话，返回值为1</span><br></pre></td></tr></table></figure><h2 id="1-3-原子变量的内核实现"><a href="#1-3-原子变量的内核实现" class="headerlink" title="1.3 原子变量的内核实现"></a>1.3 原子变量的内核实现</h2><p>SMP就是Symmetric Multi-Processors，对称多处理器；UP即Uni-Processor，系统只有一个单核CPU。原子变量的API都在Linux内核文件arch\arm\include\asm\atomic.h中。</p><p>atomic_read，atomic_set这些操作都只需要一条汇编指令，所以它们本身就是不可打断的。问题在于atomic_inc这类操作，要读出、修改、写回。以atomic_inc为例，在atomic.h文件中，如下定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> atomic_inc(v)atomic_add(1, v)</span></span><br></pre></td></tr></table></figure><p>atomic_add又是怎样实现的呢？用这个宏：ATOMIC_OPS(add, +&#x3D;, add)，把这个宏展开：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ATOMIC_OPS(op, c_op, asm_op)\</span></span><br><span class="line"><span class="meta">ATOMIC_OP(op, c_op, asm_op)\</span></span><br><span class="line"><span class="meta">ATOMIC_OP_RETURN(op, c_op, asm_op)\</span></span><br><span class="line"><span class="meta">ATOMIC_FETCH_OP(op, c_op, asm_op)</span></span><br></pre></td></tr></table></figure><p>从上面的宏可以知道，一个ATOMIC_OPS定义了3个函数。比如“ATOMIC_OPS(add, +&#x3D;, add)”就定义了这3个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">atomic_add</span></span><br><span class="line">atomic_add_return</span><br><span class="line">atomic_atomic_fetch_add 或 atomic_fetch_add_relaxed</span><br></pre></td></tr></table></figure><p>我们以ATOMIC_OP(add, +&#x3D;, add)为例，看它是如何实现atomic_add函数的，对于UP系统、SMP系统，分别有不同的实现方法。</p><h3 id="1-3-1-ATOMIC-OP在UP系统中的实现"><a href="#1-3-1-ATOMIC-OP在UP系统中的实现" class="headerlink" title="1.3.1 ATOMIC_OP在UP系统中的实现"></a>1.3.1 ATOMIC_OP在UP系统中的实现</h3><p>对于ARMv6以下的CPU系统，不支持SMP。原子变量的操作简单粗暴：关中断，中断都关了，谁能来打断我？代码如下(arch\arm\include\asm\atomic.h)：</p><p><img src="1.%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C1..png" alt="1.原子操作1."></p><h3 id="1-3-2-ATOMIC-OP在SMP系统中的实现"><a href="#1-3-2-ATOMIC-OP在SMP系统中的实现" class="headerlink" title="1.3.2 ATOMIC_OP在SMP系统中的实现"></a>1.3.2 ATOMIC_OP在SMP系统中的实现</h3><p>对于ARMv6及以上的CPU，有一些特殊的汇编指令来实现原子操作，不再需要关中断，代码如下(arch\arm\include\asm\atomic.h)：</p><p><img src="1.%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C2.png" alt="1.原子操作2"></p><p>在ARMv6及以上的架构中，有ldrex、strex指令，ex表示exclude，意为独占地。这2条指令要配合使用，举例如下：</p><ol><li>读出：ldrex  r0, [r1]；读取r1所指内存的数据，存入r0，并且标记r1所指内存为“独占访问”。如果有其他程序再次执行“ldrex  r0, [r1]”，一样会成功，一样会标记r1所指内存为“独占访问”。</li><li>修改r0的值</li><li>写入：strex  r2, r0, [r1]；如果r1的“独占访问”标记还存在，则把r0的新值写入r1所指内存，并且清除“独占访问”的标记，把r2设为0表示成功。如果r1的“独占访问”标记不存在了，就不会更新内存，并且把r2设为1表示失败。</li></ol><p>假设这样的抢占场景：</p><ol><li>程序A在读出、修改某个变量时，被程序B抢占了；</li><li>程序B先完成了操作，程序B的strex操作会清除“独占访问”的标记；</li><li>轮到程序A执行剩下的写入操作时，它发现独占访问”标记不存在了，于是取消写入操作。这就避免了这样的事情发生：程序A、B同时修改这个变量，并且都自认为成功了。</li></ol><p>举个例子，比如atomic_dec，假设一开始变量值为1，程序A本想把值从1变为0；但是中途被程序B先把值从1变成0了；但是没关系，程序A里会再次读出新值、修改、写入，最终这个值被程序A从0改为-1。</p><p>在ARMv6及以上的架构中，原子操作不再需要关闭中断，关中断的花销太大了。并且关中断并不适合SMP多CPU系统，你关了CPU0的中断，CPU1也可能会来执行些操作啊。</p><p>在ARMv6及以上的架构中，原子操作的执行过程是可以被打断的，但是它的效果符合“原子”的定义：一个完整的“读、修改、写入”是原子的，不会被别的程序打断。它的思路很简单：如果被别的程序打断了，那就重来一遍“读、修改、写入”，最后总会成功的。</p><h3 id="1-3-3-原子变量使用案例"><a href="#1-3-3-原子变量使用案例" class="headerlink" title="1.3.3 原子变量使用案例"></a>1.3.3 原子变量使用案例</h3><p>使用原子变量实现：只能有一个APP访问驱动程序。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">atomic_t</span> valid = ATOMIC_INIT(<span class="number">1</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">gpio_key_drv_open</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (atomic_dec_and_test(&amp;valid))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">atomic_inc</span>(&amp;valid);</span><br><span class="line">    <span class="keyword">return</span> -EBUSY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gpio_key_drv_close</span> <span class="params">(<span class="keyword">struct</span> inode *node, <span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">atomic_inc</span>(&amp;valid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1.%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C3.png" alt="1.原子操作3"></p><h2 id="1-4-原子位的内核实现"><a href="#1-4-原子位的内核实现" class="headerlink" title="1.4 原子位的内核实现"></a>1.4 原子位的内核实现</h2><p>在ARMv6以下的架构里，不支持SMP系统，原子位的操作函数也是简单粗暴：关中断。以set_bit函数为例，代码在内核文件arch\arm\include\asm\bitops.h中，如下：</p><p><img src="1.%E5%8E%9F%E5%AD%90%E4%BD%8D%E6%93%8D%E4%BD%9C4.png" alt="1.原子位操作4"></p><p>在ARMv6及以上的架构中，不需要关中断，有ldrex、strex等指令，这些指令的作用在前面介绍过，还是以set_bit函数为例，代码如下：</p><p><img src="1.%E5%8E%9F%E5%AD%90%E4%BD%8D%E6%93%8D%E4%BD%9C5.png" alt="1.原子位操作5"></p><h1 id="二、Linux锁的介绍与使用"><a href="#二、Linux锁的介绍与使用" class="headerlink" title="二、Linux锁的介绍与使用"></a>二、Linux锁的介绍与使用</h1><h2 id="2-1-自旋锁"><a href="#2-1-自旋锁" class="headerlink" title="2.1 自旋锁"></a>2.1 自旋锁</h2><p>Linux内核中最常见的锁是自旋锁，自旋锁最多只能被一个可执行线程持有。如果一个线程试图获取一个已被持有的自旋锁，这个线程会进行忙循环——旋转等待锁重新可用，要是锁未被争用，请求锁的执行线程会立马得到它，继续执行。</p><ol><li>持有自旋锁时会关闭内核抢占，他内部会调用调用“preempt_disable()”，防止当前CPU的其他进程抢占当前持有锁的进程，然后又去获取自旋锁导致死锁。</li><li>持有自旋锁时不能睡眠，不然会有死锁风险，由于不睡眠，可以在中断上下文中使用。</li><li>自旋锁最初的设计就是为了SMP系统设计，实现多处理器情况下保护临界区。如果UP不支持抢占，spin_lock是空函数，若UP支持抢占，这时spin_lock的实现就是调用“preempt_disable()”。即：单核没有“取锁动作”，只有多核时自旋锁才存在“取锁动作”</li></ol><p>自旋锁最应该防止的就是死锁，不同情况下可能需要禁止本地中断，或者禁止本地下半部：</p><p><img src="2.%E9%94%81%E7%9A%84%E4%BB%8B%E7%BB%8D1.png" alt="2.锁的介绍1"></p><p>举例介绍一下，上表中第一列“IRQ Handler A”和第三行“Softirq A”的交叉点是“spin_lock_irq()”，意思就是说如果“IRQ Handler A”和“Softirq A”要竞争临界资源，那么需要使用“spin_lock_irq()”函数。为什么不能用spin_lock而要用spin_lock_irq？也就是为什么要把中断给关掉？假设在Softirq A中获得了临界资源，这时发生了IRQ A中断，IRQ Handler A去尝试获得自旋锁，这就会导致死锁：所以需要关中断。</p><p>我的总结是：锁是用来防SMP，禁止中断和下部是防止本地死锁。注意，需要禁止的只是当前处理器上的中断和下半部，如果中断和下半部发生在不同的处理器上，即使在同一把锁上自旋，让它等待当前处理器释放锁即可，不会导致死锁。</p><h2 id="2-2-信号量"><a href="#2-2-信号量" class="headerlink" title="2.2 信号量"></a>2.2 信号量</h2><p>Linux中的信号量是一种睡眠锁，如果一个任务试图获得一个不可用（已经被占用）的信号量时，信号量会将其推进一个等待队列，然后让其睡眠。这是处理器能重获自由，从而去执行其他代码。当持有的信号量可用（被释放）后，处于等待队列中的那个任务将被唤醒，并获得信号量。</p><ol><li>信号量适用于锁会被长时间持有的情况。因为睡眠和维护等待队列以及唤醒有一定的开销。</li><li>占用信号量的同时不能占用自旋锁，因为在等待信号量时可能会睡眠。</li><li>信号量不会禁止内核抢占，所有持有信号量的代码可以被抢占。</li><li>信号量可以允许任意数量的锁持有者，而自旋锁和互斥体一个时刻只允许一个任务持有。</li></ol><h2 id="2-3-互斥体"><a href="#2-3-互斥体" class="headerlink" title="2.3 互斥体"></a>2.3 互斥体</h2><p>mutex的使用场景相对而言更严格，它是计数为1的信号量（有区别），注意事项如下：</p><ol><li>同一时刻只有一个线程可以持有mutex，当进程持有mutex时，进程不可以退出（有争议）。</li><li>只有锁持有者可以解锁，不能在一个进程中持有mutex，在另外一个进程中释放。</li><li>不允许递归地加锁和解锁，不允许在中断处理程序或者中断下半部中使用</li></ol><h2 id="2-4-选择合适的锁"><a href="#2-4-选择合适的锁" class="headerlink" title="2.4 选择合适的锁"></a>2.4 选择合适的锁</h2><ol><li>低开销、短期锁定优先使用自旋锁。</li><li>中断上下文中只能使用自旋锁。</li><li>长期加锁使用信号量，优先使用互斥体。</li><li>持有锁需要睡眠，优先使用互斥体。</li><li>信号量和互斥体：除非互斥体的某个约束妨碍你的使用，否则优先使用mutex。</li></ol><h1 id="三、内核中锁的实现"><a href="#三、内核中锁的实现" class="headerlink" title="三、内核中锁的实现"></a>三、内核中锁的实现</h1><h2 id="3-1-spinlock在UP系统中的实现"><a href="#3-1-spinlock在UP系统中的实现" class="headerlink" title="3.1 spinlock在UP系统中的实现"></a>3.1 spinlock在UP系统中的实现</h2><p>对于单CPU系统，没有“其他CPU”；如果内核不支持preempt，当前在内核态执行的线程也不可能被其他线程抢占，也就“没有其他进程&#x2F;线程”。所以，对于不支持preempt的单CPU系统，spin_lock是空函数，不需要做其他事情。</p><p>如果单CPU系统的内核支持preempt，即当前线程正在执行内核态函数时，它是有可能被别的线程抢占的。这时spin_lock的实现就是调用“preempt_disable()”：你想抢我，我干脆禁止你运行。</p><p>在UP系统中spin_lock()退化为preempt_disable()，如果用的内核不支持preempt，则spin_lock()什么事都不用做，spin_lock函数定义如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B01.png" alt="3.内核中锁的实现1"></p><p>对于spin_lock_irq()，在UP系统中就退化为local_irq_disable()和preempt_disable()，假设程序A要访问临界资源，可能会有中断也来访问临界资源，可能会有程序B也来访问临界资源，那么使用spin_lock_irq()来保护临界资源：先禁止中断防止中断来抢，再禁止preempt防止其他进程来抢。如下图所示：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B02.png" alt="3.内核中锁的实现2"></p><p>对于spin_lock_bh()，在UP系统中就退化为禁止软中断和preempt_disable()，如下图所示：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B03.png" alt="3.内核中锁的实现3"></p><h2 id="3-2-spinlock在SMP系统中的实现"><a href="#3-2-spinlock在SMP系统中的实现" class="headerlink" title="3.2 spinlock在SMP系统中的实现"></a>3.2 spinlock在SMP系统中的实现</h2><p>要让多CPU中只能有一个获得临界资源，使用原子变量就可以实现。但是还要保证公平，先到先得。比如有CPU0、CPU1、CPU2都调用spin_lock想获得临界资源，谁先申请谁先获得。</p><p>举个例子：餐厅里只有一个座位，去吃饭的人都得先取号、等叫号。注意，有2个动作：顾客从取号机取号，电子叫号牌叫号。</p><ol><li>一开始取号机待取号码为0。</li><li>顾客A从取号机得到号码0，电子叫号牌显示0，顾客A上座；取号机显示下一个待取号码为1。</li><li>顾客B从取号机得到号码1，电子叫号牌还显示为0，顾客B等待；取号机显示下一个待取号码为2。</li><li>顾客C从取号机得到号码2，电子叫号牌还显示为0，顾客C等待；取号机显示下一个待取号码为3。</li><li>顾客A吃完离座，电子叫号牌显示为1，顾客B的号码等于1，他上座；</li><li>顾客B吃完离座，电子叫号牌显示为2，顾客C的号码等于2，他上座；</li></ol><p>在这个例子中有2个号码：取号机显示的“下一个号码”，顾客取号后它会自动加1；电子叫号牌显示“当前号码”，顾客离座后它会自动加1。某个客户手上拿到的号码等于电子叫号牌的号码时，该客户上座。在这个过程中，即使顾客B、C同时到店，只要保证他们从取号机上得到的号码不同，他们就不会打架。</p><p>所以，关键点在于：取号机的号码发放，必须互斥，保证客户的号码互不相同。而电子叫号牌上号码的变动不需要保护，只有顾客离开后它才会变化，没人争抢它。</p><p>在ARMv6及以上的ARM架构中支持SMP系统。它的spinlock结构体定义如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B04.png" alt="3.内核中锁的实现4"></p><p>__raw_tickets结构体中有owner、next两个成员，这是在SMP系统中实现spinlock的关键。owner就相当于电子叫号牌，现在谁在吃饭。next就当于于取号机，下一个号码是什么。从取号机上取到的号码保存在spin_lock函数中的局部变量里。</p><p>spin_lock函数调用关系如下，核心是arch_spin_lock：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B05.png" alt="3.内核中锁的实现5"></p><p>arch_spin_lock代码如下：即使不同的个体去同时取号，也可以保证取到的号码各不相同。</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B06.png" alt="3.内核中锁的实现6"></p><p>假设第1个程序取到了号码，它访问了临界资源后，调用spin_unlock，代码如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B07.png" alt="3.内核中锁的实现7"></p><p>释放锁后，假如有其他程序正在spin_lock函数中循环等待，它就会立刻判断自己手上的next是否等于lock-&gt;tickets.owner，如果相等就表示轮到它获得了锁。</p><h2 id="3-3-信号量semaphore的实现"><a href="#3-3-信号量semaphore的实现" class="headerlink" title="3.3 信号量semaphore的实现"></a>3.3 信号量semaphore的实现</h2><p>信号量的定义及操作函数都在Linux内核文件include\linux\semaphore.h中定义，如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B08.png" alt="3.内核中锁的实现8"></p><p>初始化semaphore之后，就可以使用down函数或其他衍生版本来获取信号量，使用up函数释放信号量。</p><h3 id="3-3-1-down函数的实现"><a href="#3-3-1-down函数的实现" class="headerlink" title="3.3.1 down函数的实现"></a>3.3.1 down函数的实现</h3><p>如果semaphore中的count大于0，那么down函数就可以获得信号量；否则就休眠。在读取、修改count时，要使用spinlock来实现互斥。休眠时，要把当前进程放在semaphore的wait_list链表中，别的进程释放信号量时去wait_list中把进程取出、唤醒。</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B09.png" alt="3.内核中锁的实现9"></p><h3 id="3-3-2-up函数的实现"><a href="#3-3-2-up函数的实现" class="headerlink" title="3.3.2 up函数的实现"></a>3.3.2 up函数的实现</h3><p>如果有其他进程在等待信号量，则count值无需调整，直接取出第1个等待信号量的进程，把信号量给它，然后把它唤醒。如果没有其他进程在等待信号量，则调整count。整个过程需要使用spinlock来保护，代码如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B010.png" alt="3.内核中锁的实现10"></p><h2 id="3-4-互斥量mutex的实现"><a href="#3-4-互斥量mutex的实现" class="headerlink" title="3.4 互斥量mutex的实现"></a>3.4 互斥量mutex的实现</h2><p>mutex的定义及操作函数都在Linux内核文件include\linux\mutex.h中定义，如下：</p><p><img src="3.%E5%86%85%E6%A0%B8%E4%B8%AD%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B011.png" alt="3.内核中锁的实现11"></p><p>这里要注意一下：《linux内核设计与实现》说mutex中的owner是用来记录获得mutex的进程，以后必须由它来释放mutex。但是从上面的代码可知，owner并不一定存在！应该是内核版本不同，书中的版本是2.6，此处的版本是4.x。</p><p>owner有2个用途：debug(CONFIG_DEBUG_MUTEXES)或spin_on_owner(CONFIG_MUTEX_SPIN_ON_OWNER)。</p><p>什么叫spin on owner？我们使用mutex的目的一般是用来保护一小段代码，这段代码运行的时间很快。这意味着一个获得mutex的进程，可能很快就会释放mutex。针对这点可以进行优化，特别是当前获得mutex的进程是在别的CPU上运行、并且“我”是唯一等待这个mutex的进程。在这种情况下，那“我”就原地spin等待吧：懒得去休眠了，休眠又唤醒就太慢了。</p><p>所以，mutex是做了特殊的优化，比semaphore效率更高。但是在代码上，并没有要求“谁获得mutex，就必须由谁释放mutex”，只是在使用惯例上是“谁获得mutex，就必须由谁释放mutex”。</p><h3 id="3-4-1-mutex-lock函数的实现"><a href="#3-4-1-mutex-lock函数的实现" class="headerlink" title="3.4.1 mutex_lock函数的实现"></a>3.4.1 mutex_lock函数的实现</h3><p>mutex的设计非常精巧，比semaphore复杂，但是更高效。首先要知道mutex的操作函数中有fastpath、slowpath两条路径(快速、慢速)：如果fastpath成功，就不必使用slowpath。</p><p>比较复杂，未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux卡片电脑</title>
      <link href="/2022/12/20/Linux%E5%8D%A1%E7%89%87%E7%94%B5%E8%84%91/"/>
      <url>/2022/12/20/Linux%E5%8D%A1%E7%89%87%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Hardware"><a href="#一、Hardware" class="headerlink" title="一、Hardware"></a>一、Hardware</h1><h2 id="1-1-整体框图"><a href="#1-1-整体框图" class="headerlink" title="1.1 整体框图"></a>1.1 整体框图</h2><ol><li>Top1层</li></ol><p><img src="Top1.png" alt="Top1"></p><ol start="2"><li>Gnd2层</li></ol><p><img src="GND2.png" alt="GND2"></p><ol start="3"><li>Sig3层</li></ol><p><img src="SIG3.png" alt="SIG3"></p><ol start="4"><li>Sig4层</li></ol><p><img src="SIG4.png" alt="SIG4"></p><ol start="5"><li>Power5层</li></ol><p><img src="POWER5.png" alt="POWER5"></p><ol start="6"><li>Bottom6层</li></ol><p><img src="Bottom6.png" alt="Bottom6"></p><ol start="7"><li>3D视图</li></ol><p><img src="Linux%E5%8D%A1%E7%89%87%E7%94%B5%E8%84%911.png" alt="Linux卡片电脑1"></p><p><img src="Linux%E5%8D%A1%E7%89%87%E7%94%B5%E8%84%912.png" alt="Linux卡片电脑2"></p><h2 id="1-2-阻抗匹配"><a href="#1-2-阻抗匹配" class="headerlink" title="1.2 阻抗匹配"></a>1.2 阻抗匹配</h2><p><img src="%E9%98%BB%E6%8A%97%E5%8C%B9%E9%85%8D1.jpg" alt="阻抗匹配1"></p><p><img src="%E9%98%BB%E6%8A%97%E5%8C%B9%E9%85%8D2.jpg" alt="阻抗匹配2"></p><p><img src="%E9%98%BB%E6%8A%97%E5%8C%B9%E9%85%8D3.png" alt="阻抗匹配3"></p><h2 id="1-3-手工焊接"><a href="#1-3-手工焊接" class="headerlink" title="1.3 手工焊接"></a>1.3 手工焊接</h2><p><img src="%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A51.jpg" alt="手工焊接1"></p><p><img src="%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A52.jpg" alt="手工焊接2"></p><p><img src="%E6%89%8B%E5%B7%A5%E7%84%8A%E6%8E%A53.jpg" alt="手工焊接3"></p><h2 id="1-4-DDR3位宽说明"><a href="#1-4-DDR3位宽说明" class="headerlink" title="1.4 DDR3位宽说明"></a>1.4 DDR3位宽说明</h2><p>K4B4G1646B 4Gbit 256M x 16bit内存芯片，A0~A14用做行地址，A0~A9用做列地址，这款芯片同时含有B0~B2用来选择bank。bank address有三个bit，所以单个16bit DDR3内部有8个bank。</p><ol><li>表示行的有A0~A14，共15个bit，说明一个bank中有2^15个行。</li><li>表示列的有A0~A9， 共10个bit，说明一个bank中有2^10个列。</li><li>所以单块16bit DDR3可以寻址2^3<em>2^15</em>2^10&#x3D;2^28&#x3D;256M个地址。</li><li>我们的位宽是16bit，也即访问一个地址，内存认为是访问16bit的数据，所以单个内存颗粒的容量为512M Bytes</li></ol><p>我们的H3用两片16bit的K4B4G1646B拼成了一个32bit位宽、总容量为1G Bytes的内存：</p><ol><li>第一片16bit DDR3的BA0, BA1, BA2连接到了CPU的BA0, BA1, BA2。</li><li>第二片16bit DDR3的BA0, BA1, BA2也连接到了CPU的BA0, BA1, BA2。</li><li>第一片16bit DDR3的A0~A14连接到了CPU的A0~A14。</li><li>第二片16bit DDR3的A0~A14连接到了CPU的A0~A14。</li><li>第一片16bit DDR3的D0~D15连接到了CPU的D0~D15。</li><li>第二片16bit DDR3的D0~D15连接到了CPU的D16~D31。</li></ol><p></p><p>再来看看两个16bit是如何组成一个32bit的。这儿所说的两个16bit组成一个32bit，指的是数据位宽，与地址没有关系。</p><p>每一块16bit DDR3中有8个bank，2^15个row，2^10个column。也就是有256M个地址。看前面的连线可知，两块16bit DDR3的BA0<del>BA2和A0\</del>A14其实是并联连接到CPU，也就是说，CPU其实认为只有一块内存，访问的时候按照BA0~BA2和A0~A14给出地址。</p><p>CPU发出地址，两块16bit DDR3都收到了该地址。要么将给定地址上2个字节送到数据线上，要么是将数据线上的两个字节写入到指定的地址。</p><p>再看数据线的连接，第一片的D0~D15连接到了CPU的D0~D15，第二片的D0~D15连接到了CPU的D16~D31。CPU认为自己访问的是一块32bit的内存，所以CPU每给出一个地址，将访问4个字节的数据，读取&#x2F;写入。这4字节数据对应到CPU的D0~D31，又分别被连接到两片内存的D0~D15，这样一个32bit就被拆成了两个16bit，也就是两个16bit组成了一个32bit。</p><p>CPU可访问的内存地址有256M个，每访问一个地址，将访问4个字节，这样CPU能访问的内存即为256M x 32bit &#x3D; 1G Bytes</p><p>原理图可以看到我们的CPU的A15接到了K4B4G1646B的M7，但实际上M7是NC，我们A15接上去是为了兼容大容量的有A15地址线的ddr3，同时ddr3的ODT1，CS1#，CKE1，ZQ1都不接，我们的K4B4G1646B对应的引脚J1 L1 J9 L9都是NC，方便布线就不接了，其他的ddr3有些用到了这几个引脚，也即他们不是NC，所以省略不接的缺陷就是不能兼容其他的ddr3，我们这里就用K4B4G1646B颗粒，不接没事。</p><h1 id="二、系统移植"><a href="#二、系统移植" class="headerlink" title="二、系统移植"></a>二、系统移植</h1><h2 id="2-1-安装交叉编译器"><a href="#2-1-安装交叉编译器" class="headerlink" title="2.1 安装交叉编译器"></a>2.1 安装交叉编译器</h2><p>①下载交叉编译器arm-cortexa9-linux-gnueabihf-4.9.3.tar.xz，然后解压编译器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/YuanPi-Plus/toolchain</span><br><span class="line">tar xf arm-cortexa9-linux-gnueabihf-4.9.3.tar.xz -C /opt/FriendlyARM/toolchain/</span><br></pre></td></tr></table></figure><p>②将编译器的路径加入到PATH中，vi ~&#x2F;.bashrc，在末尾加入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/opt/FriendlyARM/toolchain/4.9.3/bin:$PATH</span><br><span class="line">export GCC_COLORS=auto</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行一下~/.bashrc脚本，让设置立即在当前shell窗口中生效，注意<span class="string">&quot;.&quot;</span>后面有个空格：. ~/.bashrc</span></span><br></pre></td></tr></table></figure><p>③这个编译器是64位的，不能在32位的Linux系统上运行，安装完成后，验证是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-gcc -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示出gcc version 4.9.3 (ctng-1.21.0-229g-FA)即成功了</span></span><br></pre></td></tr></table></figure><h2 id="2-2-编译适配U-boot"><a href="#2-2-编译适配U-boot" class="headerlink" title="2.2 编译适配U-boot"></a>2.2 编译适配U-boot</h2><p>①下载U-boot源码，并切换分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/friendlyarm/u-boot.git -b sunxi-v2017.x --depth 1</span><br></pre></td></tr></table></figure><p>②安装Python库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install swig python-dev python3-dev</span><br></pre></td></tr></table></figure><p>③使用nanopi_h3_defconfig配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改DDR3频率为768M，经过测试我的硬件最大支持这个频率</span></span><br><span class="line">vim configs/nanopi_h3_defconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 CONFIG_DRAM_CLK=408 修改为 CONFIG_DRAM_CLK=768</span></span><br><span class="line">make nanopi_h3_defconfig ARCH=arm CROSS_COMPILE=arm-linux-</span><br></pre></td></tr></table></figure><p>④编译U-boot：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux- -j12</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译成功后会生成文件u-boot-sunxi-with-spl.bin</span></span><br></pre></td></tr></table></figure><p>⑤更新SD上的U-boot：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dd if=u-boot-sunxi-with-spl.bin of=/dev/sdX bs=1024 seek=8</span><br><span class="line">sync &amp;&amp; eject /dev/sdX</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/sdX替换为实际的TF卡设备文件名。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sync</span>命令可以确保数据成功写到TF卡中，eject命令用于弹出TF卡。</span></span><br></pre></td></tr></table></figure><p>⑥SD卡运行系统时，可以先用scp命令拷贝u-boot-sunxi-with-spl.bin到开发板上，然后用dd命令更新SD卡上的U-boot:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp u-boot-sunxi-with-spl.bin root@192.168.31.134:/root/</span><br><span class="line">dd if=/root/u-boot-sunxi-with-spl.bin of=/dev/mmcblk0 bs=1024 seek=8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root@后面替换成板子上的IP地址，EMMC也可以用此方法</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">H3的启动设备的设备节点总是/dev/mmcblk0</span></span><br></pre></td></tr></table></figure><p>⑦成功效果如下：</p><p><img src="2.%E8%BD%AF%E4%BB%B6%E9%80%82%E9%85%8D1.png" alt="2.软件适配1"></p><h2 id="2-3-编译适配Linux内核"><a href="#2-3-编译适配Linux内核" class="headerlink" title="2.3 编译适配Linux内核"></a>2.3 编译适配Linux内核</h2><p>①下载Linux内核源码，并切换分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/friendlyarm/linux.git -b sunxi-4.14.y --depth 1</span><br></pre></td></tr></table></figure><p>②默认配置先跑起来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt-get install u-boot-tools</span><br><span class="line">touch .scmversion</span><br><span class="line">make sunxi_defconfig ARCH=arm CROSS_COMPILE=arm-linux-</span><br><span class="line">make zImage dtbs ARCH=arm CROSS_COMPILE=arm-linux-</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译完成后会在<span class="built_in">arch</span>/arm/boot/目录下生成zImage，在<span class="built_in">arch</span>/arm/boot/dts/目录下生成dtb文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当完成某任务后，可以保存当前的配置：</span></span><br><span class="line">make savedefconfig ARCH=arm CROSS_COMPILE=arm-linux-</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">目前我已将最新的配置文件保存在：</span></span><br><span class="line">arch/arm/configs/YuanPi-plus-defconfig</span><br></pre></td></tr></table></figure><p>③更新SD上的zImage和dtb文件：假设SD卡的boot分区挂载在&#x2F;media&#x2F;SD&#x2F;boot&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp arch/arm/boot/zImage /media/SD/boot/</span><br><span class="line">cp arch/arm/boot/dts/sun8i-*-nanopi-*.dtb /media/SD/boot/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以用scp命令通过网络更新：</span></span><br><span class="line">scp arch/arm/boot/zImage root@192.168.31.134:/boot</span><br><span class="line">scp arch/arm/boot/dts/sun8i-*-nanopi-*.dtb root@192.168.31.134:/boot</span><br></pre></td></tr></table></figure><p>④bootargs与bootcmd：全志H3使用boot.cmd生成boot.scr来描述配置，boot.cmd：</p><p><img src="2.%E8%BD%AF%E4%BB%B6%E9%80%82%E9%85%8D2.png" alt="2.软件适配2"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Recompile with: mkimage -C none -A arm -T script -d boot.cmd boot.scr CPU=H3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">OS=friendlycore/ubuntu-oled/ubuntu-wifiap/openwrt/debian/debian-nas...</span></span><br><span class="line"> </span><br><span class="line"> echo &quot;running boot.scr&quot;</span><br><span class="line"> setenv fsck.repair yes</span><br><span class="line"> setenv ramdisk rootfs.cpio.gz</span><br><span class="line"> setenv kernel zImage</span><br><span class="line"> </span><br><span class="line"> setenv env_addr 0x43000000</span><br><span class="line"> setenv kernel_addr 0x46000000</span><br><span class="line"> setenv ramdisk_addr 0x47000000</span><br><span class="line"> setenv dtb_addr 0x48000000</span><br><span class="line"> </span><br><span class="line"> fatload mmc 0 $&#123;kernel_addr&#125; $&#123;kernel&#125;</span><br><span class="line"> fatload mmc 0 $&#123;ramdisk_addr&#125; $&#123;ramdisk&#125;</span><br><span class="line"> setenv ramdisk_size $&#123;filesize&#125;</span><br><span class="line"> </span><br><span class="line"> fatload mmc 0 $&#123;dtb_addr&#125; sun8i-h3-YuanPi-plus.dtb</span><br><span class="line"> fdt addr $&#123;dtb_addr&#125;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">setup MAC address</span></span><br><span class="line"> fdt set ethernet0 local-mac-address $&#123;mac_node&#125;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">setup boot_device</span></span><br><span class="line"> fdt set mmc0 boot_device &lt;1&gt;</span><br><span class="line"> </span><br><span class="line"> setenv fbcon map:1</span><br><span class="line"> </span><br><span class="line"> setenv overlayfs data=/dev/mmcblk0p3</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">setenv hdmi_res drm_kms_helper.edid_firmware=HDMI-A-1:edid/1280x720.bin video=HDMI-A-1:1280x720@60</span></span><br><span class="line"> </span><br><span class="line"> setenv bootargs console=tty1 console=ttyS0,115200 earlyprintk root=/dev/mmcblk0p2 rootfstype=ext4 rw rootwait fsck.repair=$&#123;fsck.repair&#125; panic=10 $&#123;extra&#125; fbcon=$&#123;fbcon&#125; $&#123;hdmi_res&#125; $&#123;overlayfs&#125;</span><br><span class="line"> bootz $&#123;kernel_addr&#125; $&#123;ramdisk_addr&#125;:$&#123;ramdisk_size&#125; $&#123;dtb_addr&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>boot.cmd –&gt; boot.scr：将boot.scr也放入SD卡的&#x2F;boot中即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkimage -C none -A arm -T script -d boot.cmd boot.scr CPU=H3</span><br></pre></td></tr></table></figure><h2 id="2-4-文件系统"><a href="#2-4-文件系统" class="headerlink" title="2.4 文件系统"></a>2.4 文件系统</h2><p>①文件系统解压到SD卡：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -xvf rootfs.tar -C /media/qing/rootfs/  </span><br></pre></td></tr></table></figure><p>②编译和更新驱动模块：更新SD卡上rootfs的驱动模块:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make modules ARCH=arm CROSS_COMPILE=arm-linux-</span><br><span class="line">make modules_install INSTALL_MOD_PATH=/media/SD/rootfs/ ARCH=arm CROSS_COMPILE=arm-linux-</span><br></pre></td></tr></table></figure><p>make modules_install命令的作用是：</p><ol><li>将编译好的内核模块从内核源代码目录copy到&#x2F;lib&#x2F;modules下。也可自己指定ko安装路径，在交叉编译的情况下，需要将ko模块安装到rootfs。也即：INSTALL_MOD_PATH&#x3D;&#x2F;media&#x2F;SD&#x2F;rootfs&#x2F;。</li><li>运行modules_install的另一个作用是会运行depmod去生成modules.dep文件，该文件记录了模块之间的依赖关系。这样当modprobe XXX的时候就能够把XXX所依赖的模块一并加载了。</li></ol><h2 id="2-5-Wifi模块驱动"><a href="#2-5-Wifi模块驱动" class="headerlink" title="2.5 Wifi模块驱动"></a>2.5 Wifi模块驱动</h2><ol><li><p>如果是江师兄和稚晖君的版本，他们使用的是RTL8723bu，友善之臂的linux工程没有RTL8723bu驱动，我目前使用的是稚晖君基于友善之臂添加后的linux工程，RTL8723bu驱动代码放在了：drivers&#x2F;net&#x2F;wireless&#x2F;realtek&#x2F;rtl8723bu，并且稚晖君的配置文件：linux_card_defconfig已经使能了该驱动，编译linux工程会将RTL8723bu编译成模块。这份驱动代码会依赖其他的一些驱动，所以按照上一节操作，将驱动导出到rootfs，然后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wifi驱动的目录：/lib/modules/4.14.111/kernel/drivers/net/wireless/realtek/rtl8723bu</span><br><span class="line">装rtl8723bu驱动的时候先depmod一下，再modprobe，下次开机会自动装载。</span><br></pre></td></tr></table></figure></li><li><p>如果是友善之臂的h3 M1 Plus，或者是我做的版本，使用的是AP6212，友善之臂已经适配了ap6212；YuanPi-plus-defconfig配置是我基于友善之臂的sunxi_defconfig修改的，直接使用我修改后的配置编译出的zImage启动即可。当然，也有可能ap6212驱动代码不在linux工程中，是友善之臂的文件系统里面有适配好的ko文件，然后启动时脚本自动装载了，具体代码或者ko文件是啥我没去找过，能用就行。</p></li><li><p>不管是稚晖君还是我的设备树，都是友善之臂的复制过来修改的，所以设备树没有区别，区别只在配置文件和有无RTL8723bu驱动代码。RTL8723bu是usb wifi，ap6212是sdio接口，他们可以共存。</p></li><li><p>连接wifi</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">开启Wi-Fi：</span><br><span class="line">nmcli r wifi on</span><br><span class="line"></span><br><span class="line">扫描附近的Wi-Fi:</span><br><span class="line">nmcli dev wifi</span><br><span class="line"> </span><br><span class="line">连接到特定的Wi-Fi:</span><br><span class="line">nmcli dev wifi connect &quot;SSID&quot; password &quot;PASSWORD&quot; ifname wlan0</span><br><span class="line"></span><br><span class="line">重启网卡设备:</span><br><span class="line">sudo ifconfig wlan0 down</span><br><span class="line">sudo ifconfig wlan0 up</span><br><span class="line"></span><br><span class="line">连接成功后，下次开机，WiFi 也会自动连接。</span><br><span class="line"></span><br><span class="line">如果你的USB WiFi无法正常工作, 大概率是因为文件系统里缺少了对应的USB WiFi固件。</span><br><span class="line">可以通过下列命令安装所有的USB WiFi固件:</span><br><span class="line">apt-get install linux-firmware</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-6-nfs网络文件系统"><a href="#2-6-nfs网络文件系统" class="headerlink" title="2.6 nfs网络文件系统"></a>2.6 nfs网络文件系统</h2><ol><li>ubuntu先安装nfs服务：apt-get install nfs-kernel-server rpcbind</li><li>配置相关文件夹为nfs文件夹：vi &#x2F;etc&#x2F;exports</li><li>在最后一行加上文件夹路径：&#x2F;home&#x2F;qing&#x2F;work&#x2F;nfs&#x2F;rootfs_friendlycore-focal_4.14   *(rw,sync,no_root_squash)</li><li>然后重启ubuntu服务：&#x2F;etc&#x2F;init.d&#x2F;nfs-kernel-server restart</li><li>被挂载的文件夹最好 ：chmod 777  xxx&#x2F;</li><li>在开发板里面也要安装nfs服务：apt-get install nfs-kernel-server rpcbind</li><li>重启开发板的nfs服务：&#x2F;etc&#x2F;init.d&#x2F;nfs-kernel-server restart</li><li>挂载：mount -t nfs <em><strong>ubuntu-IP</strong></em>:&#x2F;home&#x2F;qing&#x2F;work&#x2F;nfs&#x2F;rootfs_friendlycore-focal_4.14&#x2F; &#x2F;mnt&#x2F; -o nolock</li></ol><p>参考OrangePi，以太网要修改sun8i-h3-YuanPi-plus.dts：因为友善M1-Plus用了RTL8211E，我们是直连的。</p><p><img src="2.5%E4%BB%A5%E5%A4%AA%E7%BD%91.png" alt="2.5以太网"></p><h1 id="三、软件适配"><a href="#三、软件适配" class="headerlink" title="三、软件适配"></a>三、软件适配</h1><h2 id="3-1-st7789v彩屏-SPI"><a href="#3-1-st7789v彩屏-SPI" class="headerlink" title="3.1 st7789v彩屏(SPI)"></a>3.1 st7789v彩屏(SPI)</h2><p><em><strong>Frame Buffer设备驱动在另一篇文章已经讲解</strong></em>，这里直接在内核自带的fbtft框架上修改。</p><h3 id="3-1-1-修改设备树"><a href="#3-1-1-修改设备树" class="headerlink" title="3.1.1 修改设备树"></a>3.1.1 修改设备树</h3><p>①首先复制一份sun8i-h3-nanopi-m1-plus.dts重命名为sun8i-h3-YuanPi-plus.dts，并修改设备树目录下的Makefile加上我们的设备树。最后在sun8i-h3-YuanPi-plus.dts中添加：</p><p><img src="3.1.1%E4%BF%AE%E6%94%B9%E8%AE%BE%E5%A4%87%E6%A0%911.png" alt="3.1.1修改设备树1"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;spi0 &#123;</span><br><span class="line">    pinctrl-0 = &lt;&amp;spi0_pins &amp;spi0_cs_pins&gt;;</span><br><span class="line">    cs-gpios = &lt;&amp;pio 2 3 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line"></span><br><span class="line">    st7789vw: st7789vw@0&#123;</span><br><span class="line">    compatible =<span class="string">&quot;sitronix,st7789vw&quot;</span>;</span><br><span class="line">    reg = &lt;0&gt;;</span><br><span class="line">    status = <span class="string">&quot;okay&quot;</span>;</span><br><span class="line">    spi-max-frequency = &lt;50000000&gt;;</span><br><span class="line">    buswidth = &lt;8&gt;;</span><br><span class="line">    rotate = &lt;0&gt;;</span><br><span class="line">    fps = &lt;60&gt;;</span><br><span class="line">    rgb;</span><br><span class="line">    spi-cpol;</span><br><span class="line">    spi-cpha;</span><br><span class="line">    dc-gpios    = &lt;&amp;pio 0 0 GPIO_ACTIVE_HIGH&gt;; /* PA0 */</span><br><span class="line">    reset-gpios = &lt;&amp;pio 0 1 GPIO_ACTIVE_HIGH&gt;; /* PA1 */</span><br><span class="line">    debug = &lt;0x00&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>②修改sun8i-h3-nanopi.dtsi，将spi0结点下的设备都disabled：</p><p><img src="3.1.1%E4%BF%AE%E6%94%B9%E8%AE%BE%E5%A4%87%E6%A0%912.png" alt="3.1.1修改设备树2"></p><h3 id="3-1-2-修改kernel"><a href="#3-1-2-修改kernel" class="headerlink" title="3.1.2 修改kernel"></a>3.1.2 修改kernel</h3><p>①make menuconfig使能fbtft框架，并勾选fb_st7789vw.c：</p><p><img src="3.1.2%E4%BF%AE%E6%94%B9kernel1.png" alt="3.1.2修改kernel1"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Device Drivers  ---&gt;</span><br><span class="line">    [*] Staging drivers  ---&gt;</span><br><span class="line">        &lt;*&gt;   Support for small TFT LCD display modules  ---&gt;</span><br><span class="line">            &lt;*&gt;   Support sysfs for small TFT LCD display modules</span><br><span class="line">            &lt;*&gt;   FB driver for the ST7789VW LCD Controller </span><br><span class="line">            &lt;*&gt;   Generic FB driver for TFT LCD displays</span><br><span class="line">            &lt;*&gt;   Module to for adding FBTFT devices</span><br></pre></td></tr></table></figure><p>②修改drivers&#x2F;staging&#x2F;fbtft&#x2F;fb_st7789vw.c：</p><p>我们的屏幕不需要偏移，将偏移去除：</p><p><img src="3.1.2%E4%BF%AE%E6%94%B9kernel2.png" alt="3.1.2修改kernel2"></p><p>修改分辨率：</p><p><img src="3.1.2%E4%BF%AE%E6%94%B9kernel3.png" alt="3.1.2修改kernel3"></p><p>最后修改初始化代码：将init_display(struct fbtft_par *par)中初始化代码换成当下屏幕的即可。</p><h3 id="3-1-3修改bootargs"><a href="#3-1-3修改bootargs" class="headerlink" title="3.1.3修改bootargs"></a>3.1.3修改bootargs</h3><p>修改boot.cmd –&gt; boot.scr，让屏幕作为console：</p><p><img src="3.1.3%E4%BF%AE%E6%94%B9bootargs1.png" alt="3.1.3修改bootargs1"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatload mmc 0 $&#123;dtb_addr&#125; sun8i-h3-YuanPi-plus.dtb</span><br><span class="line">setenv bootargs console=tty1 console=ttyS0,115200 earlyprintk...</span><br></pre></td></tr></table></figure><h3 id="3-1-4-编译烧录找bug"><a href="#3-1-4-编译烧录找bug" class="headerlink" title="3.1.4 编译烧录找bug"></a>3.1.4 编译烧录找bug</h3><p>编译出zImage、sun8i-h3-YuanPi-plus.dtb、boot.scr，重新烧录后发现屏幕不起作用，但是在启动阶段发现有微弱的闪动，开启找bug之旅。。。</p><p>首先怀疑屏幕坏了，毕竟买了挺久了，用之前Frame Buffer设备驱动的程序在RK3399上测试，屏幕正常。</p><p>去掉fbtft框架，用以前自己写的Frame Buffer设备驱动的程序测试，还是只有微弱的闪光，那么问题应该是出在spi驱动能力上，给SCK时钟线接一个3.3v，2.2k上拉，再次实验，成功了。重新加上fbtft框架编译烧录即可。<em><strong>注：这也不是板子硬件bug，将来屏幕转接板上拉即可，同时要注意上拉的电流不能太大，不然时间久了会烧屏。</strong></em></p><p>经过多次测试，spi频率最大能到72M；此时SCK接的是3.3v，10k上拉，频率为50M，最终效果如下：</p><p><img src="3.1.4%E7%BC%96%E8%AF%91%E7%83%A7%E5%BD%95%E6%89%BEbug1.jpg" alt="3.1.4编译烧录找bug1"></p><p>最终发现不用外接上拉电阻，直接将spi0配置成上拉模式即可，并且spi频率也可以设置为72M，96M不行，屏幕大。</p><p><img src="3.1.4%E7%BC%96%E8%AF%91%E7%83%A7%E5%BD%95%E6%89%BEbug2.png" alt="3.1.4编译烧录找bug2"></p><h3 id="3-1-5-音视频播放"><a href="#3-1-5-音视频播放" class="headerlink" title="3.1.5 音视频播放"></a>3.1.5 音视频播放</h3><p>①安装mplayer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mplayer</span><br></pre></td></tr></table></figure><p>②安装alsa包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install libasound2</span><br><span class="line">apt-get install alsa-base</span><br><span class="line">apt-get install alsa-utils</span><br></pre></td></tr></table></figure><p>③播放视频：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mplayer -ao alsa -vo fbdev:/dev/fb_st7789vw -x 240 -y 240 -zoom 被动-伍佰.mp4</span><br></pre></td></tr></table></figure><p>④alsamixer可以调节音量，声音太大到了高潮部分功率上不去会卡死。</p><p>⑤爱伍佰，做他一半就好……</p><p><img src="3.1.5%E9%9F%B3%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE1.jpg" alt="3.1.5音视频播放1"></p><h2 id="3-2-GT911电容触摸-IIC"><a href="#3-2-GT911电容触摸-IIC" class="headerlink" title="3.2 GT911电容触摸(IIC)"></a>3.2 GT911电容触摸(IIC)</h2><h3 id="3-2-1-修改设备树"><a href="#3-2-1-修改设备树" class="headerlink" title="3.2.1 修改设备树"></a>3.2.1 修改设备树</h3><p>GT911使用的是IIC接口，可以设置中断模式，当有触摸动作则会触发中断，在中断中读取寄存器信息，通过input上报坐标，因为板子上的i2c0在硬件上已经上拉，所以设备树不用上拉，修改设备树如下：sun8i-h3-YuanPi-plus.dts</p><p><img src="3.2.1%E4%BF%AE%E6%94%B9%E8%AE%BE%E5%A4%87%E6%A0%911.png" alt="3.2.1修改设备树1"></p><h3 id="3-2-2-编写驱动"><a href="#3-2-2-编写驱动" class="headerlink" title="3.2.2 编写驱动"></a>3.2.2 编写驱动</h3><p>电容触摸屏驱动其实就是以下几种 linux 驱动框架的组合：</p><ol><li>IIC 设备驱动，因为电容触摸 IC 基本都是 IIC 接口的，因此大框架就是 IIC 设备驱动。</li><li>通过中断引脚(INT)向 内核上报触摸信息，因此需要用到中断驱动框架。坐标的上报在中断服务函数中完成。</li><li>触摸屏的坐标信息、屏幕按下和抬起信息都属于input 子系统，因此向内核上报触摸屏坐标信息就得使用 input 子系统。只是我们得按照 linux 内核规定的规则来上报坐标信息。</li></ol><p>以上内容在前面的博文已有介绍，不再赘述，在实际驱动GT911需要注意如下几点：</p><ol><li>与其他的IIC设备不同，GT911的器件地址需要根据初始化时序来确定，地址确定后才能用i2cdetect检测出地址。</li><li>当输出中断后请在一个中断周期内读走坐标并将buffer status(0x814E)写为0，若未在中断内读走坐标，下次IC即使检测到坐标更新会再输出一个中断脉冲，但不更新坐标，如果一直没有读取坐标则会一直打脉冲，导致中断一直被触发。</li><li>我们的屏幕进行了旋转，所以读取出来的坐标也需要在软件上进行调整，如下：<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们的屏幕旋转了90度，对应如下：</span><br><span class="line">原先      --&gt;   旋转后   </span><br><span class="line">(0,0)     --&gt;  (0,240)</span><br><span class="line">(240,0)   --&gt;  (0,0)</span><br><span class="line">(0,320)   --&gt;  (320,240)</span><br><span class="line">(240,320) --&gt;  (320,0)</span><br><span class="line">所以对应的调整关系是:</span><br><span class="line">(X,Y)     --&gt;  (Y,|X-240|)</span><br></pre></td></tr></table></figure></li></ol><p><em><strong>完整代码如下所示，相应注释已给出：</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mutex.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/mod_devicetable.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/bitops.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/jiffies.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/property.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/acpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/i2c.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/nvmem-provider.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/regmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pm_runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gpio/consumer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_irq.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/spinlock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/atomic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/unaligned.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input/mt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input/touchscreen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of_irq.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/interrupt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_CTRL_REG         0X8040  <span class="comment">/* GT911控制寄存器         */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_9xx_CFGS_REG     0X8047  <span class="comment">/* GT9147配置起始地址寄存器    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_1xx_CFGS_REG     0X8050  <span class="comment">/* GT1151配置起始地址寄存器    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_PID_REG         0X8140  <span class="comment">/* GT911产品ID寄存器       */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_GSTID_REG         0X814E  <span class="comment">/* GT911当前检测到的触摸情况 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GT_TP1_REG         0X814F  <span class="comment">/* 第一个触摸点数据地址 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SUPPORT_POINTS      5       <span class="comment">/* 最多5点电容触摸 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> u8 irq_table[] = &#123;IRQ_TYPE_EDGE_RISING, IRQ_TYPE_EDGE_FALLING, IRQ_TYPE_LEVEL_LOW, IRQ_TYPE_LEVEL_HIGH&#125;;  <span class="comment">/* 触发方式 */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gt911_dev</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span>   *<span class="title">reset_pin</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpio_desc</span>   *<span class="title">irq_pin</span>;</span></span><br><span class="line"><span class="type">int</span> irqnum;<span class="comment">/* 中断号    */</span></span><br><span class="line"><span class="type">int</span> irqtype;<span class="comment">/* 中断类型         */</span></span><br><span class="line"><span class="type">int</span> max_x;<span class="comment">/* 最大横坐标   */</span></span><br><span class="line"><span class="type">int</span> max_y; <span class="comment">/* 最大纵坐标*/</span></span><br><span class="line"><span class="type">void</span> *private_data;<span class="comment">/* 私有数据 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_dev</span> *<span class="title">input</span>;</span><span class="comment">/* input结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span>;</span><span class="comment">/* I2C客户端 */</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gt911_dev</span> <span class="title">gt911</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description     : 复位GT911</span></span><br><span class="line"><span class="comment"> * @param - client : 要操作的i2c</span></span><br><span class="line"><span class="comment"> * @param - multidev: 自定义的multitouch设备</span></span><br><span class="line"><span class="comment"> * @return          : 0，成功;其他负值,失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gt911_reset</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="keyword">struct</span> gt911_dev *dev)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;reset_pin and int_pin = 0 hold 10ms!\n&quot;</span>);</span><br><span class="line">    gpiod_set_value(dev-&gt;reset_pin, <span class="number">0</span>); <span class="comment">//设低电平</span></span><br><span class="line">    gpiod_set_value(dev-&gt;irq_pin, <span class="number">0</span>);   <span class="comment">//设低电平</span></span><br><span class="line">    mdelay(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;reset_pin = 1 hold 10ms!\n&quot;</span>);</span><br><span class="line">    gpiod_set_value(dev-&gt;reset_pin, <span class="number">1</span>); <span class="comment">//设高电平</span></span><br><span class="line">    mdelay(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;set int_pin as input!\n&quot;</span>);</span><br><span class="line">    gpiod_direction_input(dev-&gt;irq_pin);</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;now gt911&#x27;s addr is 0xBA/0xBB, and i2c addr is 0x5d\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description: 向GT911多个寄存器写入数据，寄存器的地址指针会在写操作后自动加 1，所以当需要对连续地址的寄存器进行写操作时，可以在一次写操作中连续写入。</span></span><br><span class="line"><span class="comment"> * @param - dev:  GT911设备</span></span><br><span class="line"><span class="comment"> * @param - reg:  要写入的寄存器首地址</span></span><br><span class="line"><span class="comment"> * @param - val:  要写入的数据缓冲区</span></span><br><span class="line"><span class="comment"> * @param - len:  要写入的数据长度</span></span><br><span class="line"><span class="comment"> * @return   :   操作结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> s32 <span class="title function_">gt911_write_regs</span><span class="params">(<span class="keyword">struct</span> gt911_dev *dev, u16 reg, u8 *buf, u8 len)</span></span><br><span class="line">&#123;</span><br><span class="line">u8 b[<span class="number">256</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span> =</span> (<span class="keyword">struct</span> i2c_client *)dev-&gt;client;</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = reg &gt;&gt; <span class="number">8</span>;<span class="comment">/* 寄存器首地址低8位 */</span></span><br><span class="line">    b[<span class="number">1</span>] = reg &amp; <span class="number">0XFF</span>;<span class="comment">/* 寄存器首地址高8位 */</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;b[<span class="number">2</span>],buf,len);<span class="comment">/* 将要写入的数据拷贝到数组b里面 */</span></span><br><span class="line"></span><br><span class="line">msg.addr = client-&gt;addr;<span class="comment">/* gt911地址 */</span></span><br><span class="line">msg.flags = <span class="number">0</span>;<span class="comment">/* 标记为写数据 */</span></span><br><span class="line"></span><br><span class="line">msg.buf = b;<span class="comment">/* 要写入的数据缓冲区 */</span></span><br><span class="line">msg.len = len + <span class="number">2</span>;<span class="comment">/* 要写入的数据长度，总长度要加上两个寄存器 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i2c_transfer(client-&gt;adapter, &amp;msg, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description: 从GT911读取多个寄存器数据</span></span><br><span class="line"><span class="comment"> * @param - dev:  GT911设备</span></span><br><span class="line"><span class="comment"> * @param - reg:  要读取的寄存器首地址</span></span><br><span class="line"><span class="comment"> * @param - buf:  读取到的数据</span></span><br><span class="line"><span class="comment"> * @param - len:  要读取的数据长度</span></span><br><span class="line"><span class="comment"> * @return : 操作结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gt911_read_regs</span><span class="params">(<span class="keyword">struct</span> gt911_dev *dev, u16 reg, u8 *buf, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line">    u8 regdata[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[2];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">client</span> =</span> (<span class="keyword">struct</span> i2c_client *)dev-&gt;client;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* GT911寄存器长度为2个字节 */</span></span><br><span class="line">    regdata[<span class="number">0</span>] = reg &gt;&gt; <span class="number">8</span>;</span><br><span class="line">    regdata[<span class="number">1</span>] = reg &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[0]为发送要读取的首地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].addr = client-&gt;addr;<span class="comment">/* GT911的i2c地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].flags = !I2C_M_RD;<span class="comment">/* 标记为发送数据 */</span></span><br><span class="line">msg[<span class="number">0</span>].buf = &amp;regdata[<span class="number">0</span>];<span class="comment">/* 读取的首地址 */</span></span><br><span class="line">msg[<span class="number">0</span>].len = <span class="number">2</span>;<span class="comment">/* reg长度*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* msg[1]读取数据 */</span></span><br><span class="line">msg[<span class="number">1</span>].addr = client-&gt;addr;<span class="comment">/* GT911的i2c地址 */</span></span><br><span class="line">msg[<span class="number">1</span>].flags = I2C_M_RD;<span class="comment">/* 标记为读取数据*/</span></span><br><span class="line">msg[<span class="number">1</span>].buf = buf;<span class="comment">/* 读取数据缓冲区 */</span></span><br><span class="line">msg[<span class="number">1</span>].len = len;<span class="comment">/* 要读取的数据长度*/</span></span><br><span class="line"></span><br><span class="line">ret = i2c_transfer(client-&gt;adapter, msg, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">2</span>) &#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = -EREMOTEIO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description     : GT911读取固件</span></span><br><span class="line"><span class="comment"> * @param - client : 要操作的i2c</span></span><br><span class="line"><span class="comment"> * @param - multidev: 自定义的multitouch设备</span></span><br><span class="line"><span class="comment"> * @return          : 0，成功;其他负值,失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gt911_read_firmware</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="keyword">struct</span> gt911_dev *dev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>, version = <span class="number">0</span>;</span><br><span class="line">u16 id = <span class="number">0</span>;</span><br><span class="line">u8 data[<span class="number">7</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> id_str[<span class="number">5</span>];</span><br><span class="line">ret = gt911_read_regs(dev, GT_PID_REG, data, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;client-&gt;dev, <span class="string">&quot;Unable to read PID.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(id_str, data, <span class="number">4</span>);</span><br><span class="line">id_str[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (kstrtou16(id_str, <span class="number">10</span>, &amp;id))</span><br><span class="line">    &#123;</span><br><span class="line">        id = <span class="number">0x1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">version = get_unaligned_le16(&amp;data[<span class="number">4</span>]);</span><br><span class="line">dev_info(&amp;client-&gt;dev, <span class="string">&quot;ID %d, version: %04x\n&quot;</span>, id, version);</span><br><span class="line"><span class="keyword">switch</span> (id) &#123;    <span class="comment">/* 由于不同的芯片配置寄存器地址不一样需要判断一下  */</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">911</span>:</span><br><span class="line">        ret = gt911_read_regs(dev, GT_9xx_CFGS_REG, data, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;client-&gt;dev, <span class="string">&quot;Unable to read Firmware.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">dev-&gt;max_x = (data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + data[<span class="number">1</span>];</span><br><span class="line">dev-&gt;max_y = (data[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) + data[<span class="number">3</span>];</span><br><span class="line">dev-&gt;irqtype = data[<span class="number">6</span>] &amp; <span class="number">0x3</span>;</span><br><span class="line">printk(<span class="string">&quot;X_MAX: %d, Y_MAX: %d, Touch Number: %d, TRIGGER: 0x%02x\n&quot;</span>, dev-&gt;max_x, dev-&gt;max_y, data[<span class="number">5</span>], dev-&gt;irqtype);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们的屏幕旋转了90度，对应如下：</span></span><br><span class="line"><span class="comment">原先      --&gt;   旋转后   </span></span><br><span class="line"><span class="comment">(0,0)     --&gt;  (0,240)</span></span><br><span class="line"><span class="comment">(240,0)   --&gt;  (0,0)</span></span><br><span class="line"><span class="comment">(0,320)   --&gt;  (320,240)</span></span><br><span class="line"><span class="comment">(240,320) --&gt;  (320,0)</span></span><br><span class="line"><span class="comment">所以对应的调整关系是:</span></span><br><span class="line"><span class="comment">(X,Y)     --&gt;  (Y,|X-240|)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">adjust_x_y</span><span class="params">(<span class="type">int</span> *x, <span class="type">int</span> *y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line"><span class="keyword">if</span>(tmp &gt;= gt911.max_x)</span><br><span class="line">*y = tmp - gt911.max_x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*y = gt911.max_x - tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">irqreturn_t</span> <span class="title function_">gt911_irq_handler</span><span class="params">(<span class="type">int</span> irq, <span class="type">void</span> *dev_id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> touch_num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> input_x, input_y;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    u8 data;</span><br><span class="line">    u8 touch_data[<span class="number">5</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">gt911_dev</span> *<span class="title">dev</span> =</span> dev_id;</span><br><span class="line"></span><br><span class="line">    ret = gt911_read_regs(dev, GT_GSTID_REG, &amp;data, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">0x00</span>)  &#123;     <span class="comment">/* 没有触摸数据，直接返回 */</span></span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                 <span class="comment">/* 统计触摸点数据 */</span></span><br><span class="line">        touch_num = data &amp; <span class="number">0x0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里暂时使用单点触摸 </span></span><br><span class="line">    <span class="keyword">if</span>(touch_num) &#123;         <span class="comment">/* 单点触摸按下 */</span></span><br><span class="line">        gt911_read_regs(dev, GT_TP1_REG, touch_data, <span class="number">5</span>);</span><br><span class="line">        id = touch_data[<span class="number">0</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">0</span>) &#123;</span><br><span class="line">            input_x  = touch_data[<span class="number">1</span>] | (touch_data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">            input_y  = touch_data[<span class="number">3</span>] | (touch_data[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//旋转了屏幕，从软件上调整坐标</span></span><br><span class="line">            adjust_x_y(&amp;input_x, &amp;input_y);</span><br><span class="line"></span><br><span class="line">            printk(<span class="string">&quot;X: %d, Y: %d\n&quot;</span>, input_x, input_y);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上报坐标</span></span><br><span class="line">            input_mt_slot(dev-&gt;input, id);</span><br><span class="line">    input_mt_report_slot_state(dev-&gt;input, MT_TOOL_FINGER, <span class="literal">true</span>);</span><br><span class="line">    input_report_abs(dev-&gt;input, ABS_MT_POSITION_X, input_x);</span><br><span class="line">    input_report_abs(dev-&gt;input, ABS_MT_POSITION_Y, input_y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(touch_num == <span class="number">0</span>)&#123;                <span class="comment">/* 单点触摸释放 */</span></span><br><span class="line">        input_mt_slot(dev-&gt;input, id);</span><br><span class="line">        input_mt_report_slot_state(dev-&gt;input, MT_TOOL_FINGER, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">input_mt_report_pointer_emulation(dev-&gt;input, <span class="literal">true</span>);</span><br><span class="line">    input_sync(dev-&gt;input);</span><br><span class="line"></span><br><span class="line">    data = <span class="number">0x00</span>;                <span class="comment">/* 向0X814E寄存器写0 */</span></span><br><span class="line">    gt911_write_regs(dev, GT_GSTID_REG, &amp;data, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line"><span class="keyword">return</span> IRQ_HANDLED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description     : GT911中断初始化</span></span><br><span class="line"><span class="comment"> * @param - client : 要操作的i2c</span></span><br><span class="line"><span class="comment"> * @param - multidev: 自定义的multitouch设备</span></span><br><span class="line"><span class="comment"> * @return          : 0，成功;其他负值,失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">gt911_ts_irq</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="keyword">struct</span> gt911_dev *dev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 申请中断,client-&gt;irq就是IO中断， */</span></span><br><span class="line">ret = devm_request_threaded_irq(&amp;client-&gt;dev, client-&gt;irq, <span class="literal">NULL</span>,</span><br><span class="line">gt911_irq_handler, irq_table[dev-&gt;irqtype] | IRQF_ONESHOT,</span><br><span class="line">client-&gt;name, &amp;gt911);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;client-&gt;dev, <span class="string">&quot;Unable to request touchscreen IRQ.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">GT911_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">u8 data, ret;</span><br><span class="line">gt911.client = client;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 1，获取设备树中的中断和复位引脚 */</span></span><br><span class="line">gt911.irq_pin = devm_gpiod_get(&amp;client-&gt;dev,<span class="string">&quot;interrupt&quot;</span>,GPIOD_OUT_LOW);</span><br><span class="line">gt911.reset_pin = devm_gpiod_get(&amp;client-&gt;dev, <span class="string">&quot;reset&quot;</span>, GPIOD_OUT_LOW);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2，复位GT911 */</span></span><br><span class="line">gt911_reset(client, &amp;gt911);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 3，初始化GT911 */</span></span><br><span class="line">    data = <span class="number">0x02</span>;</span><br><span class="line">    gt911_write_regs(&amp;gt911, GT_CTRL_REG, &amp;data, <span class="number">1</span>); <span class="comment">/* 软复位 */</span></span><br><span class="line">    mdelay(<span class="number">100</span>);</span><br><span class="line">    data = <span class="number">0x0</span>;</span><br><span class="line">    gt911_write_regs(&amp;gt911, GT_CTRL_REG, &amp;data, <span class="number">1</span>); <span class="comment">/* 停止软复位 */</span></span><br><span class="line">    mdelay(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 4,初始化GT911，读取固件  */</span></span><br><span class="line">ret = gt911_read_firmware(client, &amp;gt911);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">printk(<span class="string">&quot;Fail !!! check !!\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 5，input设备注册 */</span></span><br><span class="line">gt911.input = devm_input_allocate_device(&amp;client-&gt;dev);</span><br><span class="line"><span class="keyword">if</span> (!gt911.input) &#123;</span><br><span class="line">ret = -ENOMEM;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line">gt911.input-&gt;name = client-&gt;name;</span><br><span class="line">gt911.input-&gt;id.bustype = BUS_I2C;</span><br><span class="line">gt911.input-&gt;dev.parent = &amp;client-&gt;dev;</span><br><span class="line"></span><br><span class="line">__set_bit(EV_KEY, gt911.input-&gt;evbit);</span><br><span class="line">__set_bit(EV_ABS, gt911.input-&gt;evbit);</span><br><span class="line">__set_bit(BTN_TOUCH, gt911.input-&gt;keybit);</span><br><span class="line"></span><br><span class="line">input_set_abs_params(gt911.input, ABS_X, <span class="number">0</span>, gt911.max_x, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(gt911.input, ABS_Y, <span class="number">0</span>, gt911.max_y, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(gt911.input, ABS_MT_POSITION_X,<span class="number">0</span>, gt911.max_x, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">input_set_abs_params(gt911.input, ABS_MT_POSITION_Y,<span class="number">0</span>, gt911.max_y, <span class="number">0</span>, <span class="number">0</span>);     </span><br><span class="line">ret = input_mt_init_slots(gt911.input, MAX_SUPPORT_POINTS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = input_register_device(gt911.input);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 6，最后初始化中断 */</span></span><br><span class="line">ret = gt911_ts_irq(client, &amp;gt911);</span><br><span class="line"><span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">goto</span> fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">of_match_ids_GT911</span>[] =</span> &#123;</span><br><span class="line">&#123; .compatible = <span class="string">&quot;my_gt911&quot;</span>,.data = <span class="literal">NULL</span> &#125;,</span><br><span class="line">&#123; <span class="comment">/* END OF LIST */</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">GT911_ids</span>[] =</span> &#123;</span><br><span class="line">&#123; <span class="string">&quot;gt911&quot;</span>,(<span class="type">kernel_ulong_t</span>)<span class="literal">NULL</span> &#125;,</span><br><span class="line">&#123; <span class="comment">/* END OF LIST */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">GT911_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">i2c_GT911_driver</span> =</span> &#123;</span><br><span class="line">.driver = &#123;</span><br><span class="line">.name = <span class="string">&quot;gt911&quot;</span>,</span><br><span class="line">.of_match_table = of_match_ids_GT911,</span><br><span class="line">&#125;,</span><br><span class="line">.probe = GT911_probe,</span><br><span class="line">.remove = GT911_remove,</span><br><span class="line">.id_table = GT911_ids,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">i2c_driver_GT911_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> i2c_add_driver(&amp;i2c_GT911_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_init(i2c_driver_GT911_init);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">i2c_driver_GT911_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">i2c_del_driver(&amp;i2c_GT911_driver);</span><br><span class="line">&#125;</span><br><span class="line">module_exit(i2c_driver_GT911_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;qingqing&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-2-3-移植tslib"><a href="#3-2-3-移植tslib" class="headerlink" title="3.2.3 移植tslib"></a>3.2.3 移植tslib</h3><p><em><strong>首先装载gt911驱动，自己的驱动成功效果如下：</strong></em></p><p><img src="3.3.1%E7%A7%BB%E6%A4%8Dtslib1.jpg" alt="3.3.1移植tslib1"></p><p>tslib 是一个开源的第三方库，用于触摸屏性能调试，使用电阻屏的时候一般使用 tslib 进行校准。虽然电容屏不需要校准，但主要的是 tslib 提供了一些其他软件，我们可以通过这些软件来测试触摸屏工作是否正常。最新版本的 tslib 已经支持了多点电容触摸屏，因此可以通过 tslib 来直观的测试多点电容触摸屏驱动，这个要比观看 eventX 原始数据方便的多。</p><p>①获取tslib源码。git 地址为：<a href="https://github.com/kergoth/tslib">https://github.com/kergoth/tslib</a> ，目前最新的版本是1.21。</p><p>②修改 tslib 源码所属用户，修改解压得到的 tslib-1.21 目录所属用户为当前用户，这一步一定要做！否则在稍后的编译中会遇到各种问题。我当前 ubuntu 的登录用户名为“qing”，修改命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown qing:qing tslib-1.21 -R</span><br></pre></td></tr></table></figure><p>③ubuntu工具安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf</span><br><span class="line">sudo apt-get install automake</span><br><span class="line">sudo apt-get install libtool</span><br></pre></td></tr></table></figure><p>④编译tslib：编译完成后在安装目录中，bin 目录下是可执行文件，包括 tslib 的测试工具。etc 目录下是 tslib 的配置文件，lib目录下是相关的库文件，将所有文件拷贝到开发板中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure --host=arm-linux --prefix=&quot;安装目录&quot;</span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><p>⑤配置tslib</p><ol><li>打开etc&#x2F;ts.conf 文件，找到module_raw input，如果这句前面有“#”的话就删除掉“#”。</li><li>在开发板终端输入：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，下面路径是根目录，如果没有这些文件，运行时会生成</span></span><br><span class="line">export TSLIB_TSDEVICE=/dev/input/event2</span><br><span class="line">export TSLIB_CALIBFILE=/etc/pointercal</span><br><span class="line">export TSLIB_CONFFILE=/etc/ts.conf</span><br><span class="line">export TSLIB_PLUGINDIR=/lib/ts</span><br><span class="line">export TSLIB_CONSOLEDEVICE=none</span><br><span class="line">export TSLIB_FBDEVICE=/dev/fb1</span><br></pre></td></tr></table></figure></li></ol><p>⑥ tslib 测试：使用ts_test_mt来测试触摸屏工作是否正常，测试结果如下，一切正常：</p><p><img src="3.3.1%E7%A7%BB%E6%A4%8Dtslib2.jpg" alt="3.3.1移植tslib2"></p><p><em><strong>至此，从头写GT911触摸驱动就圆满完成了！</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rockchip之adc按键驱动</title>
      <link href="/2022/04/20/rockchip%E4%B9%8Badc%E6%8C%89%E9%94%AE%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/04/20/rockchip%E4%B9%8Badc%E6%8C%89%E9%94%AE%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="ADC%E6%8C%89%E9%94%AE%E5%85%B8%E5%9E%8B%E7%94%B5%E8%B7%AF.png" alt="ADC按键典型电路"></p><h1 id="一、设备树"><a href="#一、设备树" class="headerlink" title="一、设备树"></a>一、设备树</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vi rk3399pro-firefly-core.dtsi +55</span></span><br><span class="line"><span class="title class_">adc-keys</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;adc-keys&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">io-channels</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;saradc</span> <span class="number">2</span>&gt;</span><span class="punctuation">;</span>               <span class="comment">//adc选用的是saradc通道2</span></span><br><span class="line">        <span class="attr">io-channel-names</span> <span class="operator">=</span> <span class="string">&quot;buttons&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">poll-interval</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">100</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">keyup-threshold-microvolt</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1800000</span>&gt;</span><span class="punctuation">;</span>   <span class="comment">//表示按键抬起，saradc通道2的电压（单位微伏）。</span></span><br><span class="line">        <span class="title class_">adc-power-key</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">linux,code</span> <span class="operator">=</span> <span class="params">&lt;KEY_POWER&gt;</span><span class="punctuation">;</span>        <span class="comment">//按键上报的键值</span></span><br><span class="line">                <span class="attr">label</span> <span class="operator">=</span> <span class="string">&quot;power key&quot;</span><span class="punctuation">;</span></span><br><span class="line">                <span class="attr">press-threshold-microvolt</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span> <span class="comment">//表示按键按下，saradc通道2的电压。</span></span><br><span class="line">        <span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><h1 id="二、上报键值"><a href="#二、上报键值" class="headerlink" title="二、上报键值"></a>二、上报键值</h1><p>最关键的上报按键事件的代码：adc-keys.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">adc_keys_poll</span><span class="params">(<span class="keyword">struct</span> input_polled_dev *dev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">adc_keys_state</span> *<span class="title">st</span> =</span> dev-&gt;private;</span><br><span class="line"><span class="type">int</span> i, value, ret;</span><br><span class="line">u32 diff, closest = <span class="number">0xffffffff</span>;</span><br><span class="line"><span class="type">int</span> keycode = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">ret = iio_read_channel_processed(st-&gt;channel, &amp;value);<span class="comment">//读取adc通道值</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ret &lt; <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="comment">/* Forcibly release key if any was pressed */</span></span><br><span class="line">    <span class="comment">// 如果未按下任何键，则强制释放键</span></span><br><span class="line">value = st-&gt;keyup_voltage;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; st-&gt;num_keys; i++) &#123;</span><br><span class="line"><span class="comment">//st-&gt;map[i].voltage = &quot;press-threshold-microvolt&quot; = 设备树设定的按下时adc值</span></span><br><span class="line">diff = <span class="built_in">abs</span>(st-&gt;<span class="built_in">map</span>[i].voltage - value); </span><br><span class="line"><span class="keyword">if</span> (diff &lt; closest) &#123;<span class="comment">//找出最接近的键值</span></span><br><span class="line">closest = diff;</span><br><span class="line">keycode = st-&gt;<span class="built_in">map</span>[i].keycode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果adc的值与开路电压的adc的误差比上面的最小误差都小，那么判定为未按下按键</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(st-&gt;keyup_voltage - value) &lt; closest)</span><br><span class="line">keycode = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果上一次有键值，并且这次的键值和上次不一样，就说明上一次的按键已经松开</span></span><br><span class="line"><span class="comment">//并且这次检测，又有新的按键被按下，就先发送上次键值的松开事件</span></span><br><span class="line"><span class="keyword">if</span> (st-&gt;last_key &amp;&amp; st-&gt;last_key != keycode)</span><br><span class="line">input_report_key(dev-&gt;input, st-&gt;last_key, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//再发送新的键值的按下事件</span></span><br><span class="line"><span class="keyword">if</span> (keycode)</span><br><span class="line">input_report_key(dev-&gt;input, keycode, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">input_sync(dev-&gt;input);</span><br><span class="line">st-&gt;last_key = keycode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、使用实例"><a href="#三、使用实例" class="headerlink" title="三、使用实例"></a>三、使用实例</h1><p><em><strong>①修改设备树：</strong></em></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">adc_demo:</span> <span class="title class_">adc_demo</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;firefly,rk3399-adc&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">io-channels</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;saradc</span> <span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p><em><strong>②编写驱动程序：</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/iio/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input-polldev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/property.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gpio/consumer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/iio/consumer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/interrupt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/consumer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">delayed_work</span><span class="title">adc_poll_work</span>;</span>  <span class="comment">//定义一个工作队列</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">iio_channel</span> *<span class="title">chan</span>;</span>    <span class="comment">//定义 IIO 通道结构体</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">firefly_demo_adc_poll</span> <span class="params">(<span class="keyword">struct</span> work_struct *work)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> val,ret;</span><br><span class="line"><span class="type">int</span> Vresult;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用标准电压将 AD 转换的值转换为用户所需要的电压值。其计算公式如下：</span></span><br><span class="line"><span class="comment">Vref / (2^n-1) = Vresult / raw</span></span><br><span class="line"><span class="comment">Vref 为标准电压</span></span><br><span class="line"><span class="comment">n 为 AD 转换的位数</span></span><br><span class="line"><span class="comment">Vresult 为用户所需要的采集电压</span></span><br><span class="line"><span class="comment">raw 为 AD 采集的原始数据</span></span><br><span class="line"><span class="comment">例如，标准电压为 1.8V，AD 采集位数为 10 位，AD 采集到的原始数据为 568，则：</span></span><br><span class="line"><span class="comment">Vresult = (1800mv * 568) / 1023;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ret = iio_read_channel_raw(chan, &amp;val);</span><br><span class="line">Vresult = (<span class="number">1800</span> * val) / <span class="number">1023</span>; <span class="comment">//Vresult = (1800mv * val) / 1023;</span></span><br><span class="line">printk(<span class="string">&quot;the adc channel voltage is %d mV\n&quot;</span>,Vresult);</span><br><span class="line">schedule_delayed_work(&amp;adc_poll_work,msecs_to_jiffies(<span class="number">1000</span>)); <span class="comment">//1秒后调用队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">firefly_adc_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">     printk(<span class="string">&quot;firefly_adc_probe!\n&quot;</span>);</span><br><span class="line">     chan = iio_channel_get(&amp;(pdev-&gt;dev), <span class="literal">NULL</span>);</span><br><span class="line">     <span class="keyword">if</span> (IS_ERR(chan))&#123;</span><br><span class="line">    chan = <span class="literal">NULL</span>;</span><br><span class="line">        printk(<span class="string">&quot;%s() have not set adc chan\n&quot;</span>, __FUNCTION__);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (chan) &#123;</span><br><span class="line">INIT_DELAYED_WORK(&amp;adc_poll_work, firefly_demo_adc_poll);<span class="comment">//初始化工作队列</span></span><br><span class="line">schedule_delayed_work(&amp;adc_poll_work,msecs_to_jiffies(<span class="number">1000</span>));<span class="comment">//1秒后调用队列</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">firefly_adc_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">iio_channel_release(chan);</span><br><span class="line">cancel_delayed_work_sync(&amp;adc_poll_work);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">firefly_adc_match</span>[] =</span> &#123;</span><br><span class="line">     &#123; .compatible = <span class="string">&quot;firefly,rk3399-adc&quot;</span> &#125;,</span><br><span class="line">     &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">firefly_adc_driver</span> =</span> &#123;</span><br><span class="line">    .probe      = firefly_adc_probe,</span><br><span class="line">    .remove     = firefly_adc_remove,</span><br><span class="line">    .driver     = &#123;</span><br><span class="line">        .name   = <span class="string">&quot;firefly_adc&quot;</span>,</span><br><span class="line">        .owner  = THIS_MODULE,</span><br><span class="line">        .of_match_table = firefly_adc_match,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">firefly_adc_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> platform_driver_register(&amp;firefly_adc_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">firefly_adc_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">platform_driver_unregister(&amp;firefly_adc_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(firefly_adc_init);</span><br><span class="line">module_exit(firefly_adc_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rockchip之pwm驱动</title>
      <link href="/2022/04/20/rockchip%E4%B9%8Bpwm%E9%A9%B1%E5%8A%A8/"/>
      <url>/2022/04/20/rockchip%E4%B9%8Bpwm%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p><em><strong>设备树的pwm节点：</strong></em></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vi rk3399.dtsi:</span></span><br><span class="line"><span class="symbol">pwm0:</span> <span class="title class_">pwm@ff420000</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;rockchip,rk3399-pwm&quot;</span>, <span class="string">&quot;rockchip,rk3288-pwm&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x0</span> <span class="number">0xff420000</span> <span class="number">0x0</span> <span class="number">0x10</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="meta">#pwm-cells = &lt;3&gt;;</span></span><br><span class="line">        <span class="attr">pinctrl-names</span> <span class="operator">=</span> <span class="string">&quot;active&quot;</span><span class="punctuation">;</span></span><br><span class="line">        pinctrl<span class="number">-0</span> = <span class="params">&lt;<span class="variable">&amp;pwm0_pin</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;pmucru</span> PCLK_RKPWM_PMU&gt;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">clock-names</span> <span class="operator">=</span> <span class="string">&quot;pwm&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>这个设备树节点会和pwm-rockchip.c匹配，调用probe函数：</p><p>根据设备树的信息，配置pwm的底层寄存器，把每个pwm通道都编一个index索引值都放入一个链表。以后我们要用某个pwm端口的时候就直接request端口就行了。</p><p><em><strong>pwm使用实例：</strong></em></p><p><em><strong>修改设备树：</strong></em></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol"> pwm_demo:</span> <span class="title class_">pwm_demo</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;firefly,rk3399-pwm&quot;</span><span class="punctuation">;</span></span><br><span class="line">        pwm_<span class="attr">id</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span>      <span class="comment">//使用pwm0通道</span></span><br><span class="line">        min_<span class="attr">period</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        max_<span class="attr">period</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">10000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">        duty_<span class="attr">ns</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">5000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p><em><strong>编写驱动程序：</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/iio/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/input-polldev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/of.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/platform_device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/property.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gpio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/gpio/consumer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/iio/consumer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/interrupt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pinctrl/consumer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/pwm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pwm_device</span> * <span class="title">pwm_device</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">firefly_pwm_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    printk(<span class="string">&quot;firefly_pwm_probe!\n&quot;</span>);</span><br><span class="line">pwm_device = pwm_request(<span class="number">0</span>, <span class="string">&quot;firefly-pwm&quot;</span>);</span><br><span class="line">ret = pwm_config(pwm_device, <span class="number">500000</span>, <span class="number">1000000</span>);</span><br><span class="line">ret = pwm_enable(pwm_device);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">firefly_pwm_remove</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"></span><br><span class="line">pwm_disable(pwm_device);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">firefly_pwm_match</span>[] =</span> &#123;</span><br><span class="line">     &#123; .compatible = <span class="string">&quot;firefly,rk3399-pwm&quot;</span> &#125;,</span><br><span class="line">     &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_driver</span> <span class="title">firefly_pwm_driver</span> =</span> &#123;</span><br><span class="line">    .probe      = firefly_pwm_probe,</span><br><span class="line">    .remove     = firefly_pwm_remove,</span><br><span class="line">    .driver     = &#123;</span><br><span class="line">        .name   = <span class="string">&quot;firefly_pwm&quot;</span>,</span><br><span class="line">        .owner  = THIS_MODULE,</span><br><span class="line">        .of_match_table = firefly_pwm_match,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">firefly_pwm_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> platform_driver_register(&amp;firefly_pwm_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">firefly_pwm_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">&quot;%s %s %d\n&quot;</span>, __FILE__, __FUNCTION__, __LINE__);</span><br><span class="line">platform_driver_unregister(&amp;firefly_pwm_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(firefly_pwm_init);</span><br><span class="line">module_exit(firefly_pwm_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmc子系统</title>
      <link href="/2022/04/10/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/10/mmc%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>Linux kernel把mmc、sd以及sdio三者的驱动代码整合在一起，俗称mmc子系统。源码位于drivers&#x2F;mmc下。其下有三个子目录，分别是：card、core、host，其中，card用于构建一个块设备作为上层与mmc子系统沟通的桥梁；core抽象了mmc、sd、sdio三者的通用操作；host则是各类平台上的host驱动代码，包括如TI Omap的omap_hsmmc，三星的s3cmci等。具体的SOC，会根据实际情况再次封装(比如rockchip采用新思designwave的IP)，就重新封装为struct dw_mci。DesignWare是SoC&#x2F;ASIC设计者最钟爱的设计IP库和验证IP库。它包括一个独立于工艺的、经验证的、可综合的虚拟微架构的元件集合，包括逻辑、算术、存储和专用元件系列，超过140个模块。</p><h1 id="一、mmc子系统涉及总线-SD为例"><a href="#一、mmc子系统涉及总线-SD为例" class="headerlink" title="一、mmc子系统涉及总线(SD为例)"></a>一、mmc子系统涉及总线(SD为例)</h1><h2 id="1-1-整体框架"><a href="#1-1-整体框架" class="headerlink" title="1.1 整体框架"></a>1.1 整体框架</h2><p>①Host驱动相应的driver和device挂载在Linux内核内置的虚拟抽象总线platform_bus_type。设备树指定compatible属性与源码匹配后调用对应的probe函数来初始化对应平台的host硬件。</p><p>②Card驱动相应的driver和device挂载在mmc自己创建的虚拟总线mmc_bus_type下。该总线的结构体定义在driver&#x2F;mmc&#x2F;core&#x2F;bus.c；因为是统一的协议，mmc_driver在内核已经写好并已注册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver/mmc/card/block.c</span><br><span class="line">--&gt;mmc_blk_init()</span><br><span class="line">--&gt;mmc_register_driver(&amp;mmc_driver)；</span><br></pre></td></tr></table></figure><p>③SD卡中extended CSD寄存器中存储分区信息，上电检测到了SD卡，或者上电之后的热拔插操作，触发mmc_rescan查找检测到SD卡插入后，会通过读取该寄存器的值，获取mmc card的分区信息等，然后注册对应的mmc_card device，因mmc driver仅有一个，因此针对mmc bus而言其match函数直接返回1，表示匹配成功(因为是统一的协议)，而不需要像spi&#x2F;i2c总线的match接口那样对设备和驱动进行匹配检测；随后调用mmc_driver的probe函数（拔出卡则反之操作）。</p><p>④mmc_driver的probe函数针对该mmc card的每一个分区，均执行如下操作：</p><ol><li>为每一个分区，创建对应的通用磁盘设备gendisk；</li><li>设置gendisk的fops为mmc_bdops；</li><li>为每一个通用磁盘设备，均创建request_queue及其处理方法；</li><li>为该通用磁盘设备创建mmc block块i&#x2F;o请求机制；</li><li>将该分区的通用磁盘设备注册至块设备i&#x2F;o，以便应用层可通过块设备访问该mmc card 分区；</li></ol><h2 id="1-2-设备-总线-驱动模型"><a href="#1-2-设备-总线-驱动模型" class="headerlink" title="1.2 设备-总线-驱动模型"></a>1.2 设备-总线-驱动模型</h2><p>在分析MMC子系统的设备-总线-驱动模型时，可以借助已经分析的i2c驱动模型、spi驱动模型的实现，来学习mmc子系统的驱动模型，通过与i2c驱动模型、spi驱动模型的对比，也可以加深我们对mmc子系统驱动模型的理解（从已知去学习未知，可提供我们的学习效率）。</p><p>我们知道针对复杂的设备，则需要借助控制器进行通信，而针对i2c、spi、mmc而言，均需要对应的控制器实现与该类设备的通信。而针对这三类控制器，其模块都进行了抽象。</p><p>i2c控制器抽象为i2c adapter、spi控制器抽象为spi master，而针对mmc控制器，则抽象为mmc host；而针对这三种类型设备的抽象，i2c设备抽象为i2c client、spi设备抽象为spi device、mmc device抽象为mmc card。</p><h2 id="1-3-三类驱动模型的异同"><a href="#1-3-三类驱动模型的异同" class="headerlink" title="1.3 三类驱动模型的异同"></a>1.3 三类驱动模型的异同</h2><p>①均为控制器创建了对应的class，用于将对应的控制器设备链接至对应的class上</p><p>②针对i2c adapter、spi master这两类而言，其驱动模型中均创建了对应的链表，将所有注册的控制器设备链接在一起，而mmc子系统并没有为mmc host创建类似的链表；</p><p>③I2c&#x2F;spi设备不属于热插拔设备，因此在具体系统的板级文件或者设备树中，需要针对系统中存在的i2c&#x2F;spi设备定义注册信息，从而在LINUX系统初始化时完成i2c&#x2F;spi设备的注册；而针对mmc子系统其属于热插拔的，因此在系统初始化时不需要单独进行设备的注册；</p><p>④针对mmc子系统而言，针对mmc card的注册，mmc子系统提供了rescan接口，而该接口作为延迟工作队列的回调函数。针对mmc card而发起rescan扫描的时机如下：</p><ol><li>在mmc host添加的时候，执行一次mmc card的扫描操作。</li><li>热拔插过程执行扫描。</li></ol><p><em><strong>这里大概分三个情况来描述热插拔识别流程：</strong></em></p><ol><li>SOC带卡检测引脚，即mmc控制器部分带专门的中断寄存器位（MCI中断）</li><li>SOC不带卡检测引脚，即用普通中断引脚做检测（即sdmmc_cd引脚）</li><li>没有专门的寄存器，也没有用cd的gpio中断，采用轮询POLL</li></ol><h1 id="二、mmc子系统函数调用流程-SD为例"><a href="#二、mmc子系统函数调用流程-SD为例" class="headerlink" title="二、mmc子系统函数调用流程(SD为例)"></a>二、mmc子系统函数调用流程(SD为例)</h1><h2 id="2-1-设备树mmc节点"><a href="#2-1-设备树mmc节点" class="headerlink" title="2.1 设备树mmc节点"></a>2.1 设备树mmc节点</h2><p>关于SD卡的HOST最初始设备树节点在rk3399.dtsi</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sdmmc:</span> <span class="title class_">dwmmc@fe320000</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;rockchip,rk3399-dw-mshc&quot;</span>,</span><br><span class="line"> <span class="string">&quot;rockchip,rk3288-dw-mshc&quot;</span><span class="punctuation">;</span></span><br><span class="line"> ............................</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Host驱动流程"><a href="#2-2-Host驱动流程" class="headerlink" title="2.2 Host驱动流程"></a>2.2 Host驱动流程</h2><p>Host驱动相应的driver和device挂载在Linux内核内置的虚拟抽象总线platform_bus_type。我们设备树host device与driver匹配后调用对应的probe函数来初始化对应平台的host硬件。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">drivers\mmc\host\dw_mmc-rockchip.c</span><br><span class="line"><span class="title function_">dw_mci_rockchip_probe</span><span class="params">(<span class="keyword">struct</span> platform_device *pdev)</span></span><br><span class="line">--&gt; <span class="title function_">dw_mci_pltfm_register</span><span class="params">(pdev, drv_data)</span>; <span class="comment">//解析设备树信息，用来构造一个dw_mci *host；</span></span><br><span class="line">--&gt; dw_mci_probe(dw_mci *host); <span class="comment">//将上面构造好的dw_mci *host结构体传参进来；</span></span><br><span class="line">--&gt; setup_timer(&amp;host-&gt;cmd11_timer,dw_mci_cmd11_timer, (<span class="type">unsigned</span> <span class="type">long</span>)host); <span class="comment">//设置一些定时器，定时发送一些命令</span></span><br><span class="line">--&gt; host-&gt;dma_ops = host-&gt;pdata-&gt;dma_ops;</span><br><span class="line">--&gt; ret = devm_request_irq(host-&gt;dev, host-&gt;irq, dw_mci_interrupt, host-&gt;irq_flags, <span class="string">&quot;dw-mci&quot;</span>, host);</span><br><span class="line"><span class="comment">//这个dw_mci_interrupt中断函数会被注册两次，一次是emmc(irq=25)，一次是sd卡(irq=26),所以源码虽然只注册了一次,但是实际上注册了两次，用的都是同一个中断处理函数</span></span><br><span class="line"><span class="comment">//这个是mci寄存器的中断，我们的这款soc可以根据这个寄存器来判断发送，接收，SD卡热拔插的行为，都会触发这个中断，在这个中断处理函数里面再细分是什么操作触发的中断，进行处理，比如热拔插：</span></span><br><span class="line">--&gt; dw_mci_init_slot(dw_mci *host, i); <span class="comment">// 定义了mmc_host *mmc;，用我们封装了一层的dw_mci *host去填充注册他</span></span><br><span class="line">--&gt; mmc = mmc_alloc_host(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> dw_mci_slot), host-&gt;dev);</span><br><span class="line">--&gt; INIT_DELAYED_WORK(&amp;host-&gt;detect, mmc_rescan); <span class="comment">//初始化工作队列，里面有扫描SD卡的函数</span></span><br><span class="line">--&gt; mmc-&gt;ops = &amp;dw_mci_ops; <span class="comment">//mmc_host_ops类型的变量，用于定义本mmc_host的操作接口(包括与mmc card通信的接口request、卡检测相关的接口等)</span></span><br><span class="line">--&gt; mmc_add_host(mmc);</span><br><span class="line">--&gt; mmc_start_host(mmc_host *host);</span><br><span class="line">--&gt; mmc_schedule_delayed_work(&amp;host-&gt;detect, delay); <span class="comment">//上电添加mmc_host的时候，先主动执行一次mmc_rescan函数</span></span><br><span class="line">--&gt; dw_mci_enable_cd(host); <span class="comment">//cd = card detect ≠ sdmmc_cd 引脚中断，主要看函数内容，像这款soc就是在里面开启mci寄存器的SD卡热拔插中断</span></span><br><span class="line">--&gt; temp = mci_readl(host, INTMASK); temp  |= SDMMC_INT_CD; mci_writel(host, INTMASK, temp); <span class="comment">//开启mci寄存器的SD卡热拔插中断</span></span><br></pre></td></tr></table></figure><h2 id="2-3-热拔插中断流程"><a href="#2-3-热拔插中断流程" class="headerlink" title="2.3 热拔插中断流程"></a>2.3 热拔插中断流程</h2><p>假设热拔插SD卡引起了中断： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">dw_mci_interrupt()</span><br><span class="line"><span class="keyword">if</span> (pending &amp; SDMMC_INT_CD)</span><br><span class="line">dw_mci_handle_cd(dw_mci *host);</span><br><span class="line">--&gt; mmc_detect_change(slot-&gt;mmc,msecs_to_jiffies(host-&gt;pdata-&gt;detect_delay_ms));</span><br><span class="line">--&gt; _mmc_detect_change(host, delay, <span class="literal">true</span>);</span><br><span class="line">--&gt; mmc_schedule_delayed_work(&amp;host-&gt;detect, delay); <span class="comment">//开启工作队列</span></span><br><span class="line">--&gt; mmc_rescan() <span class="comment">//最终会调用此函数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 重点看看mmc_rescan检测SD卡热拔插的函数，我们在设备树中的SD卡定义了 supports-sd 所以：</span></span><br><span class="line">drivers\mmc\core\host.c </span><br><span class="line">mmc_of_parse</span><br><span class="line"><span class="title function_">if</span> <span class="params">(of_property_read_bool(np, <span class="string">&quot;supports-sd&quot;</span>))</span></span><br><span class="line">host-&gt;restrict_caps |= RESTRICT_CARD_TYPE_SD; </span><br><span class="line"> </span><br><span class="line">mmc_rescan()</span><br><span class="line"><span class="keyword">if</span> (host-&gt;bus_ops &amp;&amp; !host-&gt;bus_dead &amp;&amp; !(host-&gt;caps &amp; MMC_CAP_NONREMOVABLE)) <span class="comment">//上电第一次调用这个函数时候，还没有设置host-&gt;bus_ops，所以会执行后面的语句来设置host-&gt;bus_ops</span></span><br><span class="line">host-&gt;bus_ops-&gt;detect(host);</span><br><span class="line">--&gt; mmc_rescan_try_freq(host, max(freqs[i], host-&gt;f_min)) <span class="comment">//以各种频率给host发，选择最合适的频率</span></span><br><span class="line"><span class="keyword">if</span> ((host-&gt;restrict_caps &amp; RESTRICT_CARD_TYPE_SD) &amp;&amp; !mmc_attach_sd(host)) <span class="keyword">return</span> <span class="number">0</span>; 所以就会调用mmc_attach_sd</span><br><span class="line">--&gt; mmc_attach_sd(host)</span><br><span class="line">--&gt; mmc_attach_bus(host, &amp;mmc_sd_ops);</span><br><span class="line">--&gt; host-&gt;bus_ops = ops; <span class="comment">//这里的ops就是上面的mmc_ops参数</span></span><br><span class="line">--&gt; mmc_sd_init_card(host, rocr, <span class="literal">NULL</span>);</span><br><span class="line">--&gt; card = mmc_alloc_card(host, &amp;sd_type);</span><br><span class="line">--&gt; mmc_add_card(host-&gt;card);</span><br><span class="line">--&gt; device_add(&amp;card-&gt;dev);</span><br><span class="line">--&gt; bus_add_device(dev); <span class="comment">//Add the device to its bus&#x27;s list of devices, 会给mmc_bus注册一个devices，会和系统自动注册的mmc_driver匹配，调用它的probe函数</span></span><br><span class="line">                        ......</span><br><span class="line">                        --&gt; mmc_driver-&gt;probe</span><br><span class="line">                        --&gt; mmc_blk_probe() <span class="comment">//如上分析的，会读取SD卡的寄存器获取分区信息，根据分区信息注册block等。</span></span><br></pre></td></tr></table></figure><p>放一张图中好看些：</p><p><img src="2.1mmc%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B1.png" alt="2.1mmc子系统函数调用流程1"></p><h1 id="三、mmc-host相关数据结构"><a href="#三、mmc-host相关数据结构" class="headerlink" title="三、mmc_host相关数据结构"></a>三、mmc_host相关数据结构</h1><h2 id="3-1-数据结构关联"><a href="#3-1-数据结构关联" class="headerlink" title="3.1 数据结构关联"></a>3.1 数据结构关联</h2><p><img src="3.1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B3%E8%81%94.png" alt="3.1数据结构关联"></p><h2 id="3-2-mmc-host"><a href="#3-2-mmc-host" class="headerlink" title="3.2 mmc_host"></a>3.2 mmc_host</h2><p><img src="3.2mmc_host.png" alt="3.2mmc_host"></p><h2 id="3-3-mmc-card"><a href="#3-3-mmc-card" class="headerlink" title="3.3 mmc_card"></a>3.3 mmc_card</h2><p><img src="mmc_card.png" alt="mmc_card"></p><p>mmc_card结构体变量的定义如下，主要内容如下：</p><ol><li>host完成mmc_card与mmc_host的绑定；</li><li>dev完成将该mmc_card与系统中的设备、总线、驱动的关联（即完成与系统设备驱动总线的关联与绑定操作）；</li><li>卡类型与卡状态记录；</li><li>卡相关的寄存器信息记录（主要从mmc card中读取），包括cid、csd、scr、ssr等内容；</li><li>Mmc card的分区信息，主要完成块设备的创建（由mmc driver实现）；</li><li>若为sdio设备，则有cccr、cis等（关于sdio的部分，请参考sdio协议相关的文档）；</li></ol><h2 id="3-4-mmc-ios"><a href="#3-4-mmc-ios" class="headerlink" title="3.4 mmc_ios"></a>3.4 mmc_ios</h2><p><img src="mmc_ios.png" alt="mmc_ios"></p><p>该结构体主要定义mmc总线相关的参数，主要包括时钟频率、电源、总线模式、电源状态、总线带宽、支持的信号电压值等等这些参数的设置可通过mmc_host_ops-&gt;set_ios实现。</p><h2 id="3-5-mmc-host-ops"><a href="#3-5-mmc-host-ops" class="headerlink" title="3.5 mmc_host_ops"></a>3.5 mmc_host_ops</h2><p><img src="mmc_host_ops.png" alt="mmc_host_ops"></p><p>该数据结构定义了mmc_host的操作方法，主要包括如下：</p><ol><li>若mmc_host支持enable、disable，则需要实现这两个接口（可参考mmc_controller的用户手册）；</li><li>pre_req、request、post_req主要定义了mmc controller访问mmc card的方法，mmc controller驱动至少应完成request接口的定义；</li><li>set_ios接口主要用于设置mmc_controller总线相关的参数，mmc_host需要完成该接口的定义；</li><li>get_ro用于获取mmc card 的读写权限，若mmc controller提供检测mmc card读写权限的功能，则需要提供该接口；</li><li>get_cd为卡是否在位的检测接口（该接口非必须），可查看mmc controller的用户手册，确定是否支持；</li><li>init_card为mmc card初始化接口，主要是对mmc card&#x2F;mmc controller一些特定的初始化参数，若没有特殊对待项，该接口不需要处理；</li><li>剩下几个接口大多数驱动也没有实现，这几个接口可参考具体的mmc协议，大多数的mmc host驱动基本上不需要实现；</li></ol><h2 id="3-6-mmc-bus-ops"><a href="#3-6-mmc-bus-ops" class="headerlink" title="3.6 mmc_bus_ops"></a>3.6 mmc_bus_ops</h2><p><img src="mmc_bus_ops.png" alt="mmc_bus_ops"></p><p>该结构主要是针对mmc card的sleep&#x2F;awake的操作，因mmc card也需要进行sleep&#x2F;awake等接口，这些接口类似于设备驱动的电源管理（suspend&#x2F;resume）相关的接口。该结构体中的成员，不需要我们进行实现，mmc子系统已经完成，mmc子系统根据mmc各协议版本针对sleep&#x2F;awake的支持情况，实现对应的操作：</p><ol><li><p>若为mmc 4.3及以上的协议，则支持sleep&#x2F;awake接口；</p></li><li><p>remove接口实现mmc card的移除操作，主要是解除mmc card与mmc host的绑定，并将mmc card从mmc 总线上移除；</p></li><li><p>detect&#x2F;alive主要是卡在位检测以及卡是否移除检测；</p></li><li><p>针对suspend&#x2F;resume接口，针对mmc 不同版本的协议，其功能有所不同：</p><p> 4.1. 若card支持poweroff notify机制，则进入poweroff状态；<br> 4.2. 若card支持sleep状态，则进入sleep状态，针对mmc rev&gt;&#x3D;1.3的情况；<br> 4.3. card不支持以上两种状态，则向card发送deselect命令;</p></li><li><p>power_restore接口，即为mmc_power_restore接口，该接口目前即调用mmc_init_card，根据mmc 协议，完成mmc card的初始化操作。</p></li></ol><p><em><strong>参考这位博主：<a href="https://jerry-cheng.blog.csdn.net/article/details/104717742">LINUX MMC子系统分析之一 概述jerry_chg的博客-CSDN博客linux mmc子系统</a></strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>platform总线驱动设备</title>
      <link href="/2021/10/20/platform%E6%80%BB%E7%BA%BF%E9%A9%B1%E5%8A%A8%E8%AE%BE%E5%A4%87/"/>
      <url>/2021/10/20/platform%E6%80%BB%E7%BA%BF%E9%A9%B1%E5%8A%A8%E8%AE%BE%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="想白嫖，没门！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a5f2d157f7921c2f0e4c522ddd6603fc42d3f2293b69891774dfa6b5033b9949"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">主页支付宝转账5元，并留言文章标题获取密码！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input输入子系统</title>
      <link href="/2021/10/15/input%E8%BE%93%E5%85%A5%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/15/input%E8%BE%93%E5%85%A5%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="想白嫖，没门！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d1e7b52d68d78b03c475b3c25921b25fcbef793c2f39febc40785cf9e85a51d3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">主页支付宝转账5元，并留言文章标题获取密码！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux驱动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>路虽远行则将至，事虽难做则必成！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
